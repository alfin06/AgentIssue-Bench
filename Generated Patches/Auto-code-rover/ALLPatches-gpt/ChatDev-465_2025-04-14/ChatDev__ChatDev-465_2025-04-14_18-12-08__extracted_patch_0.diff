diff --git a/camel/agents/chat_agent.py b/camel/agents/chat_agent.py
index c824a15..4f4b3f8 100644
--- a/camel/agents/chat_agent.py
+++ b/camel/agents/chat_agent.py
@@ -242,7 +242,7 @@ class ChatAgent(BaseAgent):
                     raise RuntimeError("OpenAI returned unexpected struct")
                 output_messages = [
                     ChatMessage(role_name=self.role_name, role_type=self.role_type,
-                                meta_dict=dict(), **dict(choice.message))
+                                meta_dict=dict(), audio=None, **dict(choice.message))
                     for choice in response.choices
                 ]
                 info = self.get_info(
@@ -256,7 +256,7 @@ class ChatAgent(BaseAgent):
                     raise RuntimeError("OpenAI returned unexpected struct")
                 output_messages = [
                     ChatMessage(role_name=self.role_name, role_type=self.role_type,
-                                meta_dict=dict(), **dict(choice["message"]))
+                                meta_dict=dict(), audio=None, **dict(choice["message"]))
                     for choice in response["choices"]
                 ]
                 info = self.get_info(
diff --git a/camel/messages/chat_messages.py b/camel/messages/chat_messages.py
index c694d26..15ad7ff 100644
--- a/camel/messages/chat_messages.py
+++ b/camel/messages/chat_messages.py
@@ -35,7 +35,7 @@ class ChatMessage(BaseMessage):
         role_type (RoleType): The type of role, either
             :obj:`RoleType.ASSISTANT` or :obj:`RoleType.USER`.
         meta_dict (Optional[Dict[str, str]]): Additional metadata dictionary
-            for the message.
+        for the message.
         role (str): The role of the message in OpenAI chat system.
         content (str): The content of the message. (default: :obj:`""`)
         refusal (str): The refusal to build argument.
@@ -51,6 +51,21 @@ class ChatMessage(BaseMessage):
     if openai_new_api:
         function_call: Optional[FunctionCall] = None
         tool_calls: Optional[ChatCompletionMessageToolCall] = None
+    
+    def __init__(self, role_name: str, role_type: RoleType, 
+                 meta_dict: Optional[Dict[str, str]] = None,
+                 role: str = "user", content: str = "", 
+                 refusal: str = None, audio: object = None):
+        self.role_name = role_name
+        self.role_type = role_type
+        self.meta_dict = meta_dict
+        self.role = role
+        self.content = content
+        self.refusal = refusal
+        self.audio = audio
+        if openai_new_api:
+            self.function_call = None
+            self.tool_calls = None
 
     def set_user_role_at_backend(self: BaseMessage):
         return self.__class__(
