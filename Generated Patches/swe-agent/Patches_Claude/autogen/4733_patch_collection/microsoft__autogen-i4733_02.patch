diff --git a/python/packages/autogen-core/src/autogen_core/code_executor/test_reproduce.py b/python/packages/autogen-core/src/autogen_core/code_executor/test_reproduce.py
new file mode 100644
index 0000000..65eef81
--- /dev/null
+++ b/python/packages/autogen-core/src/autogen_core/code_executor/test_reproduce.py
@@ -0,0 +1,38 @@
+from autogen_core.code_executor import with_requirements, FunctionWithRequirements, Alias, ImportFromModule
+from autogen_core.code_executor._func_with_reqs import build_python_functions_file
+
+# Test case 1: Alias
+@with_requirements(python_packages=["pandas"], global_imports=[Alias("pandas", "pd")])
+def template_function1():
+    import pandas as pd
+    return pd.Series([1, 2])
+
+# Test case 2: ImportFromModule
+@with_requirements(python_packages=["pandas"], global_imports=[ImportFromModule("pandas", ["DataFrame", "concat"])])
+def template_function2():
+    from pandas import DataFrame, concat
+    data1 = {
+        "name": ["John", "Anna"],
+        "location": ["New York", "Paris"],
+        "age": [24, 13],
+    }
+    data2 = {
+        "name": ["Peter", "Linda"],
+        "location": ["Berlin", "London"],
+        "age": [53, 33],
+    }
+    df1 = DataFrame.from_dict(data1)
+    df2 = DataFrame.from_dict(data2)
+    return concat([df1, df2])
+
+print("Testing Alias...")
+try:
+    functions_module = build_python_functions_file([template_function1])
+except TypeError as e:
+    print(f"Error with Alias: {e}")
+
+print("\nTesting ImportFromModule...")
+try:
+    functions_module = build_python_functions_file([template_function2])
+except TypeError as e:
+    print(f"Error with ImportFromModule: {e}")
\ No newline at end of file
