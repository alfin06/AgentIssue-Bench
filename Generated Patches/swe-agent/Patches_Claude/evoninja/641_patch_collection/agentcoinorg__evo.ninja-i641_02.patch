diff --git a/apps/browser/app/page.tsx b/apps/browser/app/page.tsx
index 05ee1cd..f7fc415 100644
--- a/apps/browser/app/page.tsx
+++ b/apps/browser/app/page.tsx
@@ -113,27 +113,39 @@ function Dojo({ params }: { params: { id?: string } }) {
     });
   };
 
-  // Upon authentication changes, apply the chatId
-  // and recreate the evoService if necessary
+  // Handle authentication state changes
   useEffect(() => {
     if (sessionStatus !== "loading") {
       setIsAuthLoading(false);
     }
-    if (sessionStatus === "unauthenticated") {
-      if (params.id) {
-        router.push("/");
-      }
-      handleChatIdChange("<anon>");
-    } else if (sessionStatus === "authenticated") {
-      handleChatIdChange(params.id);
-      const user = sessionData?.user.email || "<anon>";
-      if (evoService.user !== user) {
-        evoService.disconnect();
-        evoService.destroy();
-        setEvoService(new EvoService(user));
+  }, [sessionStatus]);
+
+  // Handle chatId and EvoService state changes
+  useEffect(() => {
+    const handleAuthStateChange = async () => {
+      if (sessionStatus === "unauthenticated") {
+        if (params.id) {
+          router.push("/");
+          return;
+        }
+        handleChatIdChange("<anon>");
+      } else if (sessionStatus === "authenticated") {
+        const user = sessionData?.user.email || "<anon>";
+        
+        // First update the EvoService if user changed
+        if (evoService.user !== user) {
+          evoService.disconnect();
+          evoService.destroy();
+          setEvoService(new EvoService(user));
+        }
+        
+        // Then update chatId after service is ready
+        handleChatIdChange(params.id);
       }
-    }
-  }, [sessionStatus, params.id, sessionData, evoService]);
+    };
+
+    handleAuthStateChange();
+  }, [sessionStatus, params.id, sessionData?.user.email]);
 
   // Set isChatLoading to true when evoService is connected
   // and the current chatId matches the current goal (if present)
