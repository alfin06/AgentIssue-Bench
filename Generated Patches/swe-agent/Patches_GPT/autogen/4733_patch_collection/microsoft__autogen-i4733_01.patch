diff --git a/python/packages/autogen-core/src/autogen_core/__init__.py b/python/packages/autogen-core/src/autogen_core/__init__.py
index 0198544..e343f23 100644
--- a/python/packages/autogen-core/src/autogen_core/__init__.py
+++ b/python/packages/autogen-core/src/autogen_core/__init__.py
@@ -1,6 +1,9 @@
 import importlib.metadata
 
-__version__ = importlib.metadata.version("autogen_core")
+try:
+    __version__ = importlib.metadata.version("autogen_core")
+except importlib.metadata.PackageNotFoundError:
+    __version__ = "0.0.0"  # Default version when package metadata is not available
 
 from ._agent import Agent
 from ._agent_id import AgentId
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000..bbb2f83
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,43 @@
+import sys
+sys.path.insert(0, '/microsoft__autogen.git/python/packages/autogen-core/src')
+
+from autogen_core.code_executor import with_requirements, FunctionWithRequirements, Alias, ImportFromModule
+from autogen_core.code_executor._func_with_reqs import build_python_functions_file
+
+# Example 1
+try:
+    import pandas as pd
+
+    @with_requirements(python_packages=["pandas"], global_imports=[Alias("pandas", "pd")])
+    def template_function():
+        return pd.Series([1, 2])
+
+    functions_module = build_python_functions_file([template_function])
+    print("Example 1 passed")
+except TypeError as e:
+    print("Example 1 failed:", e)
+
+# Example 2
+try:
+    from pandas import DataFrame, concat
+
+    @with_requirements(python_packages=["pandas"], global_imports=[ImportFromModule("pandas", ["DataFrame", "concat"])])
+    def template_function():
+        data1 = {
+            "name": ["John", "Anna"],
+            "location": ["New York", "Paris"],
+            "age": [24, 13],
+        }
+        data2 = {
+            "name": ["Peter", "Linda"],
+            "location": ["Berlin", "London"],
+            "age": [53, 33],
+        }
+        df1 = DataFrame.from_dict(data1)
+        df2 = DataFrame.from_dict(data2)
+        return concat([df1, df2])
+
+    functions_module = build_python_functions_file([template_function])
+    print("Example 2 passed")
+except TypeError as e:
+    print("Example 2 failed:", e)
\ No newline at end of file
