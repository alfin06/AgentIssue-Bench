[
    {
        "instance_id": "gpt-engineer__gpt-engineer-1197",
        "title": "Failed to update new codes from gpte",
        "problem_statement": "Failed to update new codes from gpte. What I did: I create Java Spring Boot project with gpte first, and I want to separate application.yaml as two env config files, so I use below prompt to do gpte -i\r\n\"I want to seperate different environment, stage environment and local environment, current setting is for stage, so I need a new yaml config for local, and this local environment I want to use H2 DB. So yamle file will have two, and run.sh I also want two for different env\"\r\n\r\n## Expected Behavior\r\nI expect to have yaml files and run.sh file for both local and stage env.\r\n\r\n## Current Behavior\r\nError\r\n```\r\nTraceback (most recent call last):\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/gpt_engineer/core/default/steps.py\", line 379, in handle_improve_mode\r\n    files_dict = agent.improve(files_dict, prompt)\r\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/gpt_engineer/applications/cli/cli_agent.py\", line 208, in improve\r\n    files_dict = self.improve_fn(\r\n                 ^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/gpt_engineer/core/default/steps.py\", line 311, in improve_fn\r\n    return _improve_loop(ai, files_dict, memory, messages)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/gpt_engineer/core/default/steps.py\", line 318, in _improve_loop\r\n    files_dict, errors = salvage_correct_hunks(messages, files_dict, memory)\r\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/opt/homebrew/lib/python3.11/site-packages/gpt_engineer/core/default/steps.py\", line 351, in salvage_correct_hunks\r\n    file_to_lines_dict(files_dict[diff.filename_pre])\r\n                       ~~~~~~~~~~^^^^^^^^^^^^^^^^^^^\r\nKeyError: 'src/main/resources/application-stage.yml'\r\n\r\n``` \r\n\r\n## Failure Information\r\ngpt-4o\r\n\r\n\r\n## Installation Method\r\npython -m pip install gpt-engineer\r\n\r\n",
        "base_commit": "c1f4a9da5dd0abed15b91f6d1c60464cad84ce6c",
        "repo": "repo/gpt-engineer-1197",
        "patch": {
            "gpt_engineer/core/chat_to_files.py": {
                "before": [
                    "@@ -138,7 +138,7 @@ def parse_diffs(diff_string: str) -> dict:",
                    " ",
                    "     diffs = {}",
                    "     try:",
                    "-        for block in diff_block_pattern.finditer(diff_string):"
                ],
                "after": [
                    "-        for block in diff_block_pattern.finditer(diff_string):",
                    "+        for block in diff_block_pattern.finditer(diff_string, timeout=1):",
                    "             diff_block = block.group()",
                    " ",
                    "             # Parse individual diff blocks and update the diffs dictionary"
                ]
            }
        }
    },
    {
        "instance_id": "pythagora__pythagora-55",
        "title": "bug: error on log dumping due to invalid path - directory not found",
        "problem_statement": "bug: error on log dumping due to invalid path - directory not found. I mistakenly configured an invalid api key. So the actual error looks like `Error: Response status code: 401. Error message: Access denied. Invalid API key.` but I wasn't able to see this message due to an error occurred during log dumping as below.\r\n\r\n```\r\nError: ENOENT: no such file or directory, open '<path>/pythagora_tests/unit/errorLogs.log'\r\n    at Object.openSync (node:fs:601:3)\r\n    at Object.writeFileSync (node:fs:2249:35)\r\n    at generateTestsForDirectory (<path>/node_modules/pythagora/src/helpers/unitTests.js:382:12) {\r\n  errno: -2,\r\n  syscall: 'open',\r\n  code: 'ENOENT',\r\n  path: '<path>/pythagora_tests/unit/errorLogs.log'\r\n}\r\n```\r\n\r\nFix: create the `unit` folder under `pythagora_tests`",
        "base_commit": "3369b1a83a09d3290f2d7357cef3a366fa4412d9",
        "repo": "repo/pythagora-55",
        "patch": {
            "src/helpers/starting.js": {
                "before": [
                    "@@ -7,7 +7,8 @@ const {",
                    "     EXPORTED_TESTS_DATA_DIR,",
                    "     PYTHAGORA_METADATA_DIR,",
                    "     METADATA_FILENAME,",
                    "-    EXPORT_METADATA_FILENAME"
                ],
                "after": [
                    "+    });",
                    "+",
                    "     if (!fs.existsSync(path.resolve(root, PYTHAGORA_METADATA_DIR, METADATA_FILENAME))) fs.writeFileSync(path.resolve(root, PYTHAGORA_METADATA_DIR, METADATA_FILENAME), '{}');",
                    "     if (!fs.existsSync(path.resolve(root, PYTHAGORA_METADATA_DIR, EXPORT_METADATA_FILENAME))) fs.writeFileSync(path.resolve(root, PYTHAGORA_METADATA_DIR, EXPORT_METADATA_FILENAME), '{}');",
                    " }"
                ]
            }
        }
    },
    {
        "instance_id": "lagent__lagent-279",
        "title": "ModuleNotFoundError: No module named 'tenacity'",
        "problem_statement": "ModuleNotFoundError: No module named 'tenacity'. MindSearch git:(update_for_camp) \u2717 python -m mindsearch.app --lang en --model_format internlm_silicon --search_engine DuckDuckGoSearch --asy \r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/vansin/miniconda3/envs/mindsearch1/lib/python3.10/runpy.py\", line 196, in _run_module_as_main\r\n    return _run_code(code, main_globals, None,\r\n  File \"/Users/vansin/miniconda3/envs/mindsearch1/lib/python3.10/runpy.py\", line 86, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/Users/vansin/code/lab/MindSearch/mindsearch/app.py\", line 14, in <module>\r\n    from mindsearch.agent import init_agent\r\n  File \"/Users/vansin/code/lab/MindSearch/mindsearch/agent/__init__.py\", line 5, in <module>\r\n    from lagent.actions import AsyncWebBrowser, WebBrowser\r\n  File \"/Users/vansin/miniconda3/envs/mindsearch1/lib/python3.10/site-packages/lagent/actions/__init__.py\", line 9, in <module>\r\n    from .ipython_interpreter import AsyncIPythonInterpreter, IPythonInterpreter\r\n  File \"/Users/vansin/miniconda3/envs/mindsearch1/lib/python3.10/site-packages/lagent/actions/ipython_interpreter.py\", line 18, in <module>\r\n    from tenacity import retry, retry_if_result, stop_after_attempt, wait_fixed\r\nModuleNotFoundError: No module named 'tenacity'\r\n(mindsearch1) \u279c  MindSearch git:(update_for_camp) \u2717 \r\n\r\n```\r\n\r\nadd `tenacity` in lagent\r\n",
        "base_commit": "4db8ea842491226b16a13e9221143e02d8d3bb84",
        "repo": "repo/lagent-279",
        "patch": {
            "requirements/runtime.txt": {
                "before": [
                    "@@ -18,3 +18,4 @@ termcolor",
                    " tiktoken",
                    " timeout-decorator",
                    " typing-extensions",
                    "+tenacity"
                ],
                "after": [
                    "@@ -18,3 +18,4 @@ termcolor",
                    " tiktoken",
                    " timeout-decorator",
                    " typing-extensions",
                    "+tenacity"
                ]
            }
        }
    },
    {
        "instance_id": "lagent__lagent-239",
        "title": "ModuleNotFoundError: No module named 'griffe.enumerations",
        "problem_statement": "ModuleNotFoundError: No module named 'griffe.enumerations. ![image](https://github.com/user-attachments/assets/543cea76-ba8f-480f-a094-8498393434d2)\r\n\r\nwhat\u2018s happen with this question",
        "base_commit": "906845f1af47fcb7d81c5c32ec44b0cc22204f8a",
        "repo": "repo/lagent-239",
        "patch": {
            "requirements/runtime.txt": {
                "before": [
                    "@@ -2,7 +2,7 @@ arxiv",
                    " distro",
                    " filelock",
                    " func_timeout",
                    "-griffe"
                ],
                "after": [
                    " timeout-decorator",
                    " typing-extensions",
                    "-duckduckgo_search==5.3.1b1",
                    "\\ No newline at end of file",
                    "+duckduckgo_search==5.3.1b1"
                ]
            }
        }
    },
    {
        "instance_id": "lagent__lagent-244",
        "title": "AttributeError: 'GenerationConfig' object has no attribute '_eos_token_tensor'",
        "problem_statement": "AttributeError: 'GenerationConfig' object has no attribute '_eos_token_tensor'. Traceback (most recent call last):\r\n  File \"/data/anaconda3/envs/torch/lib/python3.11/site-packages/streamlit/runtime/scriptrunner/exec_code.py\", line 88, in exec_func_with_error_handling\r\n    result = func()\r\n             ^^^^^^\r\n  File \"/data/anaconda3/envs/torch/lib/python3.11/site-packages/streamlit/runtime/scriptrunner/script_runner.py\", line 590, in code_to_exec\r\n    exec(code, module.__dict__)\r\n  File \"/data/github/lagent/examples/internlm2_agent_web_demo_hf.py\", line 332, in <module>\r\n    main()\r\n  File \"/data/github/lagent/examples/internlm2_agent_web_demo_hf.py\", line 285, in main\r\n    for agent_return in st.session_state['chatbot'].stream_chat(\r\n  File \"/data/anaconda3/envs/torch/lib/python3.11/site-packages/lagent/agents/internlm2_agent.py\", line 303, in stream_chat\r\n    for model_state, res, _ in self._llm.stream_chat(prompt, **kwargs):\r\n  File \"/data/anaconda3/envs/torch/lib/python3.11/site-packages/lagent/llms/huggingface.py\", line 292, in stream_chat\r\n    yield from self.stream_generate(prompt, do_sample, **kwargs)\r\n  File \"/data/anaconda3/envs/torch/lib/python3.11/site-packages/lagent/llms/huggingface.py\", line 197, in stream_generate\r\n    logits_processor = self.model._get_logits_processor(\r\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/data/anaconda3/envs/torch/lib/python3.11/site-packages/transformers/generation/utils.py\", line 866, in _get_logits_processor\r\n    and generation_config._eos_token_tensor is not None\r\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\nAttributeError: 'GenerationConfig' object has no attribute '_eos_token_tensor'\r\n```",
        "base_commit": "906845f1af47fcb7d81c5c32ec44b0cc22204f8a",
        "repo": "repo/lagent-244",
        "patch": {
            "requirements/runtime.txt": {
                "before": [
                    "@@ -2,7 +2,7 @@ arxiv",
                    " distro",
                    " filelock",
                    " func_timeout",
                    "-griffe"
                ],
                "after": [
                    " timeout-decorator",
                    " typing-extensions",
                    "-duckduckgo_search==5.3.1b1",
                    "\\ No newline at end of file",
                    "+duckduckgo_search==5.3.1b1"
                ]
            }
        }
    },
    {
        "instance_id": "superagent__superagent-953",
        "title": "Installation Error - supabase: not found",
        "problem_statement": "Installation Error - supabase: not found. Description\n\nI cloned the repo and checked out v0.2.28. When I try to follow the [installation instructions using docker compose](https://docs.superagent.sh/overview/installation/docker-compose) I am unable to get the superagent-ui@0.0.1 image to run. I see the following output in the logs for the container\r\n\r\n```\r\n(base) [root@fedora .docker]# docker logs -f superagent-ui\r\n\r\n> superagent-ui@0.0.1 supabase:docker:push\r\n> supabase db push --db-url ${SUPABASE_DB_URL}\r\n\r\nsh: 1: supabase: not found\r\n(base) [root@fedora .docker]# docker exec -ti superagent-ui /bin/bash\r\nError response from daemon: Container b89a6228b3a81118eb2b2a7eb5e824768425b7964f660868cf5ce04b0c6a3849 is not running\r\n```\r\n\r\n\n\n### Steps to reproduce\n\n1. Clone repo \r\n2. Checked out v0.2.28\r\n3. Configure the hosts file\r\n4. Follow the instructions to deploy supabase, langfuse, vector store\r\n5. Follow the instructions to deploy superagent (i.e. invoke run.sh)\n\n### Acknowledgements\n\n- [X] My issue title is concise, descriptive.\n- [X] I have searched the existing issues to make sure this bug has not been reported yet.\n- [X] I am using the latest version of superagent.\n- [X] I have provided enough information for the maintainers to reproduce and diagnose the issue.",
        "base_commit": "9b35c28d1f61f1087491a31e18a61325322d0319",
        "repo": "repo/superagent-953",
        "patch": {
            "libs/ui/package.json": {
                "before": [
                    "@@ -12,13 +12,13 @@",
                    "     \"typecheck\": \"tsc --noEmit\",",
                    "     \"format:write\": \"prettier --write \\\"**/*.{ts,tsx,mdx}\\\" --cache\",",
                    "     \"format:check\": \"prettier --check \\\"**/*.{ts,tsx,mdx}\\\" --cache\",",
                    "-    \"supabase:init\": \"supabase init\","
                ],
                "after": [
                    "+    \"supabase:cloud:push\": \"npx supabase db push\",",
                    "+    \"supabase:docker:push\": \"npx supabase db push --db-url ${SUPABASE_DB_URL}\",",
                    "     \"stripe:listen\": \"stripe listen --forward-to http://localhost:3000/api/stripe/webhook\"",
                    "   },",
                    "   \"dependencies\": {"
                ]
            }
        }
    },
    {
        "instance_id": "gpt-researcher__gpt-researcher-1027",
        "title": "language in detailed reports",
        "problem_statement": "language in detailed reports. Describe the bug**\r\nWhen asking for a detail report, there is a missing keyword argument 'language' \r\n\r\nError: \r\n\r\nTypeError: generate_subtopic_report_prompt() got an unexpected keyword argument 'language'\r\nINFO:     connection closed\r\n\r\nIf one add language to prompt.py\r\nin line 286 =>\r\ndef generate_subtopic_report_prompt(\r\n    current_subtopic,\r\n    existing_headers: list,\r\n    relevant_written_contents: list,\r\n    main_topic: str,\r\n    context,\r\n    report_format: str = \"apa\",\r\n    max_subsections=5,\r\n    total_words=800,\r\n    tone: Tone = Tone.Objective,\r\n    **language=\"fran\u00e7ais\",**\r\n\r\nThere is no more error, but the subtopic report remain in english... \r\n\r\nNB: I had an language var in my .env :\r\nLANGUAGE=\"french\"\r\n\r\nIs it a bug or I made a mistake ? \r\n",
        "base_commit": "ec94dcd56e2b72f7b373bfbe4df6498ba6304009",
        "repo": "repo/gpt-researcher-1027",
        "patch": {
            "gpt_researcher/prompts.py": {
                "before": [
                    "@@ -293,6 +293,7 @@ def generate_subtopic_report_prompt(",
                    "     max_subsections=5,",
                    "     total_words=800,",
                    "     tone: Tone = Tone.Objective,",
                    "+    language: str = \"english\","
                ],
                "after": [
                    " \"IMPORTANT!\":",
                    "+- Write the report in {language}.",
                    " - The focus MUST be on the main topic! You MUST Leave out any information un-related to it!",
                    " - Must NOT have any introduction, conclusion, summary or reference section.",
                    " - You MUST include hyperlinks with markdown syntax ([url website](url)) related to the sentences wherever necessary."
                ]
            }
        }
    },
    {
        "instance_id": "evo.ninja__evo.ninja-652",
        "title": "Example Prompts Break If Previously Viewing Existing Chat",
        "problem_statement": "Example Prompts Break If Previously Viewing Existing Chat. Reproduce:* Select existing chat (with a goal)\r\n* Navigate to the root\r\n* Click an example prompt\r\n* Workspace files aren't properly applied",
        "base_commit": "0921a60f43830fca6fd53e700c1baa05edf2a59c",
        "repo": "repo/evo.ninja-652",
        "patch": {
            "apps/browser/components/Workspace.tsx": {
                "before": [
                    "@@ -8,7 +8,7 @@ import { DownloadSimple, FilePlus } from \"@phosphor-icons/react\";",
                    " import Button from \"./Button\";",
                    " import { useWorkspaceUploadDrop } from \"@/lib/hooks/useWorkspaceUploadDrop\";",
                    " import { useAtom } from \"jotai\";",
                    "-import { workspaceFilesAtom, workspaceUploadsAtom, welcomeModalAtom } from \"@/lib/store\";"
                ],
                "after": [
                    "+        {isChatLoading ? (",
                    "+          <div className=\"mt-1 h-24 w-full animate-pulse rounded-lg bg-zinc-700\" />",
                    "         ) : (",
                    "           <>",
                    "             {workspaceFiles.length === 0 ? ("
                ]
            },
            "apps/browser/lib/hooks/useEvoService.ts": {
                "before": [
                    "@@ -149,7 +149,7 @@ export const useEvoService = (",
                    "     return workspace;",
                    "   };",
                    " ",
                    "-  const setWorkspace = async (workspace: Workspace) => {"
                ],
                "after": [
                    "-  const setWorkspace = async (workspace: Workspace) => {",
                    "+  const setWorkspace = async (workspace: Workspace | undefined) => {",
                    "     setWorkspaceAtom(workspace);",
                    "     await workspaceFilesUpdate(workspace);",
                    "   };"
                ]
            },
            "apps/browser/lib/hooks/useWorkspaceFilesUpdate.ts": {
                "before": [
                    "@@ -6,7 +6,12 @@ import { workspaceFilesAtom } from \"@/lib/store\";",
                    " export const useWorkspaceFilesUpdate = () => {",
                    "   const [, setWorkspaceFiles] = useAtom(workspaceFilesAtom);",
                    " ",
                    "-  return async (workspace: Workspace) => {"
                ],
                "after": [
                    "+    }",
                    "+",
                    "     const files: InMemoryFile[] = [];",
                    "     const encoder = new TextEncoder();",
                    "     const entries = await workspace.readdir(\"./\");"
                ]
            },
            "apps/browser/lib/services/evo/EvoThread.ts": {
                "before": [
                    "@@ -34,7 +34,7 @@ export interface EvoThreadCallbacks {",
                    "   setStatus: (status?: string) => void;",
                    "   setIsRunning: (value: boolean) => void;",
                    "   setChatLog: (chatLog: ChatLog[]) => void;",
                    "-  setWorkspace: (workspace: Workspace) => void;"
                ],
                "after": [
                    "-    this._callbacks.setWorkspace(this._state.workspace);",
                    "+    await this._callbacks.setWorkspace(this._state.workspace);",
                    "   }",
                    " ",
                    "   async start(options: EvoThreadStartOptions): Promise<void> {"
                ]
            }
        }
    },
    {
        "instance_id": "evo.ninja__evo.ninja-594",
        "title": "Handle Anonymous Session File Uploads",
        "problem_statement": "Handle Anonymous Session File Uploads. In this PR https://github.com/polywrap/evo.ninja/pull/587 a problem was introduced where files uploaded within the \"anonymous\" workspace do not get applied to the new chat workspace you create when submitting a prompt (mentioned here: https://github.com/polywrap/evo.ninja/pull/587#discussion_r1427911231). This needs to be fixed.",
        "base_commit": "c0b8e0f6ce1b19ea939c66fb57db48e35df31d79",
        "repo": "repo/evo.ninja-594",
        "patch": {
            "apps/browser/app/page.tsx": {
                "before": [
                    "@@ -15,7 +15,7 @@ import { useCreateChat } from \"@/lib/mutations/useCreateChat\";",
                    " import { useUpdateChatTitle } from \"@/lib/mutations/useUpdateChatTitle\";",
                    " import { EvoService } from \"@/lib/services/evo/EvoService\";",
                    " import { useEvoService } from \"@/lib/hooks/useEvoService\";",
                    "-import { useWorkspaceUploadSync } from \"@/lib/hooks/useWorkspaceUploadSync\";"
                ],
                "after": [
                    "-              workspaceUploadSync(workspace, uploads);",
                    "+              workspaceUploadUpdate(workspace, uploads);",
                    "             }",
                    "           }}",
                    "         />"
                ]
            },
            "apps/browser/components/ExamplePrompts.tsx": {
                "before": [
                    "@@ -1,5 +1,5 @@",
                    " import { workspaceAtom, workspaceUploadsAtom } from \"@/lib/store\";",
                    "-import { useWorkspaceUploadSync } from \"@/lib/hooks/useWorkspaceUploadSync\";",
                    "+import { useWorkspaceUploadUpdate } from \"@/lib/hooks/useWorkspaceUploadUpdate\";",
                    " import { examplePrompts, ExamplePrompt } from \"@/lib/examplePrompts\";"
                ],
                "after": [
                    "-        workspaceUploadSync(workspace, prompt.files)",
                    "+        workspaceUploadUpdate(workspace, prompt.files)",
                    "       }",
                    "     }",
                    "     return props.onClick(prompt.prompt);"
                ]
            },
            "apps/browser/components/Sidebar.tsx": {
                "before": [
                    "@@ -6,7 +6,7 @@ import { useDeleteChat } from \"@/lib/mutations/useDeleteChat\";",
                    " import { useUpdateChatTitle } from \"@/lib/mutations/useUpdateChatTitle\";",
                    " import { useChats } from \"@/lib/queries/useChats\";",
                    " import useWindowSize from \"@/lib/hooks/useWindowSize\";",
                    "-import { useWorkspaceUploadSync } from \"@/lib/hooks/useWorkspaceUploadSync\";"
                ],
                "after": [
                    "-                    workspaceUploadSync(workspace, uploads);",
                    "+                    workspaceUploadUpdate(workspace, uploads);",
                    "                   }",
                    "                 }}",
                    "               />"
                ]
            },
            "apps/browser/lib/hooks/useEvoService.ts": {
                "before": [
                    "@@ -14,8 +14,8 @@ import { useAddVariable } from \"@/lib/mutations/useAddVariable\";",
                    " import { useChats } from \"@/lib/queries/useChats\";",
                    " import { SupabaseWorkspace } from \"@/lib/supabase/SupabaseWorkspace\";",
                    " import { useSupabaseClient } from \"@/lib/supabase/useSupabaseClient\";",
                    "-import { useWorkspaceFilesSync } from \"@/lib/hooks/useWorkspaceFilesSync\";"
                ],
                "after": [
                    "-    await workspaceFilesSync(workspace);",
                    "+    await workspaceFilesUpdate(workspace);",
                    "   };",
                    " ",
                    "   const handleChatLogAdded = async (log: ChatLog) => {"
                ]
            },
            "apps/browser/lib/hooks/useWorkspaceFilesUpdate.ts": {
                "before": [
                    "@@ -3,7 +3,7 @@ import { Workspace } from \"@evo-ninja/agent-utils\";",
                    " import { InMemoryFile } from \"@nerfzael/memory-fs\";",
                    " import { workspaceFilesAtom } from \"@/lib/store\";",
                    " ",
                    "-export const useWorkspaceFilesSync = () => {"
                ],
                "after": [
                    "-export const useWorkspaceFilesSync = () => {",
                    "+export const useWorkspaceFilesUpdate = () => {",
                    "   const [, setWorkspaceFiles] = useAtom(workspaceFilesAtom);",
                    " ",
                    "   return async (workspace: Workspace) => {"
                ]
            },
            "apps/browser/lib/hooks/useWorkspaceUploadUpdate.ts": {
                "before": [
                    "@@ -1,12 +1,12 @@",
                    " import { workspaceUploadsAtom } from \"@/lib/store\";",
                    "-import { useWorkspaceFilesSync } from \"@/lib/hooks/useWorkspaceFilesSync\";",
                    "+import { useWorkspaceFilesUpdate } from \"@/lib/hooks/useWorkspaceFilesUpdate\";",
                    " import { useAtom } from \"jotai\";"
                ],
                "after": [
                    "     );",
                    "-    await workspaceFilesSync(workspace);",
                    "+    await workspaceFilesUpdate(workspace);",
                    "   }",
                    " }"
                ]
            }
        }
    },
    {
        "instance_id": "evo.ninja__evo.ninja-525",
        "title": "Error on maximum context for GPT request and ask for another goal :/",
        "problem_statement": "**Describe the bug**\r\nWhen I post a link to the issue on GitHub and ask the agent to analyze it, it returns me the error\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Ask the agent \"Look at this issue and write me what I can do to fix it `https://github.com/RetroAchievements/RAWeb/issues/1863`\"\r\n2. Wait for hist step3-5 to throw an error with: `400 This model's maximum context length is 16385 tokens. However, your messages resulted in 24027 tokens. Please reduce the length of the messages.`\r\n\r\n**Expected behavior**\r\nIt will split the information and send it with 2 or more requests for achieving the goal.",
        "base_commit": "96bd1a54b43e30c89b485a4db966e270cac167f3",
        "repo": "repo/evo.ninja-525",
        "patch": {
            "apps/browser/lib/api/ProxyLlmApi.ts": {
                "before": [
                    "@@ -1,4 +1,4 @@",
                    "-import { ChatLogs, LlmApi, LlmOptions } from \"@evo-ninja/agents\";",
                    "+import { ChatLogs, LlmApi, LlmModel, LlmOptions } from \"@evo-ninja/agents\";",
                    " import { ChatCompletionMessage, ChatCompletionTool } from \"openai/resources\";",
                    " import { ERROR_SUBSIDY_MAX } from \"./errors\";"
                ],
                "after": [
                    "-    private _defaultModel: string,",
                    "+    private _defaultModel: LlmModel,",
                    "     private _defaultMaxTokens: number,",
                    "     private _defaultMaxResponseTokens: number,",
                    "     private _setCapReached: () => void"
                ]
            },
            "packages/agents/src/agent-core/llm/LlmApi.ts": {
                "before": [
                    "@@ -27,7 +27,7 @@ export interface LlmOptions {",
                    " export interface LlmApi {",
                    "   getMaxContextTokens(): number;",
                    "   getMaxResponseTokens(): number;",
                    "-  getModel(): string;"
                ],
                "after": [
                    "-  getModel(): string;",
                    "+  getModel(): LlmModel;",
                    "   getResponse(",
                    "     chatLog: ChatLogs,",
                    "     functionDefinitions?: FunctionDefinition[],"
                ]
            },
            "packages/agents/src/agent-debug/DebugLlmApi.ts": {
                "before": [
                    "@@ -2,7 +2,7 @@ import { ChatCompletionMessage } from \"openai/resources\";",
                    " import { DebugLog } from \"./DebugLog\";",
                    " import { Timer } from \"./Timer\";",
                    " ",
                    "-import { LlmApi, LlmOptions, ChatLogs, ChatMessage } from \"@/agent-core\";"
                ],
                "after": [
                    "-  getModel(): string {",
                    "+  getModel(): LlmModel {",
                    "     return this.llm.getModel();",
                    "   }",
                    " "
                ]
            },
            "packages/agents/src/agents/Evo/index.ts": {
                "before": [
                    "@@ -175,7 +175,7 @@ export class Evo extends Agent<GoalRunArgs> {",
                    "               : \"\"",
                    "           }`),",
                    "       {",
                    "-        model: \"gpt-3.5-turbo-16k\","
                ],
                "after": [
                    "-        model: \"gpt-3.5-turbo-16k\",",
                    "+        model: this.context.llm.getModel(),",
                    "       }",
                    "     );",
                    "   }"
                ]
            }
        }
    },
    {
        "instance_id": "evo.ninja__evo.ninja-515",
        "title": "evo should be able to answer the user when asked what it can do",
        "problem_statement": "evo should be able to answer the user when asked what it can do. Right now evo tries to pick one of its sub-agents to accomplish each step towards its goal, but many steps can be best answered through a basic completion. \r\n\r\nThis can lead to some absurd results. For example, when I ask evo \"what can you do\" it invokes the researcher and starts searching the web.\r\n<img width=\"932\" alt=\"Screenshot 2023-12-01 at 4 17 43\u202fPM\" src=\"https://github.com/polywrap/evo.ninja/assets/10736693/e90f96ff-1f86-4261-855b-6f46c511bc4b\">\r\n\r\nThis leads to a related point, which is that evo should have the ability to introspect. It should have an understanding of how it is built and what it is capable of doing, so that if a user asks a question like this it can provide a useful result. We could then make one of the example prompts \"tell me what you can do\" so that the user is led to click this first to get some guidance when they start out.",
        "base_commit": "94c730b71a04636d57cae249db008d3ca59194ea",
        "repo": "repo/evo.ninja-515",
        "patch": {
            "packages/agents/src/agents/Evo/findBestAgent.ts": {
                "before": [
                    "@@ -28,11 +28,10 @@ export const findBestAgent = async (",
                    "   AgentFunctionBase<unknown>[]",
                    " ]> => {",
                    "   const allAgents: Agent[] = [",
                    "-    DeveloperAgent,"
                ],
                "after": [
                    "-  ].map(agentClass => new agentClass(context.cloneEmpty()));",
                    "+  ].map((agentClass) => new agentClass(context.cloneEmpty()));",
                    " ",
                    "   const agentsWithPrompts = allAgents.map(agent => {",
                    "     return {"
                ]
            },
            "packages/agents/src/agents/Evo/index.ts": {
                "before": [
                    "@@ -71,8 +71,9 @@ export class Evo extends Agent<GoalRunArgs> {",
                    "       buildDirectoryPreviewMsg(this.context.workspace),",
                    "       { role: \"user\", content: prompts.exhaustAllApproaches },",
                    "       { role: \"user\", content: prompts.variablesExplainer },",
                    "+      { role: \"user\", content: prompts.evoExplainer },"
                ],
                "after": [
                    "-    ]",
                    "+    ];",
                    " ",
                    "     await chat.persistent(initialMessages);",
                    "     this.goal = args.goal;"
                ]
            },
            "packages/agents/src/agents/Evo/prompts.ts": {
                "before": [
                    "@@ -1,6 +1,9 @@",
                    "-import { ChatMessage } from \"@/agent-core\";",
                    "+import { ChatMessage, Prompt } from \"@/agent-core\";",
                    " import { GoalRunArgs } from \"../../agents/utils\";",
                    " import { AgentPrompts } from \"../../agents/utils\";"
                ],
                "after": [
                    "+    .line(`CsvAnalyst expertise: ` + csvAnalystPrompts.expertise)",
                    "+    .line(`Researcher expertise: ` + researcherPrompts.expertise)",
                    "+    .line(`Synthesizer expertise: ` + synthesizerPrompts.expertise)",
                    "+    .toString(),",
                    " };"
                ]
            }
        }
    },
    {
        "instance_id": "evo.ninja__evo.ninja-504",
        "title": "Embedding Proxy API - Body Exceeds Maximum Size",
        "problem_statement": "Embedding Proxy API - Body Exceeds Maximum Size. ![image](https://github.com/polywrap/evo.ninja/assets/5522128/02bf3bb3-0b15-4b52-8fd2-a8acc2fb1d85)\r\n\r\nYou can reproduce this by using a prompt that requires extensive web scraping (text chunking & embedding), like \"What is tesla's revenue from 2003 to 2023?\"",
        "base_commit": "3849d6711590332490564bb3f215fca65c3111ec",
        "repo": "repo/evo.ninja-504",
        "patch": {
            "apps/browser/src/api/ProxyEmbeddingApi.ts": {
                "before": [
                    "@@ -13,8 +13,13 @@ export class ProxyEmbeddingApi implements EmbeddingApi {",
                    "   private _goalId: string | undefined = undefined;",
                    " ",
                    "   constructor(",
                    "-    private _tokenizer: Tokenizer,"
                ],
                "after": [
                    "     }",
                    "-    const { embeddings } = await embeddingResponse.json();",
                    "-    return embeddings;",
                    "   }",
                    " }"
                ]
            }
        }
    },
    {
        "instance_id": "evo.ninja__evo.ninja-445",
        "title": "Evo hallucinates when there is no specific goal provided",
        "problem_statement": "Evo hallucinates when there is no specific goal provided. If you just tell Evo  \"Hello\" it will go on a loop trying to respond but doesnt exit with a GoalAchieved call.\r\n\r\nThere is a similar error where if you prompt it:\r\n`Create a music analysis tool that takes in a midi file and says the notes its playing.`\r\n\r\n\r\nIt will not find the necessary script \r\n\r\n**ERROR:** Error: Unable to find the script fs.writeFile\r\n\"Developer\" failed to accomplish the task \"Create a music analysis tool\"\r\n**ERROR:** Error: Unable to find the script fs.readFile\r\n\"Researcher\" failed to accomplish the task \"Research MIDI file analysis libraries or tools\"\r\nError: Unrecoverable error encountered.\r\n\r\n**ERROR:** Error: Unable to find the script fs.readFile\r\n\"Scripter\" failed to accomplish the task \"Write a script to analyze MIDI files and extract the notes being played\"\r\n**ERROR:** Goal could not be achieved: undefined",
        "base_commit": "f058a30c725ab47ee217fb04d4f319c389fae05d",
        "repo": "repo/evo.ninja-445",
        "patch": {
            ".github/workflows/cd-ui.yaml": {
                "before": [
                    "@@ -18,10 +18,14 @@ jobs:",
                    "     - name: Checkout repository",
                    "       uses: actions/checkout@v2",
                    " ",
                    "-    - name: Set up Node.js 18.15"
                ],
                "after": [
                    "-        node-version: 18.15",
                    "+        node-version: '${{ steps.nvm.outputs.NVMRC }}'",
                    " ",
                    "     - name: Install dependencies",
                    "       run: yarn"
                ]
            },
            ".github/workflows/ci.yaml": {
                "before": [
                    "@@ -14,10 +14,14 @@ jobs:",
                    "     - name: Checkout repository",
                    "       uses: actions/checkout@v2",
                    " ",
                    "-    - name: Set up Node.js 18.15"
                ],
                "after": [
                    "-        node-version: 18.15",
                    "+        node-version: '${{ steps.nvm.outputs.NVMRC }}'",
                    " ",
                    "     - name: Install dependencies",
                    "       run: yarn"
                ]
            },
            ".gitignore": {
                "before": [
                    "@@ -13,3 +13,6 @@ db",
                    " ",
                    " !/benchmarks/agbenchmark_config/config.json",
                    " /benchmarks/agbenchmark_config",
                    "+"
                ],
                "after": [
                    " /benchmarks/agbenchmark_config",
                    "+",
                    "+/apps/browser/src/scripts.ts",
                    "+.next",
                    "\\ No newline at end of file"
                ]
            },
            ".nvmrc": {
                "before": [
                    "@@ -1 +1 @@",
                    "-v18.15",
                    "\\ No newline at end of file",
                    "+v20.9",
                    "\\ No newline at end of file"
                ],
                "after": [
                    "@@ -1 +1 @@",
                    "-v18.15",
                    "\\ No newline at end of file",
                    "+v20.9",
                    "\\ No newline at end of file"
                ]
            },
            "CONTRIBUTING.md": {
                "before": [
                    "@@ -0,0 +1,41 @@",
                    "+# Contributing",
                    "+",
                    "+Here are some ways you can contribute:",
                    "+"
                ],
                "after": [
                    "+",
                    "+$ poetry env remove myenv-dL2uBROB-py3.10",
                    "+```",
                    "+",
                    "+This will run the `agbenchmark` framework against the API of the [Agent Protocol](https://github.com/AI-Engineers-Foundation/agent-protocol-sdk-js). And will set a timeout of 5 minutes per task; if you'd like to run just one test in particular you can just add the flag `--test=TestCaseName`"
                ]
            },
            "README.md": {
                "before": [
                    "@@ -2,95 +2,84 @@",
                    " ",
                    " ![](https://hackmd.io/_uploads/ByWjLKAhn.png)",
                    " ",
                    "-[Discord](https://discord.gg/X7ystzGcf5) | [Website](https://evo.ninja)"
                ],
                "after": [
                    "+## UI",
                    " ",
                    "-This will run the `agbenchmark` framework against the API of the [Agent Protocol](https://github.com/AI-Engineers-Foundation/agent-protocol-sdk-js). And will set a timeout of 5 minutes per task; if you'd like to run just one test in particular you can just add the flag `--test=TestCaseName`",
                    "+Just run:",
                    "+> `yarn start:browser`"
                ]
            },
            "apps/browser/next-env.d.ts": {
                "before": [
                    "@@ -0,0 +1,5 @@",
                    "+/// <reference types=\"next\" />",
                    "+/// <reference types=\"next/image-types/global\" />",
                    "+",
                    "+// NOTE: This file should not be edited"
                ],
                "after": [
                    "+/// <reference types=\"next\" />",
                    "+/// <reference types=\"next/image-types/global\" />",
                    "+",
                    "+// NOTE: This file should not be edited",
                    "+// see https://nextjs.org/docs/basic-features/typescript for more information."
                ]
            },
            "apps/browser/next.config.js": {
                "before": [
                    "@@ -0,0 +1,6 @@",
                    "+module.exports = {",
                    "+  reactStrictMode: true,",
                    "+  eslint: {",
                    "+    ignoreDuringBuilds: true,"
                ],
                "after": [
                    "+  reactStrictMode: true,",
                    "+  eslint: {",
                    "+    ignoreDuringBuilds: true,",
                    "+  },",
                    "+};"
                ]
            },
            "apps/browser/package.json": {
                "before": [
                    "@@ -15,41 +15,31 @@",
                    "     \"file-saver\": \"^2.0.5\",",
                    "     \"gpt-tokenizer\": \"~2.1.1\",",
                    "     \"jszip\": \"^3.10.0\",",
                    "+    \"next\": \"14.0.1\","
                ],
                "after": [
                    "+    \"prebuild\": \"node scripts/scripts.template.js\",",
                    "+    \"lint\": \"prettier . --write\",",
                    "+    \"start\": \"next start\"",
                    "   }",
                    " }"
                ]
            },
            "apps/browser/pages/_app.tsx": {
                "before": [
                    "@@ -0,0 +1,23 @@",
                    "+import React, { useEffect } from \"react\";",
                    "+import type { AppProps } from \"next/app\";",
                    "+import { Exo } from \"next/font/google\"",
                    "+"
                ],
                "after": [
                    "+    <div className={clsx(exo.className, \"h-full\")}>",
                    "+      <Component {...pageProps} />",
                    "+    </div>",
                    "+  )",
                    "+}"
                ]
            },
            "apps/browser/pages/api/process-web-page.ts": {
                "before": [
                    "@@ -0,0 +1,14 @@",
                    "+import type { NextApiRequest, NextApiResponse } from \"next\";",
                    "+import { processWebpage } from \"@evo-ninja/agents\";",
                    "+",
                    "+type ResponseData = {"
                ],
                "after": [
                    "+  res: NextApiResponse<ResponseData>",
                    "+) {",
                    "+  const result = await processWebpage(req.query.url as string);",
                    "+  res.status(200).json({ text: result });",
                    "+}"
                ]
            },
            "apps/browser/pages/api/search.ts": {
                "before": [
                    "@@ -0,0 +1,19 @@",
                    "+import type { NextApiRequest, NextApiResponse } from \"next\";",
                    "+import { searchOnGoogle } from \"@evo-ninja/agents\";",
                    "+",
                    "+type ResponseData = {"
                ],
                "after": [
                    "+  res: NextApiResponse<ResponseData>",
                    "+) {",
                    "+  const results = await searchOnGoogle(req.query.query as string, req.query.apiKey as string);",
                    "+  res.status(200).json({ googleResults: results });",
                    "+}"
                ]
            },
            "apps/browser/pages/dojo.tsx": {
                "before": [
                    "@@ -0,0 +1,275 @@",
                    "+import React, { useState, useEffect } from \"react\";",
                    "+",
                    "+import { InMemoryFile } from \"@nerfzael/memory-fs\";",
                    "+import cl100k_base from \"gpt-tokenizer/esm/encoding/cl100k_base\";"
                ],
                "after": [
                    "+    </div>",
                    "+  );",
                    "+}",
                    "+",
                    "+export default Dojo;"
                ]
            },
            "apps/browser/pages/index.tsx": {
                "before": [
                    "@@ -0,0 +1,49 @@",
                    "+import React from \"react\";",
                    "+import { useRouter } from \"next/router\";",
                    "+",
                    "+function Landing() {"
                ],
                "after": [
                    "+    </div>",
                    "+  );",
                    "+}",
                    "+",
                    "+export default Landing;"
                ]
            },
            "apps/browser/postcss.config.js": {
                "before": [
                    "@@ -0,0 +1,6 @@",
                    "+module.exports = {",
                    "+  plugins: {",
                    "+    tailwindcss: {},",
                    "+    autoprefixer: {},"
                ],
                "after": [
                    "+  plugins: {",
                    "+    tailwindcss: {},",
                    "+    autoprefixer: {},",
                    "+  },",
                    "+}"
                ]
            },
            "apps/browser/scripts/scripts.template.js": {
                "before": [
                    "@@ -0,0 +1,72 @@",
                    "+const Handlebars = require(\"handlebars\");",
                    "+const fs = require(\"fs\");",
                    "+const path = require(\"path\");",
                    "+"
                ],
                "after": [
                    "+",
                    "+const template = Handlebars.compile(templateFile);",
                    "+",
                    "+const scriptsFile = template({ scripts });",
                    "+fs.writeFileSync(\"./src/scripts.ts\", scriptsFile);"
                ]
            },
            "apps/browser/src/App.css": {
                "before": [
                    "@@ -1,3 +0,0 @@",
                    "-#root {",
                    "-  @apply h-full;",
                    "-}"
                ],
                "after": [
                    "@@ -1,3 +0,0 @@",
                    "-#root {",
                    "-  @apply h-full;",
                    "-}"
                ]
            },
            "apps/browser/src/App.tsx": {
                "before": [
                    "@@ -1,20 +0,0 @@",
                    "-import React from 'react';",
                    "-import { HashRouter as Router, Route, Routes } from \"react-router-dom\";",
                    "-",
                    "-import './App.css';"
                ],
                "after": [
                    "-    </Router>",
                    "-  );",
                    "-}",
                    "-",
                    "-export default App;"
                ]
            },
            "apps/browser/src/components/Chat/Chat.css": {
                "before": [
                    "@@ -1,154 +0,0 @@",
                    "-.Chat {",
                    "-  @apply flex h-full w-full flex-col border border-neutral-700 bg-neutral-950 text-neutral-50;",
                    "-}",
                    "-"
                ],
                "after": [
                    "-  position: absolute; /* Position the icon absolutely within the PopupContent */",
                    "-  top: 12px; /* Position from the top */",
                    "-  right: 12px; /* Position from the right */",
                    "-}",
                    "-"
                ]
            },
            "apps/browser/src/components/Chat/Chat.tsx": {
                "before": [
                    "@@ -7,8 +7,8 @@ import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';",
                    " import { faMarkdown } from '@fortawesome/free-brands-svg-icons';",
                    " import { faThumbsUp, faThumbsDown, faChevronDown, faArrowUpRightFromSquare } from '@fortawesome/free-solid-svg-icons';",
                    " ",
                    "-import \"./Chat.css\";"
                ],
                "after": [
                    "-            <div className=\"LinkIcon\">",
                    "+            <div className=\"absolute top-3 right-3\">",
                    "               <FontAwesomeIcon icon={faArrowUpRightFromSquare} />",
                    "             </div>",
                    "           </div>"
                ]
            },
            "apps/browser/src/components/DojoConfig/DojoConfig.css": {
                "before": [
                    "@@ -1,19 +0,0 @@",
                    "-.DojoConfig {",
                    "-  @apply absolute inset-0 z-50 bg-neutral-900/80;",
                    "-}",
                    "-"
                ],
                "after": [
                    "-}",
                    "-",
                    "-.DojoConfig__Select {",
                    "-  @apply rounded bg-neutral-950 p-2.5 text-neutral-50;",
                    "-}"
                ]
            },
            "apps/browser/src/components/DojoConfig/DojoConfig.tsx": {
                "before": [
                    "@@ -1,13 +1,12 @@",
                    " import React, { useState } from \"react\";",
                    " ",
                    "-import \"./DojoConfig.css\";",
                    " import { defaultModel, supportedModels } from \"../../supportedModels\";"
                ],
                "after": [
                    "+          className=\"cursor-pointer rounded-xl border-none bg-orange-600 p-2.5 text-white transition-all hover:bg-orange-700\"",
                    "+          onClick={() => onConfigSaved(apiKey, model, serpApiKey)}",
                    "         >",
                    "           Save",
                    "         </button>"
                ]
            },
            "apps/browser/src/components/DojoError/DojoError.css": {
                "before": [
                    "@@ -1,11 +0,0 @@",
                    "-.DojoError {",
                    "-  @apply flex h-full flex-col border border-neutral-700 bg-neutral-900 text-neutral-50;",
                    "-}",
                    "-"
                ],
                "after": [
                    "-}",
                    "-",
                    "-.Message {",
                    "-  @apply my-4 rounded bg-orange-600 px-4 py-2.5 text-neutral-50;",
                    "-}"
                ]
            },
            "apps/browser/src/components/DojoError/DojoError.tsx": {
                "before": [
                    "@@ -1,7 +1,5 @@",
                    " import React from \"react\";",
                    " ",
                    "-import \"./DojoError.css\";",
                    "-"
                ],
                "after": [
                    "-          <div className={`Message`}>{JSON.stringify(error, null, 2)}</div>",
                    "+          <div className=\"my-4 rounded bg-orange-600 px-4 py-2.5 text-neutral-50\">{JSON.stringify(error, null, 2)}</div>",
                    "         </div>",
                    "       </div>",
                    "     </div>"
                ]
            },
            "apps/browser/src/components/File/File.css": {
                "before": [
                    "@@ -1,7 +0,0 @@",
                    "-.File__Modal {",
                    "-  @apply fixed left-1/2 top-1/2 box-border inline-block h-3/4 w-3/4 -translate-x-1/2 -translate-y-1/2 overflow-y-scroll break-words break-all border-2 border-neutral-700 bg-neutral-900 p-8 text-neutral-100 outline-none;",
                    "-}",
                    "-"
                ],
                "after": [
                    "-}",
                    "-",
                    "-.File__Btn {",
                    "-  @apply inline-block h-12 w-24 cursor-pointer rounded-xl border-none bg-orange-600 px-6 py-2.5 text-center text-neutral-900 shadow-md outline-none transition-all hover:bg-orange-700;",
                    "-}"
                ]
            },
            "apps/browser/src/components/File/File.tsx": {
                "before": [
                    "@@ -1,13 +1,12 @@",
                    " import React, { useState } from \"react\";",
                    " import Modal from \"react-modal\";",
                    "-import \"./File.css\";",
                    " "
                ],
                "after": [
                    "+          onClick={handleClose}",
                    "+        >",
                    "           Close",
                    "         </button>",
                    "         <pre>{contentString}</pre>"
                ]
            },
            "apps/browser/src/components/MenuIcon.tsx": {
                "before": [
                    "@@ -4,13 +4,13 @@ function MenuIcon() {",
                    "       xmlns=\"http://www.w3.org/2000/svg\"",
                    "       fill=\"none\"",
                    "       viewBox=\"0 0 24 24\"",
                    "-      stroke-width=\"1.5\""
                ],
                "after": [
                    "+        strokeLinecap=\"round\"",
                    "+        strokeLinejoin=\"round\"",
                    "         d=\"M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5\"",
                    "       />",
                    "     </svg>"
                ]
            },
            "apps/browser/src/components/Sidebar/Sidebar.css": {
                "before": [
                    "@@ -1,71 +0,0 @@",
                    "-/* TODO - remove specific H3 rule and apply per-element */",
                    "-h3 {",
                    "-  @apply text-lg font-semibold;",
                    "-}"
                ],
                "after": [
                    "-}",
                    "-",
                    "-.BuiltWithLove {",
                    "-  @apply text-neutral-50;",
                    "-}"
                ]
            },
            "apps/browser/src/components/Sidebar/Sidebar.tsx": {
                "before": [
                    "@@ -1,128 +1,121 @@",
                    "-import React, { useEffect } from \"react\";",
                    "+import React from \"react\";",
                    " import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";",
                    " import {"
                ],
                "after": [
                    "+        </div>",
                    "+      </footer>",
                    "     </div>",
                    "   );",
                    " };"
                ]
            },
            "apps/browser/src/components/Upload.tsx": {
                "before": [
                    "@@ -3,8 +3,8 @@ import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';",
                    " import { faUpload } from '@fortawesome/free-solid-svg-icons';",
                    " import { useDropzone } from \"react-dropzone\";",
                    " import { readFile } from '../sys/file';",
                    "-import '../App.css';"
                ],
                "after": [
                    "-            className=\"UploadButton\" ",
                    "+            className=\"my-4 inline-block h-9 cursor-pointer rounded-xl border-none bg-orange-600 px-6 py-2.5 text-center text-neutral-900 shadow-md outline-none transition-all hover:bg-orange-700\" ",
                    "             title=\"Upload files\" ",
                    "             onClick={open}>",
                    "             <FontAwesomeIcon icon={faUpload} /> Upload"
                ]
            },
            "apps/browser/src/index.css": {
                "before": [
                    "@@ -1,15 +0,0 @@",
                    "-@tailwind base;",
                    "-@tailwind components;",
                    "-@tailwind utilities;",
                    "-"
                ],
                "after": [
                    "-}",
                    "-",
                    "-code {",
                    "-  @apply font-mono;",
                    "-}"
                ]
            },
            "apps/browser/src/index.tsx": {
                "before": [
                    "@@ -1,14 +0,0 @@",
                    "-import React from 'react';",
                    "-import ReactDOM from 'react-dom/client';",
                    "-import './index.css';",
                    "-window.Buffer = window.Buffer || require(\"buffer\").Buffer;"
                ],
                "after": [
                    "-root.render(",
                    "-  <React.StrictMode>",
                    "-    <App />",
                    "-  </React.StrictMode>",
                    "-);"
                ]
            },
            "apps/browser/src/pages/Dojo.css": {
                "before": [
                    "@@ -1,56 +0,0 @@",
                    "-.Dojo {",
                    "-  @apply flex h-full animate-landing-bg bg-neutral-800 bg-landing-bg bg-repeat text-center text-neutral-400;",
                    "-}",
                    "-"
                ],
                "after": [
                    "-}",
                    "-",
                    "-.inner-dropzone {",
                    "-  @apply p-5;",
                    "-}"
                ]
            },
            "apps/browser/src/pages/Dojo.tsx": {
                "before": [
                    "@@ -1,246 +0,0 @@",
                    "-import { useState, useEffect } from 'react';",
                    "-",
                    "-import * as EvoCore from \"@evo-ninja/agent-utils\";",
                    "-import { InMemoryFile } from '@nerfzael/memory-fs';"
                ],
                "after": [
                    "-    </div>",
                    "-  );",
                    "-}",
                    "-",
                    "-export default Dojo;"
                ]
            },
            "apps/browser/src/pages/Landing.css": {
                "before": [
                    "@@ -1,31 +0,0 @@",
                    "-.Landing {",
                    "-  @apply bg-neutral-900/70 text-center text-white;",
                    "-}",
                    "-"
                ],
                "after": [
                    "-}",
                    "-",
                    "-.Landing-background {",
                    "-  @apply animate-landing-bg bg-landing-bg bg-repeat text-center text-neutral-400;",
                    "-}"
                ]
            },
            "apps/browser/src/pages/Landing.tsx": {
                "before": [
                    "@@ -1,36 +0,0 @@",
                    "-import React from 'react';",
                    "-import { useNavigate } from \"react-router-dom\";",
                    "-",
                    "-import './Landing.css';"
                ],
                "after": [
                    "-    </div>",
                    "-  );",
                    "-}",
                    "-",
                    "-export default Landing;"
                ]
            },
            "apps/browser/src/react-app-env.d.ts": {
                "before": [
                    "@@ -1 +0,0 @@",
                    "-/// <reference types=\"react-scripts\" />"
                ],
                "after": [
                    "@@ -1 +0,0 @@",
                    "-/// <reference types=\"react-scripts\" />"
                ]
            },
            "apps/browser/src/scripts.ts": {
                "before": [
                    "@@ -1,47 +0,0 @@",
                    "-export const onGoalAchievedScript = {",
                    "-  name: \"agent.onGoalAchieved\",",
                    "-  definition: `{",
                    "-  \"name\":\"agent.onGoalAchieved\","
                ],
                "after": [
                    "-  'speak',",
                    "-  { message: message }",
                    "-).value",
                    "-`",
                    "-};"
                ]
            },
            "apps/browser/src/sys/file/readFile.ts": {
                "before": [
                    "@@ -1,13 +1,12 @@",
                    " import { InMemoryFile } from \"@nerfzael/memory-fs\";",
                    " ",
                    " export const readFile = (file: File): Promise<InMemoryFile> => {",
                    "-  return new Promise<InMemoryFile>((resolve, reject) => {"
                ],
                "after": [
                    "-        path: (file as any)[\"path\"],",
                    "+        path: (file as unknown as { path: string }).path,",
                    "         content: text,",
                    "       } as InMemoryFile);",
                    "     };"
                ]
            },
            "apps/browser/src/sys/logger/MarkdownLogger.ts": {
                "before": [
                    "@@ -1,4 +1,5 @@",
                    "-import { ILogger, ChatMessage } from \"@evo-ninja/agent-utils\";",
                    "+import { ILogger } from \"@evo-ninja/agent-utils\";",
                    "+import { ChatMessage } from \"@evo-ninja/agents\";",
                    " "
                ],
                "after": [
                    "+import { ILogger } from \"@evo-ninja/agent-utils\";",
                    "+import { ChatMessage } from \"@evo-ninja/agents\";",
                    " ",
                    " export interface MarkdownLoggerConfig {",
                    "   onLog(markdown: string, color?: string): void;"
                ]
            },
            "apps/browser/src/updateWorkspaceFiles.ts": {
                "before": [
                    "@@ -1,14 +1,14 @@",
                    " import { Workspace } from \"@evo-ninja/agent-utils\";",
                    " import { InMemoryFile } from \"@nerfzael/memory-fs\";",
                    " ",
                    "-export function updateWorkspaceFiles(workspace: Workspace, files: InMemoryFile[], setFiles: (files: InMemoryFile[]) => void) {"
                ],
                "after": [
                    "+  // Compare workspace files to files",
                    "+  // If different, update files",
                    "   let isDifferent = false;",
                    "   if (items.length !== files.length) {",
                    "     isDifferent = true;"
                ]
            },
            "apps/browser/styles/globals.css": {
                "before": [
                    "@@ -0,0 +1,17 @@",
                    "+@tailwind base;",
                    "+@tailwind components;",
                    "+@tailwind utilities;",
                    "+"
                ],
                "after": [
                    "+}",
                    "+",
                    "+#root {",
                    "+  @apply h-full;",
                    "+}"
                ]
            },
            "apps/browser/tailwind.config.js": {
                "before": [
                    "@@ -4,6 +4,7 @@ const defaultTheme = require('tailwindcss/defaultTheme')",
                    " module.exports = {",
                    "   content: [",
                    "     \"./src/**/*.{js,jsx,ts,tsx}\",",
                    "+    \"./pages/**/*.{js,jsx,ts,tsx}\","
                ],
                "after": [
                    "+      colors: {",
                    "+        'opacity-black': 'hsla(0, 0%, 9%, 0.8)'",
                    "       }",
                    "     },",
                    "   },"
                ]
            },
            "apps/browser/tsconfig.json": {
                "before": [
                    "@@ -18,9 +18,14 @@",
                    "     \"resolveJsonModule\": true,",
                    "     \"isolatedModules\": true,",
                    "     \"noEmit\": true,",
                    "-    \"jsx\": \"react-jsx\""
                ],
                "after": [
                    "+    \"node_modules\"",
                    "   ]",
                    "-}",
                    "\\ No newline at end of file",
                    "+}"
                ]
            },
            "apps/cli/src/__tests__/runners/script-js.ts": {
                "before": [
                    "@@ -44,7 +44,6 @@ export async function runScriptJs(",
                    " ",
                    "   const logger = new Logger([new ConsoleLogger()], {",
                    "     promptUser: () => Promise.resolve(\"N/A\"),",
                    "-    logUserPrompt: () => {}"
                ],
                "after": [
                    "     promptUser: () => Promise.resolve(\"N/A\"),",
                    "-    logUserPrompt: () => {}",
                    "   });",
                    "   const client = new WrapClient(workspace, logger);",
                    " "
                ]
            },
            "apps/cli/src/agent-protocol/AgentProtocolWorkspace.ts": {
                "before": [
                    "@@ -13,7 +13,8 @@ export class AgentProtocolWorkspace implements Workspace {",
                    "   }",
                    " ",
                    "   get artifacts(): Artifact[] {",
                    "-    return Array.from(this._artifactLog.values());"
                ],
                "after": [
                    "+    return Array.from(this._artifactLog.values())",
                    "+      .filter((x) => !x.relative_path?.startsWith(\".\"));",
                    "   }",
                    " ",
                    "   cleanArtifacts(): void {"
                ]
            },
            "apps/cli/src/api.ts": {
                "before": [
                    "@@ -1,5 +1,6 @@",
                    " import { AgentProtocolWorkspace } from \"./agent-protocol\";",
                    " import { createApp } from \"./app\";",
                    "+import { AgentOutput } from \"@evo-ninja/agents\";",
                    " "
                ],
                "after": [
                    "+        : \"No Message\";",
                    "+",
                    "     return {",
                    "       is_last: response.done,",
                    "       output: JSON.stringify(outputMessage),"
                ]
            },
            "apps/cli/src/app.ts": {
                "before": [
                    "@@ -1,4 +1,13 @@",
                    "-import { AgentContext, ChameleonAgent, Chat, ChatLog, ChatLogType, ChatMessage, DebugLlmApi, DebugLog, GoalRunArgs, LlmApi, LlmModel, OpenAI, RunnableAgent } from \"@evo-ninja/agents\";",
                    "+import {",
                    "+  AgentContext,",
                    "+  Evo,"
                ],
                "after": [
                    "-  const evo = new ChameleonAgent(",
                    "+  const evo = new Evo(",
                    "     new AgentContext(",
                    "       llm,",
                    "       chat,"
                ]
            },
            "apps/cli/src/cli.ts": {
                "before": [
                    "@@ -1,5 +1,6 @@",
                    " import { createApp } from \"./app\";",
                    " import { Logger, Timeout } from \"@evo-ninja/agent-utils\";",
                    "+import { AgentOutput } from \"@evo-ninja/agents\";",
                    " import { program } from \"commander\";"
                ],
                "after": [
                    "+  })",
                    "+  .catch((err) => {",
                    "+    console.error(err);",
                    "+    process.abort();",
                    "+  });"
                ]
            },
            "package.json": {
                "before": [
                    "@@ -4,7 +4,7 @@",
                    "   \"workspaces\": {",
                    "     \"packages\": [",
                    "       \"packages/*\",",
                    "-      \"apps/cli\""
                ],
                "after": [
                    "-    \"prettier\": \"2.2.1\",",
                    "+    \"prettier\": \"3.0.3\",",
                    "     \"rimraf\": \"~5.0.1\",",
                    "     \"turbo\": \"1.10.16\"",
                    "   }"
                ]
            },
            "packages/agent-utils/src/scripts/wrap-client/WrapClient.ts": {
                "before": [
                    "@@ -1,20 +1,16 @@",
                    "+import { jsEnginePackage } from \"./js-engine-wrap/wrap\";",
                    " import { Env, Logger, Workspace } from \"../../\";",
                    " ",
                    " import {"
                ],
                "after": [
                    "         \"head\": async (args: any) => {",
                    "-          logger.notice(`AXIOS.HEAD = ${args.url}`);",
                    "           return await axios.head(args.url, args.config);",
                    "         },",
                    "       })))"
                ]
            },
            "packages/agent-utils/src/sys/logger/FileLogger.ts": {
                "before": [
                    "@@ -20,22 +20,22 @@ export class FileLogger implements ILogger {",
                    "   }",
                    " ",
                    "   info(info: string): void {",
                    "-    this._workspace.appendFileSync(this._filePath, info + \"\\n\\n\");"
                ],
                "after": [
                    "   error(msg: string): void {",
                    "-    this.info(msg + \"\\n  \\n\");",
                    "+    this.info(msg + \"  \\n\");",
                    "   }",
                    " }"
                ]
            },
            "packages/agent-utils/src/sys/logger/Logger.ts": {
                "before": [
                    "@@ -10,7 +10,6 @@ export interface ILogger {",
                    " ",
                    " export interface LoggerCallbacks {",
                    "   promptUser: (query: string) => Promise<string>;",
                    "-  logUserPrompt: (response: string) => void;"
                ],
                "after": [
                    "-    return response;",
                    "+    return this._callbacks.promptUser(query);",
                    "   }",
                    " ",
                    "   async logHeader(): Promise<void> {"
                ]
            },
            "packages/agents/src/__tests__/llm.spec.ts": {
                "before": [
                    "@@ -52,9 +52,6 @@ describe('LLM Test Suite', () => {",
                    "       consoleLogger",
                    "     ], {",
                    "       promptUser: async () => \"\",",
                    "-      logUserPrompt: (response: string) => {"
                ],
                "after": [
                    "-        consoleLogger.info(`#User:\\n${response}`);",
                    "-      }",
                    "     })",
                    "     const env = new Env(",
                    "       process.env as Record<string, string>"
                ]
            },
            "packages/agents/src/__tests__/rag.spec.ts": {
                "before": [
                    "@@ -37,9 +37,6 @@ describe('LLM Test Suite', () => {",
                    "       consoleLogger",
                    "     ], {",
                    "       promptUser: async () => \"\",",
                    "-      logUserPrompt: (response: string) => {"
                ],
                "after": [
                    "-        consoleLogger.info(`#User:\\n${response}`);",
                    "-      }",
                    "     })",
                    "     const env = new Env(",
                    "       process.env as Record<string, string>"
                ]
            },
            "packages/agents/src/agent-core/agent/RunnableAgent.ts": {
                "before": [
                    "@@ -1,10 +1,8 @@",
                    " import { Result } from \"@polywrap/result\";",
                    " import { AgentOutput } from \"./AgentOutput\";",
                    "-import { ChatMessage } from \"../llm\";",
                    " "
                ],
                "after": [
                    "   run(args: TRunArgs): AsyncGenerator<AgentOutput, RunResult, string | undefined>;",
                    "-  runWithChat(messages: ChatMessage[]): AsyncGenerator<AgentOutput, RunResult, string | undefined>;",
                    " }",
                    " ",
                    " export type RunResult = Result<AgentOutput, string>; "
                ]
            },
            "packages/agents/src/agents/Chameleon/index.ts": {
                "before": [
                    "@@ -1,190 +0,0 @@",
                    "-import {",
                    "-  AgentFunction,",
                    "-  ChatLogs,",
                    "-  ChatMessage,"
                ],
                "after": [
                    "-}\\nDirectories: ${",
                    "-files.filter((x) => x.type === \"directory\").map((x) => x.name).join(\", \")",
                    "-}` ",
                    "-  }",
                    "-};"
                ]
            },
            "packages/agents/src/agents/Chameleon/prompts.ts": {
                "before": [
                    "@@ -1,21 +0,0 @@",
                    "-import { ChatMessage } from \"@/agent-core\";",
                    "-import { AgentFunctionBase } from \"../../functions/utils\";",
                    "-import { GoalRunArgs } from \"../../agents/utils\";",
                    "-import { AgentPrompts } from \"../../agents/utils\";"
                ],
                "after": [
                    "-export const prompts = {",
                    "-  generalAgentPersona: \"You are an expert assistant capable of accomplishing a multitude of tasks using functions that use external tools (like internet, file system, etc.).\",",
                    "-  exhaustAllApproaches: \"If you can not achieve a goal, first try to exhaust different approaches before giving up.\",",
                    "-  variablesExplainer: \"Function results will be stored in variables if they are very large. Variables are declared using the syntax \\${variable-name}. Variables are created as needed, DO NOT use variable names that are not previously stated. When using variables within function arguments, YOU MUST use the \\${variable-name} syntax. Relevant chunks of variable data will be shown to you as needed.\"",
                    "-};"
                ]
            },
            "packages/agents/src/agents/CsvAnalyst/DataAnalyst.spec.ts": {
                "before": [
                    "@@ -42,9 +42,6 @@ describe(\"Data Analyst Agent Test Suite\", () => {",
                    "       promptUser: () => {",
                    "         throw Error(\"promptUser not supported.\");",
                    "       },",
                    "-      logUserPrompt: () => {"
                ],
                "after": [
                    "-        throw Error(\"logUserPrompt not supported.\");",
                    "-      },",
                    "     });",
                    " ",
                    "     const llm: LlmApi = new OpenAI("
                ]
            },
            "packages/agents/src/agents/Developer/DeveloperAgent.spec.ts": {
                "before": [
                    "@@ -40,9 +40,6 @@ describe('Dev Agent Test Suite', () => {",
                    "       promptUser: () => {",
                    "         throw Error(\"promptUser not supported.\");",
                    "       },",
                    "-      logUserPrompt: () => {"
                ],
                "after": [
                    "-        throw Error(\"logUserPrompt not supported.\");",
                    "-      }",
                    "     });",
                    " ",
                    "     const llm: LlmApi = new OpenAI("
                ]
            },
            "packages/agents/src/agents/Evo/Evo.spec.ts": {
                "before": [
                    "@@ -1,154 +0,0 @@",
                    "-import {",
                    "-  OpenAI,",
                    "-  Chat,",
                    "-  LlmApi,"
                ],
                "after": [
                    "-    expect(response.value.ok).toBe(true);",
                    "-    const sourceCode = agent.workspace.readFileSync(\"tic_tac_toe.py\");",
                    "-    expect(sourceCode).toBeTruthy();",
                    "-  });",
                    "-});"
                ]
            },
            "packages/agents/src/agents/Evo/Evo.ts": {
                "before": [
                    "@@ -1,64 +0,0 @@",
                    "-import {",
                    "-  AgentOutput,",
                    "-  RunResult",
                    "-} from \"@/agent-core\";"
                ],
                "after": [
                    "-    });",
                    "-",
                    "-    return yield* super.run(args);",
                    "-  }",
                    "-}"
                ]
            },
            "packages/agents/src/agents/Evo/findBestAgent.ts": {
                "before": [
                    "@@ -62,7 +62,7 @@ export const findBestAgent = async (",
                    "       limit: 1,",
                    "     }));",
                    " ",
                    "-  console.log(\"Selected agents: \", agents.map(x => x.agent.config.prompts.name));"
                ],
                "after": [
                    "-  console.log(\"Selected agents: \", agents.map(x => x.agent.config.prompts.name));",
                    "+  context.logger.info(\"### Selected agent:\\n-> \" + agents.map(x => x.agent.config.prompts.name)[0]);",
                    " ",
                    "   const agentWithPrompt = agents[0];",
                    " "
                ]
            },
            "packages/agents/src/agents/Evo/index.ts": {
                "before": [
                    "@@ -1 +1,206 @@",
                    "-export * from \"./Evo\";",
                    "+import {",
                    "+  AgentFunction,",
                    "+  ChatLogs,"
                ],
                "after": [
                    "+}\\nDirectories: ${",
                    "+files.filter((x) => x.type === \"directory\").map((x) => x.name).join(\", \")",
                    "+}` ",
                    "+  }",
                    "+};"
                ]
            },
            "packages/agents/src/agents/Evo/prompts.ts": {
                "before": [
                    "@@ -1,44 +1,19 @@",
                    " import { ChatMessage } from \"@/agent-core\";",
                    "-import { AgentFunctionBase } from \"../../functions/utils\";",
                    " import { GoalRunArgs } from \"../../agents/utils\";",
                    " import { AgentPrompts } from \"../../agents/utils\";"
                ],
                "after": [
                    "+  exhaustAllApproaches:",
                    "+    \"If you can not achieve a goal, first try to exhaust different approaches before giving up.\",",
                    "+  variablesExplainer:",
                    "+    \"Function results will be stored in variables if they are very large. Variables are declared using the syntax ${variable-name}. Variables are created as needed, DO NOT use variable names that are not previously stated. When using variables within function arguments, YOU MUST use the ${variable-name} syntax. Relevant chunks of variable data will be shown to you as needed.\",",
                    "+};"
                ]
            },
            "packages/agents/src/agents/Planner/PlannerAgent.spec.ts": {
                "before": [
                    "@@ -40,9 +40,6 @@ describe('Planner Agent Test Suite', () => {",
                    "       promptUser: () => {",
                    "         throw Error(\"promptUser not supported.\");",
                    "       },",
                    "-      logUserPrompt: () => {"
                ],
                "after": [
                    "-        throw Error(\"logUserPrompt not supported.\");",
                    "-      }",
                    "     });",
                    " ",
                    "     const llm: LlmApi = new OpenAI("
                ]
            },
            "packages/agents/src/agents/Researcher/prompts.ts": {
                "before": [
                    "@@ -3,7 +3,7 @@ import { GoalRunArgs } from \"../utils\";",
                    " ",
                    " export const prompts = {",
                    "   name: \"Researcher\",",
                    "-  expertise: `Searching the internet, comprehending details, and finding information or.`,"
                ],
                "after": [
                    "-  expertise: `Searching the internet, comprehending details, and finding information or.`,",
                    "+  expertise: `Searching the internet, comprehending details, and finding information.`,",
                    "   initialMessages: ({ goal }: GoalRunArgs): ChatMessage[] => [",
                    "     {",
                    "       role: \"user\","
                ]
            },
            "packages/agents/src/agents/Scripter/Scripter.spec.ts": {
                "before": [
                    "@@ -38,9 +38,6 @@ describe('Dev Agent Test Suite', () => {",
                    "       promptUser: () => {",
                    "         throw Error(\"promptUser not supported.\");",
                    "       },",
                    "-      logUserPrompt: () => {"
                ],
                "after": [
                    "-        throw Error(\"logUserPrompt not supported.\");",
                    "-      }",
                    "     });",
                    " ",
                    "     const llm: LlmApi = new OpenAI("
                ]
            },
            "packages/agents/src/agents/Scripter/utils.ts": {
                "before": [
                    "@@ -1,11 +1,11 @@",
                    " import { trimText } from \"@/agent-core\";",
                    " ",
                    " export const FUNCTION_CALL_SUCCESS_CONTENT = (fnName: string, params: any, result: string) => ",
                    "-  `## Function Call:\\n` + "
                ],
                "after": [
                    "-  `## Result\\n` + ",
                    "+  `### Result\\n` + ",
                    "   `\\`\\`\\`\\n` + ",
                    "   `${result}\\n` +",
                    "   `\\`\\`\\``;"
                ]
            },
            "packages/agents/src/agents/index.ts": {
                "before": [
                    "@@ -1,5 +1,4 @@",
                    " export * from \"./Evo\";",
                    "-export * from \"./Chameleon\";",
                    " export * from \"./ScriptWriter\"",
                    " export * from \"./Developer\""
                ],
                "after": [
                    " export * from \"./Evo\";",
                    "-export * from \"./Chameleon\";",
                    " export * from \"./ScriptWriter\"",
                    " export * from \"./Developer\"",
                    " export * from \"./Researcher\""
                ]
            },
            "packages/agents/src/agents/utils/Agent.ts": {
                "before": [
                    "@@ -38,14 +38,12 @@ export class Agent<TRunArgs = GoalRunArgs> implements RunnableAgent<TRunArgs> {",
                    "   }",
                    " ",
                    "   public async* run(",
                    "-    args: TRunArgs,"
                ],
                "after": [
                    "     const { chat } = this.context;",
                    "+",
                    "     if (this.config.timeout) {",
                    "       setTimeout(",
                    "         this.config.timeout.callback,"
                ]
            },
            "packages/agents/src/functions/AnalyzeData.ts": {
                "before": [
                    "@@ -1,4 +1,13 @@",
                    "-import { AgentFunctionResult, ChatMessageBuilder, LlmApi, Tokenizer, CsvChunker, Rag, AgentContext, ArrayRecombiner } from \"@/agent-core\";",
                    "+import {",
                    "+  AgentFunctionResult,",
                    "+  ChatMessageBuilder,"
                ],
                "after": [
                    "+  ArrayRecombiner",
                    "+} from \"@/agent-core\";",
                    " import { LlmAgentFunctionBase } from \"./utils\";",
                    " import { Agent, Prompt } from \"../agents/utils\";",
                    " "
                ]
            },
            "packages/agents/src/functions/ReadAndAnalyzeCSVData.ts": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " import { AnalyzeDataFunction } from \"./AnalyzeData\";",
                    " import { AgentFunctionBase } from \"./utils\";",
                    " import { Agent } from \"../agents/utils\";",
                    "-import { AgentFunctionResult, ChatMessageBuilder } from \"@/agent-core\";"
                ],
                "after": [
                    "+          }",
                    "+        ],",
                    "         messages: [",
                    "           ChatMessageBuilder.functionCall(this.name, params),",
                    "           ChatMessageBuilder.functionCallResult(this.name, `\\${${variable}}`),"
                ]
            },
            "packages/agents/src/functions/WebSearch.ts": {
                "before": [
                    "@@ -2,6 +2,7 @@ import { AgentContext, AgentFunctionResult, AgentOutputType, AgentVariables, Arr",
                    " import { FUNCTION_CALL_FAILED, FUNCTION_CALL_SUCCESS_CONTENT } from \"../agents/Scripter/utils\";",
                    " import { Agent, Prompt } from \"../agents/utils\";",
                    " import { LlmAgentFunctionBase, processWebpage, searchOnGoogle } from \"./utils\";",
                    "+import axios from \"axios\""
                ],
                "after": [
                    "       } catch(e) {",
                    "-        params.context.logger.error(`Failed to process ${url}`)",
                    "         return {",
                    "           url,",
                    "           response: \"\""
                ]
            },
            "packages/agents/src/functions/WriteFile.ts": {
                "before": [
                    "@@ -9,7 +9,7 @@ interface WriteFileFuncParameters {",
                    " };",
                    " ",
                    " export class WriteFileFunction extends ScriptFunction<WriteFileFuncParameters> {",
                    "-  "
                ],
                "after": [
                    "     }",
                    "   }",
                    "-}",
                    "\\ No newline at end of file",
                    "+}"
                ]
            },
            "packages/agents/src/functions/__tests__/WebSearch.spec.ts": {
                "before": [
                    "@@ -28,9 +28,6 @@ describe(\"WebSearch function\", () => {",
                    "       promptUser: () => {",
                    "         throw Error(\"promptUser not supported.\");",
                    "       },",
                    "-      logUserPrompt: () => {"
                ],
                "after": [
                    "-        throw Error(\"logUserPrompt not supported.\");",
                    "-      },",
                    "     });",
                    " ",
                    "     const llm: LlmApi = new OpenAI("
                ]
            },
            "packages/agents/src/functions/utils/ScriptFunction.ts": {
                "before": [
                    "@@ -29,7 +29,7 @@ export abstract class ScriptFunction<TParams> extends AgentFunctionBase<TParams>",
                    "         {",
                    "           type: AgentOutputType.Success,",
                    "           title: `[${agent.config.prompts.name}] ${this.name}`,",
                    "-          content: `${params.query}`"
                ],
                "after": [
                    "+          title: `[${agent.config.prompts.name}] Error in ${this.name}`,",
                    "+          content: error",
                    "         }",
                    "       ],",
                    "       messages: ["
                ]
            },
            "packages/agents/src/index.ts": {
                "before": [
                    "@@ -1,4 +1,5 @@",
                    " export * from \"./agents\";",
                    " export * from \"./functions\";",
                    " export * from \"./agent-core\";",
                    "-export * from \"./agent-debug\";"
                ],
                "after": [
                    " export * from \"./agent-core\";",
                    "-export * from \"./agent-debug\";",
                    "\\ No newline at end of file",
                    "+export * from \"./agent-debug\";",
                    "+export * from \"@evo-ninja/agent-utils\";"
                ]
            },
            "scripts/agent.onGoalAchieved.js": {
                "before": [
                    "@@ -1,5 +1,5 @@",
                    " return __wrap_subinvoke(",
                    "   'plugin/agent',",
                    "   'onGoalAchieved',",
                    "-  { }"
                ],
                "after": [
                    "   'plugin/agent',",
                    "   'onGoalAchieved',",
                    "-  { }",
                    "+  { message }",
                    " ).value"
                ]
            },
            "scripts/agent.onGoalAchieved.json": {
                "before": [
                    "@@ -1,6 +1,6 @@",
                    " {",
                    "     \"name\":\"agent.onGoalAchieved\",",
                    "     \"description\":\"Informs the user that the goal has been achieved.\",",
                    "-    \"arguments\":\"None\","
                ],
                "after": [
                    "-    \"arguments\":\"None\",",
                    "+    \"arguments\":\"{ message: string }\",",
                    "     \"code\":\"./agent.onGoalAchieved.js\"",
                    " }",
                    "\\ No newline at end of file"
                ]
            },
            "scripts/agent.onGoalFailed.js": {
                "before": [
                    "@@ -1,5 +1,5 @@",
                    " return __wrap_subinvoke(",
                    "   'plugin/agent',",
                    "   'onGoalFailed',",
                    "-  { }"
                ],
                "after": [
                    "   'plugin/agent',",
                    "   'onGoalFailed',",
                    "-  { }",
                    "+  { message }",
                    " ).value"
                ]
            },
            "scripts/agent.onGoalFailed.json": {
                "before": [
                    "@@ -1,6 +1,6 @@",
                    " {",
                    "     \"name\":\"agent.onGoalFailed\",",
                    "     \"description\":\"Informs the user that the agent could not achieve the goal.\",",
                    "-    \"arguments\":\"None\","
                ],
                "after": [
                    "-    \"arguments\":\"None\",",
                    "+    \"arguments\":\"{ message: string }\",",
                    "     \"code\":\"./agent.onGoalFailed.js\"",
                    " }",
                    "\\ No newline at end of file"
                ]
            },
            "yarn.lock": {
                "before": [
                    "@@ -7,6 +7,11 @@",
                    "   resolved \"https://registry.yarnpkg.com/@aashutoshrathi/word-wrap/-/word-wrap-1.2.6.tgz#bd9154aec9983f77b3a034ecaa015c2e4201f6cf\"",
                    "   integrity sha512-1Yjs2SvM8TflER/OD3cOjhWWOZb58A2t7wpE2S9XfBYTiIl+XFhQG2bjy4Pu1I+EAlCNUzRDYDdFwFYUKvXcIA==",
                    " ",
                    "+\"@alloc/quick-lru@^5.2.0\":"
                ],
                "after": [
                    "+  integrity sha512-zw0VAJxgeZ6+++/su5AFoqBbZbrEakwu+X0M5HmcwUiBL7AzcuPKjj5we4xfQLp78LkEMpD0cOnUhmgOVy3KdQ==",
                    "+",
                    " yargs-parser@^20.2.2:",
                    "   version \"20.2.9\"",
                    "   resolved \"https://registry.yarnpkg.com/yargs-parser/-/yargs-parser-20.2.9.tgz#2eb7dc3b0289718fc295f362753845c41a0c94ee\""
                ]
            }
        }
    },
    {
        "instance_id": "AGiXT__AGiXT-1253",
        "title": "import chain AttributeError: 'NoneType' object has no attribute 'id'",
        "problem_statement": "import chain AttributeError: 'NoneType' object has no attribute 'id'. Description\n\nWhen importing chain error occurs:\r\n\r\nAttributeError: 'NoneType' object has no attribute 'id'\r\n\n\n### Operating System\n\n- [X] Linux\n- [ ] Windows\n- [ ] MacOS\n\n### Acknowledgements\n\n- [X] I am NOT trying to use localhost for providers running outside of the docker container.\n- [X] I am NOT trying to run AGiXT outside of docker, the only supported method to run it.\n- [X] Python 3.10.X is installed and the version in use on the host machine.\n- [X] The latest version of Docker is installed and running on the host machine.\n- [X] I am using the latest stable version of AGiXT.\n- [X] I have provided enough information for the maintainers to reproduce and diagnose the issue.\n- [X] I have searched the existing issues to make sure this bug has not been reported yet.",
        "base_commit": "739d1b5f468b9daa1698a2bc683a72d159a72a87",
        "repo": "repo/AGiXT-1253",
        "patch": {
            "agixt/Chain.py": {
                "before": [
                    "@@ -623,6 +623,7 @@ def import_chain(self, chain_name: str, steps: dict):",
                    "             if \"prompt_type\" not in step_data:",
                    "                 step_data[\"prompt_type\"] = \"prompt\"",
                    "             prompt_type = step_data[\"prompt_type\"].lower()",
                    "+            target_id = None"
                ],
                "after": [
                    " ",
                    "-            target_id = target.id",
                    "             argument_value = prompt[argument_key]",
                    "             prompt_arguments = prompt.copy()",
                    "             del prompt_arguments[argument_key]"
                ]
            }
        }
    },
    {
        "instance_id": "AGiXT__AGiXT-1030",
        "title": "TypeError: '>' not supported between instances of 'str' and 'int'",
        "problem_statement": "TypeError: '>' not supported between instances of 'str' and 'int'. Description\n\nTrying to use Websearch in any mode gives me this error. I've tried to correct the offending line to int(websearch_depth), but it didn't seem to have any effect. Here's the console output: \r\n```\r\nINFO:     172.18.0.1:57834 - \"POST /api/agent/Vicuna/prompt HTTP/1.1\" 500 Internal Server Error\r\nagixt-agixt-1      | ERROR:    Exception in ASGI application\r\nagixt-agixt-1      | Traceback (most recent call last):\r\nagixt-agixt-1      |   File \"/usr/local/lib/python3.10/site-packages/uvicorn/protocols/http/httptools_impl.py\", line 426, in run_asgi\r\nagixt-agixt-1      |     result = await app(  # type: ignore[func-returns-value]\r\nagixt-agixt-1      |   File \"/usr/local/lib/python3.10/site-packages/uvicorn/middleware/proxy_headers.py\", line 84, in __call__\r\nagixt-agixt-1      |     return await self.app(scope, receive, send)\r\nagixt-agixt-1      |   File \"/usr/local/lib/python3.10/site-packages/fastapi/applications.py\", line 292, in __call__\r\nagixt-agixt-1      |     await super().__call__(scope, receive, send)\r\nagixt-agixt-1      |   File \"/usr/local/lib/python3.10/site-packages/starlette/applications.py\", line 122, in __call__\r\nagixt-agixt-1      |     await self.middleware_stack(scope, receive, send)\r\nagixt-agixt-1      |   File \"/usr/local/lib/python3.10/site-packages/starlette/middleware/errors.py\", line 184, in __call__\r\nagixt-agixt-1      |     raise exc\r\nagixt-agixt-1      |   File \"/usr/local/lib/python3.10/site-packages/starlette/middleware/errors.py\", line 162, in __call__\r\nagixt-agixt-1      |     await self.app(scope, receive, _send)\r\nagixt-agixt-1      |   File \"/usr/local/lib/python3.10/site-packages/starlette/middleware/cors.py\", line 91, in __call__\r\nagixt-agixt-1      |     await self.simple_response(scope, receive, send, request_headers=headers)\r\nagixt-agixt-1      |   File \"/usr/local/lib/python3.10/site-packages/starlette/middleware/cors.py\", line 146, in simple_response\r\nagixt-agixt-1      |     await self.app(scope, receive, send)\r\nagixt-agixt-1      |   File \"/usr/local/lib/python3.10/site-packages/starlette/middleware/exceptions.py\", line 79, in __call__\r\nagixt-agixt-1      |     raise exc\r\nagixt-agixt-1      |   File \"/usr/local/lib/python3.10/site-packages/starlette/middleware/exceptions.py\", line 68, in __call__\r\nagixt-agixt-1      |     await self.app(scope, receive, sender)\r\nagixt-agixt-1      |   File \"/usr/local/lib/python3.10/site-packages/fastapi/middleware/asyncexitstack.py\", line 20, in __call__\r\nagixt-agixt-1      |     raise e\r\nagixt-agixt-1      |   File \"/usr/local/lib/python3.10/site-packages/fastapi/middleware/asyncexitstack.py\", line 17, in __call__\r\nagixt-agixt-1      |     await self.app(scope, receive, send)\r\nagixt-agixt-1      |   File \"/usr/local/lib/python3.10/site-packages/starlette/routing.py\", line 718, in __call__\r\nagixt-agixt-1      |     await route.handle(scope, receive, send)\r\nagixt-agixt-1      |   File \"/usr/local/lib/python3.10/site-packages/starlette/routing.py\", line 276, in handle\r\nagixt-agixt-1      |     await self.app(scope, receive, send)\r\nagixt-agixt-1      |   File \"/usr/local/lib/python3.10/site-packages/starlette/routing.py\", line 66, in app\r\nagixt-agixt-1      |     response = await func(request)\r\nagixt-agixt-1      |   File \"/usr/local/lib/python3.10/site-packages/fastapi/routing.py\", line 273, in app\r\nagixt-agixt-1      |     raw_response = await run_endpoint_function(\r\nagixt-agixt-1      |   File \"/usr/local/lib/python3.10/site-packages/fastapi/routing.py\", line 190, in run_endpoint_function\r\nagixt-agixt-1      |     return await dependant.call(**values)\r\nagixt-agixt-1      |   File \"/agixt/endpoints/Agent.py\", line 114, in prompt_agent\r\nagixt-agixt-1      |     response = await agent.run(\r\nagixt-agixt-1      |   File \"/agixt/Interactions.py\", line 421, in run\r\nagixt-agixt-1      |     await self.websearch.websearch_agent(\r\nagixt-agixt-1      |   File \"/agixt/Websearch.py\", line 258, in websearch_agent\r\nagixt-agixt-1      |     if websearch_depth > 0:\r\nagixt-agixt-1      | TypeError: '>' not supported between instances of 'str' and 'int'\r\nagixt-agixt-1      | INFO:     172.18.0.1:57844 - \"GET /api/conversation/Test?agent_name=Vicuna&limit=100&page=1 HTTP/1.1\" 200 OK\r\n```\r\n\n\n### Steps to Reproduce the Bug\n\n1. Pick any agent\r\n2. Pick any mode\r\n3. Enable Websearch\r\n4. Tell it to search for something\r\n5. Nothing happens on the UI side and the above error appears in the console.\n\n### Expected Behavior\n\nAfter enabling Websearch and telling the agent to search for something it calls the Websearch.py and it executes correctly allowing the agent to continue.\n\n### Operating System\n\n- [X] Linux\n- [ ] Microsoft Windows\n- [ ] Apple MacOS\n- [ ] Android\n- [ ] iOS\n- [ ] Other\n\n### Python Version\n\n- [ ] Python <= 3.9\n- [X] Python 3.10\n- [ ] Python 3.11\n\n### Environment Type - Connection\n\n- [X] Local - You run AGiXT in your home network\n- [ ] Remote - You access AGiXT through the internet\n\n### Runtime environment\n\n- [X] Using docker compose\n- [ ] Using local\n- [ ] Custom setup (please describe above!)\n\n### Acknowledgements\n\n- [X] I have searched the existing issues to make sure this bug has not been reported yet.\n- [X] I am using the latest version of AGiXT.\n- [X] I have provided enough information for the maintainers to reproduce and diagnose the issue.",
        "base_commit": "489d74d81edec9b7eef55c08e7a7e524d2d64546",
        "repo": "repo/AGiXT-1030",
        "patch": {
            "agixt/version": {
                "before": [
                    "@@ -1 +1 @@",
                    "-v1.4.7",
                    "\\ No newline at end of file",
                    "+v1.4.8",
                    "\\ No newline at end of file"
                ],
                "after": [
                    "@@ -1 +1 @@",
                    "-v1.4.7",
                    "\\ No newline at end of file",
                    "+v1.4.8",
                    "\\ No newline at end of file"
                ]
            }
        }
    },
    {
        "instance_id": "AGiXT__AGiXT-1026",
        "title": "Check for kwargs[\"USE_STREAMLABS_TTS\"].lower() doesn't work as bool object does not have lower",
        "problem_statement": "Check for kwargs[\"USE_STREAMLABS_TTS\"].lower() doesn't work as bool object does not have lower. Description\n\n```\r\nagixt-agixt-1      |   File \"/agixt/extensions/voice_chat.py\", line 17, in __init__\r\nagixt-agixt-1      |     if kwargs[\"USE_STREAMLABS_TTS\"].lower() == \"true\":\r\nagixt-agixt-1      | AttributeError: 'bool' object has no attribute 'lower'\r\n```\r\n\r\n\n\n### Steps to Reproduce the Bug\n\n1. Follow quick start instructions (clone, run shell script, it runs docker containers).\r\n2. Go to the OpenAI Agent to add an API key to the settings.\r\n3. Click save.\r\n4. In future error appears whenever trying to load settings page.\n\n### Expected Behavior\n\nAgent should save normally, error should not appear, perhaps there should be a way to reset this file to default?\n\n### Operating System\n\n- [ ] Linux\n- [ ] Microsoft Windows\n- [X] Apple MacOS\n- [ ] Android\n- [ ] iOS\n- [ ] Other\n\n### Python Version\n\n- [ ] Python <= 3.9\n- [ ] Python 3.10\n- [X] Python 3.11\n\n### Environment Type - Connection\n\n- [X] Local - You run AGiXT in your home network\n- [ ] Remote - You access AGiXT through the internet\n\n### Runtime environment\n\n- [X] Using docker compose\n- [ ] Using local\n- [ ] Custom setup (please describe above!)\n\n### Acknowledgements\n\n- [X] I have searched the existing issues to make sure this bug has not been reported yet.\n- [X] I am using the latest version of AGiXT.\n- [X] I have provided enough information for the maintainers to reproduce and diagnose the issue.",
        "base_commit": "55a7024ab99af73b9d04a09580040cf4aacb5f48",
        "repo": "repo/AGiXT-1026",
        "patch": {
            "agixt/extensions/voice_chat.py": {
                "before": [
                    "@@ -14,11 +14,19 @@ def __init__(self, **kwargs):",
                    "                 self.voice_prompt = \"Voice Chat\"",
                    "         self.tts_command = \"Speak with TTS with Streamlabs Text to Speech\"",
                    "         if \"USE_STREAMLABS_TTS\" in kwargs:",
                    "-            if kwargs[\"USE_STREAMLABS_TTS\"].lower() == \"true\":"
                ],
                "after": [
                    "+                if kwargs[\"USE_GTTS\"].lower() == \"true\":",
                    "+                    self.tts_command = \"Speak with GTTS\"",
                    "         if \"USE_HUGGINGFACE_TTS\" in kwargs:",
                    "             if (",
                    "                 kwargs[\"USE_HUGGINGFACE_TTS\"].lower() == \"true\""
                ]
            }
        }
    },
    {
        "instance_id": "AGiXT__AGiXT-1256",
        "title": "Selected commands from extensions does not properly save.",
        "problem_statement": "Selected commands from extensions does not properly save. Description\n\nI'm not sure what exactly to write about issue, so here ishow to reproduce:\r\nAgent Management -> Modify Agent ->Select extensions -> select commands -> click save -> refresh page -> some commands are not selected\r\n\r\nSelecting commands:\r\n![1 (2)](https://github.com/user-attachments/assets/7d2866dc-ca2f-4534-899f-6c88f64e15d7)\r\n![2 (2)](https://github.com/user-attachments/assets/08797754-ecab-49af-97ff-1daa218e5bfa)\r\n![3](https://github.com/user-attachments/assets/9b535c7e-f6f7-47ea-8a64-7111a615a061)\r\nEnabling memory training and clicking save button:\r\n![4 (2)](https://github.com/user-attachments/assets/18992808-3ccd-4a12-9274-6993aaa846d7)\r\n\r\nUpon refresh:\r\n![11 (2)](https://github.com/user-attachments/assets/7c1c6447-93b4-4efa-a308-0190b0960651)\r\n![22](https://github.com/user-attachments/assets/0006dc25-5484-4640-a8d6-531315208c2b)\r\n![33](https://github.com/user-attachments/assets/adeefd06-0420-450a-9530-797ffc6724d3)\r\n![44](https://github.com/user-attachments/assets/3d4d9e58-840f-490b-9df8-5692b89bf4d2)\r\n\n\n### Operating System\n\n- [ ] Linux\n- [X] Windows\n- [ ] MacOS\n\n### Acknowledgements\n\n- [X] I am NOT trying to use localhost for providers running outside of the docker container.\n- [X] I am NOT trying to run AGiXT outside of docker, the only supported method to run it.\n- [X] Python 3.10.X is installed and the version in use on the host machine.\n- [X] The latest version of Docker is installed and running on the host machine.\n- [X] I am using the latest stable version of AGiXT.\n- [X] I have provided enough information for the maintainers to reproduce and diagnose the issue.\n- [X] I have searched the existing issues to make sure this bug has not been reported yet.",
        "base_commit": "40c6642f41e9794309d924b8b0d4cc7e4950345a",
        "repo": "repo/AGiXT-1256",
        "patch": {
            "agixt/Agent.py": {
                "before": [
                    "@@ -341,23 +341,16 @@ def get_agent_config(self):",
                    "             )",
                    "             agent_commands = (",
                    "                 session.query(AgentCommand)",
                    "-                .join(Command)"
                ],
                "after": [
                    "+            session.close()",
                    "+",
                    "         return f\"Agent {self.agent_name} configuration updated.\"",
                    " ",
                    "     def get_browsed_links(self, conversation_id=None):"
                ]
            },
            "agixt/Extensions.py": {
                "before": [
                    "@@ -277,58 +277,24 @@ def load_commands(self):",
                    "                             )\r",
                    "                         )\r",
                    " \r",
                    "+        # Add chains as commands\r"
                ],
                "after": [
                    "-        return settings\r",
                    "-\r",
                    "     def find_command(self, command_name: str):\r",
                    "         for name, module, function_name, params in self.commands:\r",
                    "             if module.__name__ in DISABLED_EXTENSIONS:\r"
                ]
            }
        }
    },
    {
        "instance_id": "AGiXT__AGiXT-1369",
        "title": "Chains Allow Empty Names",
        "problem_statement": "Chains Allow Empty Names. Description\n\nChains allow empty names to be POSTed which causes zod validation errors when they're sent back to the client.\n\n![Image](https://github.com/user-attachments/assets/a0f88b7c-7276-4bf5-8ef3-f95efb449102)\n",
        "base_commit": "89c1edcd8ca26fe644b1b09c6df03d7496f1e7b5",
        "repo": "repo/AGiXT-1369",
        "patch": {
            "agixt/endpoints/Chain.py": {
                "before": [
                    "@@ -43,6 +43,8 @@ async def get_chains(user=Depends(verify_api_key), authorization: str = Header(N",
                    "     description=\"Retrieves detailed information about a specific chain, including all steps and configurations.\",",
                    " )",
                    " async def get_chain(chain_name: str, user=Depends(verify_api_key)):",
                    "+    if chain_name == \"\":"
                ],
                "after": [
                    "+    if chain_name == \"\":",
                    "+        raise HTTPException(status_code=400, detail=\"Chain name cannot be empty.\")",
                    "     if is_admin(email=user, api_key=authorization) != True:",
                    "         raise HTTPException(status_code=403, detail=\"Access Denied\")",
                    "     Chain(user=user).delete_step(chain_name=chain_name, step_number=step_number)"
                ]
            }
        }
    },
    {
        "instance_id": "AGiXT__AGiXT-1371",
        "title": "Chain Query `too many values`",
        "problem_statement": "Chain Query `too many values`. Description\n\nWhen querying via API or Strawberry, the generated query returns an error:\n\n```gql\nquery MyQuery {\n  chain(chainName: \"Another Chain\") {\n    steps {\n      prompt {\n        chainName\n        promptCategory\n        commandName\n        promptName\n      }\n      agentName\n      promptType\n      step\n    }\n    chainName\n    id\n  }\n}\n```\n\n```\n{\n  \"data\": null,\n  \"errors\": [\n    {\n      \"message\": \"too many values to unpack (expected 2)\",\n      \"locations\": [\n        {\n          \"line\": 2,\n          \"column\": 3\n        }\n      ],\n      \"path\": [\n        \"chain\"\n      ]\n    }\n  ]\n}\n```\n\n### Operating System\n\n- [x] Linux\n- [ ] Windows\n- [ ] MacOS\n\n### Acknowledgements\n\n- [x] I am NOT trying to use localhost for providers running outside of the docker container.\n- [x] I am NOT trying to run AGiXT outside of docker, the only supported method to run it.\n- [x] Python 3.10.X is installed and the version in use on the host machine.\n- [x] The latest version of Docker is installed and running on the host machine.\n- [x] I am using the latest stable version of AGiXT.\n- [x] I have provided enough information for the maintainers to reproduce and diagnose the issue.\n- [x] I have searched the existing issues to make sure this bug has not been reported yet.",
        "base_commit": "1773f014c6a3a85bd323dfe8036f7c0a8dd17420",
        "repo": "repo/AGiXT-1371",
        "patch": {
            "agixt/endpoints/GQL.py": {
                "before": [
                    "@@ -1851,7 +1851,7 @@ async def notifications(",
                    "     @strawberry.field",
                    "     async def providers(self, info) -> Providers:",
                    "         \"\"\"Get comprehensive provider details\"\"\"",
                    "-        user = await get_user_from_context(info)"
                ],
                "after": [
                    "-        user, _ = await get_user_from_context(info)",
                    "+        user, auth, magical = await get_user_from_context(info)",
                    " ",
                    "         chain_manager = Chain(user=user)",
                    "         deps = chain_manager.get_chain_step_dependencies(chain_name=chain_name)"
                ]
            }
        }
    },
    {
        "instance_id": "MetaGPT__MetaGPT-1313",
        "title": "AttributeError: 'Message' object has no attribute 'restricted_to'",
        "problem_statement": "AttributeError: 'Message' object has no attribute 'restricted_to'. ![image](https://github.com/geekan/MetaGPT/assets/49021250/36174081-2e1d-40ee-be58-0994948b33b2)\r\n\r\n```python\r\n python start_game.py\r\n2024-05-31 02:42:33.932 | INFO     | metagpt.const:get_metagpt_package_root:29 - Package root set to /data0/lizhong/MetaGPT\r\n2024-05-31 02:42:39.139 | INFO     | __main__:start_game:34 - Game setup:\r\nPlayer1: Villager,\r\nPlayer2: Werewolf,\r\nPlayer3: Seer,\r\nPlayer4: Guard,\r\nPlayer5: Villager,\r\nPlayer6: Werewolf,\r\nPlayer7: Witch,\r\n2024-05-31 02:42:39.165 | INFO     | metagpt.team:invest:93 - Investment: $20.0.\r\n2024-05-31 02:42:39.172 | ERROR    | metagpt.utils.common:wrapper:631 - Exception occurs, start to serialize the project, exp:\r\nTraceback (most recent call last):\r\n  File \"/data0/lizhong/MetaGPT/metagpt/utils/common.py\", line 640, in wrapper\r\n    return await func(self, *args, **kwargs)\r\n  File \"/data0/lizhong/MetaGPT/metagpt/roles/role.py\", line 545, in run\r\n    if not await self._observe():\r\nAttributeError: 'Message' object has no attribute 'restricted_to'\r\n\r\nDuring handling of the above exception, another exception occurred:\r\n\r\nTraceback (most recent call last):\r\n  File \"/data0/lizhong/MetaGPT/metagpt/utils/common.py\", line 626, in wrapper\r\n    result = await func(self, *args, **kwargs)\r\n  File \"/data0/lizhong/MetaGPT/metagpt/team.py\", line 131, in run\r\n    await self.env.run()\r\nException: Traceback (most recent call last):\r\n  File \"/data0/lizhong/MetaGPT/metagpt/utils/common.py\", line 640, in wrapper\r\n    return await func(self, *args, **kwargs)\r\n  File \"/data0/lizhong/MetaGPT/metagpt/roles/role.py\", line 545, in run\r\n    if not await self._observe():\r\n  File \"/data0/lizhong/MetaGPT/metagpt/ext/werewolf/roles/base_player.py\", line 63, in _observe\r\n    if len(m.restricted_to) and self.profile not in m.restricted_to and self.name not in m.restricted_to:\r\n  File \"/data0/lizhong/anaconda3/envs/cu117-pt2.0/lib/python3.10/site-packages/pydantic/main.py\", line 811, in __getattr__\r\n    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\r\nAttributeError: 'Message' object has no attribute 'restricted_to'\r\n\r\n\r\nTraceback (most recent call last):\r\n  File \"/data0/lizhong/MetaGPT/examples/werewolf_game/start_game.py\", line 68, in <module>\r\n    fire.Fire(main)\r\n  File \"/data0/lizhong/anaconda3/envs/cu117-pt2.0/lib/python3.10/site-packages/fire/core.py\", line 141, in Fire\r\n    component_trace = _Fire(component, args, parsed_flag_args, context, name)\r\n  File \"/data0/lizhong/anaconda3/envs/cu117-pt2.0/lib/python3.10/site-packages/fire/core.py\", line 466, in _Fire\r\n    component, remaining_args = _CallAndUpdateTrace(\r\n  File \"/data0/lizhong/anaconda3/envs/cu117-pt2.0/lib/python3.10/site-packages/fire/core.py\", line 681, in _CallAndUpdateTrace\r\n    component = fn(*varargs, **kwargs)\r\n  File \"/data0/lizhong/MetaGPT/examples/werewolf_game/start_game.py\", line 53, in main\r\n    asyncio.run(\r\n  File \"/data0/lizhong/anaconda3/envs/cu117-pt2.0/lib/python3.10/asyncio/runners.py\", line 44, in run\r\n    return loop.run_until_complete(main)\r\n  File \"/data0/lizhong/anaconda3/envs/cu117-pt2.0/lib/python3.10/asyncio/base_events.py\", line 649, in run_until_complete\r\n    return future.result()\r\n  File \"/data0/lizhong/MetaGPT/examples/werewolf_game/start_game.py\", line 40, in start_game\r\n    await game.run(n_round=n_round)\r\n  File \"/data0/lizhong/MetaGPT/metagpt/utils/common.py\", line 632, in wrapper\r\n    self.serialize()  # Team.serialize\r\n  File \"/data0/lizhong/MetaGPT/metagpt/team.py\", line 62, in serialize\r\n    write_json_file(team_info_path, serialized_data)\r\n  File \"/data0/lizhong/MetaGPT/metagpt/utils/common.py\", line 581, in write_json_file\r\n    json.dump(data, fout, ensure_ascii=False, indent=indent, default=to_jsonable_python)\r\n  File \"/data0/lizhong/anaconda3/envs/cu117-pt2.0/lib/python3.10/json/__init__.py\", line 179, in dump\r\n    for chunk in iterable:\r\n  File \"/data0/lizhong/anaconda3/envs/cu117-pt2.0/lib/python3.10/json/encoder.py\", line 431, in _iterencode\r\n    yield from _iterencode_dict(o, _current_indent_level)\r\n  File \"/data0/lizhong/anaconda3/envs/cu117-pt2.0/lib/python3.10/json/encoder.py\", line 405, in _iterencode_dict\r\n    yield from chunks\r\n  File \"/data0/lizhong/anaconda3/envs/cu117-pt2.0/lib/python3.10/json/encoder.py\", line 405, in _iterencode_dict\r\n    yield from chunks\r\n  File \"/data0/lizhong/anaconda3/envs/cu117-pt2.0/lib/python3.10/json/encoder.py\", line 405, in _iterencode_dict\r\n    yield from chunks\r\n  [Previous line repeated 1 more time]\r\n  File \"/data0/lizhong/anaconda3/envs/cu117-pt2.0/lib/python3.10/json/encoder.py\", line 325, in _iterencode_list\r\n    yield from chunks\r\n  File \"/data0/lizhong/anaconda3/envs/cu117-pt2.0/lib/python3.10/json/encoder.py\", line 438, in _iterencode\r\n    o = _default(o)\r\npydantic_core._pydantic_core.PydanticSerializationError: Unable to serialize unknown type: <class 'pydantic._internal._model_construction.ModelMetaclass'>\r\n```\r\n\r\n\r\nWhen running the werewolf killing agent, the error in the above image appears. How can I solve it?",
        "base_commit": "bc1cd11a4b284e509056cc0052ec52d20568a4ab",
        "repo": "repo/MetaGPT-1313",
        "patch": {
            "metagpt/ext/werewolf/roles/base_player.py": {
                "before": [
                    "@@ -86,7 +86,7 @@ async def _think(self):",
                    "             # FIXME: hard code to split, restricted\u4e3a\"Moderator\"\u6216\"Moderator, \u89d2\u8272profile\"",
                    "             # Moderator\u52a0\u5bc6\u53d1\u7ed9\u81ea\u5df1\u7684\uff0c\u610f\u5473\u7740\u8981\u6267\u884c\u89d2\u8272\u7684\u7279\u6b8a\u52a8\u4f5c",
                    "             self.rc.todo = self.special_actions[0]()",
                    "-        return self.rc.todo is not None"
                ],
                "after": [
                    "-        return self.rc.todo is not None",
                    "+        return True",
                    " ",
                    "     async def _act(self):",
                    "         # todo\u4e3a_think\u65f6\u786e\u5b9a\u7684\uff0c\u6709\u4e24\u79cd\u60c5\u51b5\uff0cSpeak\u6216Protect"
                ]
            },
            "metagpt/ext/werewolf/roles/moderator.py": {
                "before": [
                    "@@ -171,7 +171,7 @@ async def _think(self):",
                    "         else:",
                    "             # \u4e0a\u4e00\u8f6e\u6d88\u606f\u662f\u6e38\u620f\u89d2\u8272\u7684\u53d1\u8a00\uff0c\u89e3\u6790\u89d2\u8272\u7684\u53d1\u8a00",
                    "             self.rc.todo = ParseSpeak()",
                    "-        return self.rc.todo is not None"
                ],
                "after": [
                    "-        return self.rc.todo is not None",
                    "+        return True",
                    " ",
                    "     def _init_fields_from_obj(self, obs: dict[str, Union[int, str, list[str]]]):",
                    "         self.game_setup = obs.get(\"game_setup\", \"\")"
                ]
            },
            "metagpt/ext/werewolf/roles/werewolf.py": {
                "before": [
                    "@@ -13,4 +13,4 @@ async def _think(self):",
                    "         await super()._think()",
                    "         if isinstance(self.rc.todo, Speak):",
                    "             self.rc.todo = Impersonate()",
                    "-        return self.rc.todo is not None"
                ],
                "after": [
                    "         await super()._think()",
                    "         if isinstance(self.rc.todo, Speak):",
                    "             self.rc.todo = Impersonate()",
                    "-        return self.rc.todo is not None",
                    "+        return True"
                ]
            },
            "metagpt/ext/werewolf/roles/witch.py": {
                "before": [
                    "@@ -26,4 +26,4 @@ async def _think(self):",
                    "                 self.rc.todo = Poison()",
                    "             else:",
                    "                 raise ValueError(\"Moderator's instructions must include save or poison keyword\")",
                    "-        return self.rc.todo is not None"
                ],
                "after": [
                    "                 self.rc.todo = Poison()",
                    "             else:",
                    "                 raise ValueError(\"Moderator's instructions must include save or poison keyword\")",
                    "-        return self.rc.todo is not None",
                    "+        return True"
                ]
            }
        }
    },
    {
        "instance_id": "SWE-agent__SWE-agent-741",
        "title": "The utils directory is not included in the build artifacts.",
        "problem_statement": "The utils directory is not included in the build artifacts. Describe the issue\n\nAfter the pip install, the utils directory is not included in the build artifacts.\r\nI think it\u2019s because the \\_\\_init\\_\\_.py does not exist in utils.\r\n\r\n* there is no utils directory in `build/lib/sweagent`\r\n\r\n![image](https://github.com/user-attachments/assets/a3159139-8f29-478c-b560-62bb42d8efe4)\r\n\n\n### Optional: Relevant documentation page\n\n_No response_",
        "base_commit": "3ab16c7ee0e6911cdc07dde79a12478388b4414f",
        "repo": "repo/SWE-agent-741",
        "patch": {}
    },
    {
        "instance_id": "SWE-agent__SWE-agent-333",
        "title": "Cannot change \"Setup script\" (for Environment) in Web UI",
        "problem_statement": "Cannot change \"Setup script\" (for Environment) in Web UI. Describe the bug\n\nI cannot modify the \"Setup script\" section in the Envionment tab in the web UI. The screenshot below shows some warnings in the console; the second one is probably relevant.\r\n<img width=\"1500\" alt=\"image\" src=\"https://github.com/princeton-nlp/SWE-agent/assets/1141948/78ca8b8e-5dcb-4464-925f-b231cc102d59\">\r\n\n\n### Steps/commands/code to Reproduce\n\nFollow the installation instructions from the README, Launch the web UI via `./start_web_ui.sh` click the \"Environment\" tab, switch from \"Python versions and packages\" to \"Path to shell script\", attempt to change the shell script\n\n### Error message/results\n\nThe above screenshot contains the warnings. It's not possible to change the shell script.\n\n### System Information\n\nmacOS Sonoma 14.4.1, Python 3.9.6\r\n\n\n### Checklist\n\n- [X] I'm running with the latest docker container/on the latest development version\n- [X] I've searched the other issues for a duplicate\n- [X] I have copied the full command/code that I ran\n- [X] I have copied the **full** log file/error message that was the result (if applicable)\n- [X] I have enclosed code/log messages in triple backticks ([docs](https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#quoting-code)) and clicked \"Preview\" to make sure it's displayed correctly.",
        "base_commit": "1e065f8c860a6a8aa8b06a38bb68f1e00b8bd128",
        "repo": "repo/SWE-agent-333",
        "patch": {
            "sweagent/api/server.py": {
                "before": [
                    "@@ -133,6 +133,8 @@ def run():",
                    "         environment_setup = str(write_env_yaml(environment))",
                    "     elif environment[\"config_type\"] == \"script_path\":",
                    "         environment_setup = environment[\"script_path\"]",
                    "+    if not environment_setup.strip():"
                ],
                "after": [
                    "+    if not environment_setup.strip():",
                    "+        environment_setup = None",
                    "     test_run = request.args[\"test_run\"].lower() == \"true\"",
                    "     if test_run:",
                    "         model_name = \"instant_empty_submit\""
                ]
            },
            "sweagent/frontend/src/components/controls/LRunControl.js": {
                "before": [
                    "@@ -112,7 +112,7 @@ function LRunControl({",
                    "                 setEnvConfig({ ...envConfig, script_path: e.target.value })",
                    "               }",
                    "               placeholder=\"/path/to/setup.sh\"",
                    "-              value=\"\""
                ],
                "after": [
                    "-              value=\"\"",
                    "+              defaultValue=\"\"",
                    "             />",
                    "           </div>",
                    "           <div className=\"alert alert-info\" role=\"alert\">"
                ]
            }
        }
    },
    {
        "instance_id": "SWE-agent__SWE-agent-362",
        "title": "React: Toggling input methods copies over input",
        "problem_statement": "eact: Toggling input methods copies over input. Reproduce: \r\n\r\nPut in something in first textbox\r\n\r\n<img width=\"927\" alt=\"image\" src=\"https://github.com/princeton-nlp/SWE-agent/assets/13602468/f90d5171-7166-4474-9cc1-df27e850e98c\">\r\n\r\nNow switch the problem statement input method to \"local file\"\r\n\r\n<img width=\"713\" alt=\"image\" src=\"https://github.com/princeton-nlp/SWE-agent/assets/13602468/578c2f70-d91c-4ce8-acea-706b35aab9ca\">\r\n\r\nThe default value is what we just entered rather than the `defaultValue` that was set in react.\r\n\r\nRelevant code:\r\n\r\n```js\r\nfunction getEnvInput() {\r\n    const envInputType = runConfig.environment.environment_setup.input_type;\r\n    if (envInputType === \"script_path\") {\r\n      return (\r\n        <div>\r\n          <div className=\"input-group mb-3\">\r\n            <span className=\"input-group-text\">Setup script</span>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              onChange={(e) =>\r\n                setRunConfig((draft) => {\r\n                  draft.environment.environment_setup.script_path.script_path =\r\n                    e.target.value;\r\n                })\r\n              }\r\n              placeholder=\"/path/to/setup.sh\"\r\n              defaultValue={runConfigDefault.environment.environment_setup.script_path.script_path}\r\n            />\r\n          </div>\r\n          <div className=\"alert alert-info\" role=\"alert\">\r\n            The script will be sourced (every line will be run as if it were\r\n            typed into the shell), so make sure there is no exit commands as it\r\n            will close the environment.\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    if (envInputType === \"manual\") {\r\n      return (\r\n        <div>\r\n          <div className=\"input-group mb-3\">\r\n            <span className=\"input-group-text\">Python version</span>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              onChange={(e) =>\r\n                setRunConfig((draft) => {\r\n                  draft.environment.environment_setup.manual.python =\r\n                    e.target.value ||\r\n                    runConfigDefault.environment.environment_setup.manual\r\n                      .python;\r\n                })\r\n              }\r\n              placeholder={\r\n                runConfigDefault.environment.environment_setup.manual.python\r\n              }\r\n              defaultValue=\"\"\r\n            />\r\n          </div>\r\n          <div class=\"input-group mb-3\">\r\n            <div class=\"input-group-text\">\r\n              <input\r\n                class=\"form-check-input mt-0\"\r\n                type=\"checkbox\"\r\n                aria-label=\"Run installation command\"\r\n                defaultChecked={true}\r\n                onChange={(e) =>\r\n                  setRunConfig((draft) => {\r\n                    draft.environment.environment_setup.manual.install_command_active =\r\n                      e.target.checked;\r\n                  })\r\n                }\r\n              />\r\n            </div>\r\n            <span className=\"input-group-text\">Installation command</span>\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              aria-label=\"Text input with checkbox\"\r\n              placeholder={defaultInstallCommand}\r\n              onChange={(e) =>\r\n                setRunConfig((draft) => {\r\n                  draft.environment.environment_setup.manual.install =\r\n                    e.target.value;\r\n                })\r\n              }\r\n            />\r\n          </div>\r\n\r\n          <textarea\r\n            className=\"form-control\"\r\n            onChange={(e) =>\r\n              setRunConfig((draft) => {\r\n                draft.environment.environment_setup.manual.pip_packages =\r\n                  e.target.value;\r\n              })\r\n            }\r\n            rows=\"5\"\r\n            placeholder=\"pip installable packages list, one per line (i.e., requirements.txt).\"\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n```",
        "base_commit": "7050d852cd2a8466943b92db62a7ac1b39ae1fe7",
        "repo": "repo/SWE-agent-362",
        "patch": {
            "sweagent/frontend/src/components/controls/LRunControl.js": {
                "before": [
                    "@@ -92,6 +92,23 @@ function LRunControl({",
                    "   }",
                    " ",
                    "   function getEnvInput() {",
                    "+    // Get environment configuration input controls based on the"
                ],
                "after": [
                    "+    //   );",
                    "+    // }",
                    "     const envInputType = runConfig.environment.environment_setup.input_type;",
                    "     if (envInputType === \"script_path\") {",
                    "       return ("
                ]
            }
        }
    },
    {
        "instance_id": "camel__camel-1145",
        "title": "[BUG] Optional dependencies of TwitterToolkit, AskNewsToolkit, AsyncAskNewsToolkit are attempted to be imported when any toolkit is imported",
        "problem_statement": "[BUG] Optional dependencies of TwitterToolkit, AskNewsToolkit, AsyncAskNewsToolkit are attempted to be imported when any toolkit is imported. Required prerequisites\r\n\r\n- [X] I have read the documentation <https://camel-ai.github.io/camel/camel.html>.\r\n- [X] I have searched the [Issue Tracker](https://github.com/camel-ai/camel/issues) and [Discussions](https://github.com/camel-ai/camel/discussions) that this hasn't already been reported. (+1 or comment there if it has.)\r\n- [ ] Consider asking first in a [Discussion](https://github.com/camel-ai/camel/discussions/new).\r\n\r\n### What version of camel are you using?\r\n\r\n01e5803d27febb80fe22f28253ae55dcd4779b36\r\n\r\n### System information\r\n\r\nPython 3.10.0 (v3.10.0:b494f5935c, Oct  4 2021, 14:59:19) [Clang 12.0.5 (clang-1205.0.22.11)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import sys, camel\r\n>>> print(sys.version, sys.platform)\r\n3.10.0 (v3.10.0:b494f5935c, Oct  4 2021, 14:59:19) [Clang 12.0.5 (clang-1205.0.22.11)] darwin\r\n>>> print(camel.__version__)\r\n0.2.6\r\n\r\n\r\n### Problem description\r\n\r\nIf no optional dependencies are installed, no toolkit can be imported, even if the one you are trying to use doesn't depend on an optional dependency\r\n\r\n### Reproducible example code\r\n\r\nThe Python snippets:\r\n\r\n```python\r\nfrom camel.toolkits.math_toolkit import (MathToolkit)\r\nprint(\"Hello, World!\")\r\n```\r\n\r\nGives this error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"<frozen importlib._bootstrap>\", line 1027, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 992, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 241, in _call_with_frames_removed\r\n  File \"/Users/caelum/PycharmProjects/camel/camel/toolkits/__init__.py\", line 39, in <module>\r\n    from .twitter_toolkit import TwitterToolkit, TWITTER_FUNCS\r\n  File \"/Users/caelum/PycharmProjects/camel/camel/toolkits/twitter_toolkit.py\", line 21, in <module>\r\n    from requests_oauthlib import OAuth1\r\nModuleNotFoundError: No module named 'requests_oauthlib'\r\n```\r\n\r\nThere are similar problems with `AskNewsToolkit`. \r\n\r\nSome other toolkits with optional dependencies are fine, like `GoogleScholarToolkit`, likely because they aren't being instantiated in top level elements, like:\r\n```\r\nASKNEWS_FUNCS: List[FunctionTool] = AskNewsToolkit().get_tools()\r\n```\r\n\r\nExtra dependencies:\r\n\r\n```text\r\nNone\r\n```\r\n\r\n\r\nSteps to reproduce:\r\n\r\n1. Create a new poetry context\r\n2. Install just the required dependencies for camel\r\n3. Run the above code\r\n\r\n\r\n### Expected behavior\r\n\r\nThese errors should arise only if those toolkits are being used without their optional dependencies being installed",
        "base_commit": "a9963e2adb407a09333b6d02c1594a2c579165f5",
        "repo": "repo/camel-1145",
        "patch": {
            "camel/toolkits/function_tool.py": {
                "before": [
                    "@@ -42,6 +42,31 @@ def _remove_a_key(d: Dict, remove_key: Any) -> None:",
                    "                 _remove_a_key(d[key], remove_key)",
                    " ",
                    " ",
                    "+def _remove_title_recursively(data, parent_key=None):"
                ],
                "after": [
                    "+    # parameters_dict",
                    "+    _remove_title_recursively(parameters_dict)",
                    " ",
                    "     docstring = parse(func.__doc__ or \"\")",
                    "     for param in docstring.params:"
                ]
            }
        }
    },
    {
        "instance_id": "camel__camel-1309",
        "title": "[BUG] Client.__init__() got an unexpected keyword argument \u2018proxies\u2019 when using OpenAI models when installed via `pip install camel-ai` without [all] extras ",
        "problem_statement": "[BUG] Client.__init__() got an unexpected keyword argument \u2018proxies\u2019 when using OpenAI models when installed via `pip install camel-ai` without [all] extras. Required prerequisites\r\n\r\n- [X] I have read the documentation <https://camel-ai.github.io/camel/camel.html>.\r\n- [X] I have searched the [Issue Tracker](https://github.com/camel-ai/camel/issues) and [Discussions](https://github.com/camel-ai/camel/discussions) that this hasn't already been reported. (+1 or comment there if it has.)\r\n- [X] Consider asking first in a [Discussion](https://github.com/camel-ai/camel/discussions/new).\r\n\r\n### What version of camel are you using?\r\n\r\n0.2.11 onwards. Possibly doesn't impact older versions\r\n\r\n### System information\r\n\r\n0.2.11. Only observed in colab, unsure if related\r\npython 3.10\r\n### Problem description\r\n\r\nWhen CAMEL is installed with a newer OpenAI version, it will fail to work when using requests with OpenAI models.\r\n\r\nThis doesn't impact when installing with [all], possibly because an optional dependency constrains the version to one that is working. But with `pip install camel-ai` or `pip install camel-ai==0.2.11` the error will occur\r\n\r\n### Reproducible example code\r\n\r\nGo to the notebook [here](https://drive.google.com/file/d/17_m8BPMSh4f9mmdYP2PLQCU639aGFSBj/view) and change the install command to !pip install camel-ai==0.2.11\r\n\r\n\r\n### Traceback\r\n\r\n```pytb\r\n---------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-4-0944667ea997> in <cell line: 75>()\r\n     74 \r\n     75 if __name__ == \"__main__\":\r\n---> 76     main()\r\n\r\n9 frames\r\n<ipython-input-4-0944667ea997> in main(model, chat_turn_limit)\r\n      2 # Initial the role-playing session on developing a trading bot task with default model (`GPT_4O_MINI`)\r\n      3     task_prompt = \"Develop a trading bot for the stock market\"\r\n----> 4     role_play_session = RolePlaying(\r\n      5         assistant_role_name=\"Python Programmer\",\r\n      6         assistant_agent_kwargs=dict(model=model),\r\n\r\n/usr/local/lib/python3.10/dist-packages/camel/societies/role_playing.py in __init__(self, assistant_role_name, user_role_name, critic_role_name, task_prompt, with_task_specify, with_task_planner, with_critic_in_the_loop, critic_criteria, model, task_type, assistant_agent_kwargs, user_agent_kwargs, task_specify_agent_kwargs, task_planner_agent_kwargs, critic_kwargs, sys_msg_generator_kwargs, extend_sys_msg_meta_dicts, extend_task_specify_meta_dict, output_language)\r\n    117 \r\n    118         self.specified_task_prompt: Optional[TextPrompt] = None\r\n--> 119         self._init_specified_task_prompt(\r\n    120             assistant_role_name,\r\n    121             user_role_name,\r\n\r\n/usr/local/lib/python3.10/dist-packages/camel/societies/role_playing.py in _init_specified_task_prompt(self, assistant_role_name, user_role_name, task_specify_agent_kwargs, extend_task_specify_meta_dict, output_language)\r\n    207                 elif 'model' not in task_specify_agent_kwargs:\r\n    208                     task_specify_agent_kwargs.update(dict(model=self.model))\r\n--> 209             task_specify_agent = TaskSpecifyAgent(\r\n    210                 task_type=self.task_type,\r\n    211                 output_language=output_language,\r\n\r\n/usr/local/lib/python3.10/dist-packages/camel/agents/task_agent.py in __init__(self, model, task_type, task_specify_prompt, word_limit, output_language)\r\n     85         )\r\n     86 \r\n---> 87         super().__init__(\r\n     88             system_message,\r\n     89             model=model,\r\n\r\n/usr/local/lib/python3.10/dist-packages/camel/agents/chat_agent.py in __init__(self, system_message, model, memory, message_window_size, token_limit, output_language, tools, external_tools, response_terminators, scheduling_strategy)\r\n    187             model\r\n    188             if model is not None\r\n--> 189             else ModelFactory.create(\r\n    190                 model_platform=ModelPlatformType.DEFAULT,\r\n    191                 model_type=ModelType.DEFAULT,\r\n\r\n/usr/local/lib/python3.10/dist-packages/camel/models/model_factory.py in create(model_platform, model_type, model_config_dict, token_counter, api_key, url)\r\n    131             )\r\n    132 \r\n--> 133         return model_class(\r\n    134             model_type=model_type,\r\n    135             model_config_dict=model_config_dict,\r\n\r\n/usr/local/lib/python3.10/dist-packages/camel/models/openai_model.py in __init__(self, model_type, model_config_dict, api_key, url, token_counter)\r\n     68             model_type, model_config_dict, api_key, url, token_counter\r\n     69         )\r\n---> 70         self._client = OpenAI(\r\n     71             timeout=60,\r\n     72             max_retries=3,\r\n\r\n/usr/local/lib/python3.10/dist-packages/openai/_client.py in __init__(self, api_key, organization, project, base_url, timeout, max_retries, default_headers, default_query, http_client, _strict_response_validation)\r\n    121             base_url = f\"https://api.openai.com/v1\"\r\n    122 \r\n--> 123         super().__init__(\r\n    124             version=__version__,\r\n    125             base_url=base_url,\r\n\r\n/usr/local/lib/python3.10/dist-packages/openai/_base_client.py in __init__(self, version, base_url, max_retries, timeout, transport, proxies, limits, http_client, custom_headers, custom_query, _strict_response_validation)\r\n    855             _strict_response_validation=_strict_response_validation,\r\n    856         )\r\n--> 857         self._client = http_client or SyncHttpxClientWrapper(\r\n    858             base_url=base_url,\r\n    859             # cast to a valid type because mypy doesn't understand our type narrowing\r\n\r\n/usr/local/lib/python3.10/dist-packages/openai/_base_client.py in __init__(self, **kwargs)\r\n    753         kwargs.setdefault(\"limits\", DEFAULT_CONNECTION_LIMITS)\r\n    754         kwargs.setdefault(\"follow_redirects\", True)\r\n--> 755         super().__init__(**kwargs)\r\n    756 \r\n    757 \r\n\r\nTypeError: Client.__init__() got an unexpected keyword argument 'proxies'\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\n_No response_\r\n\r\n### Additional context\r\n\r\n_No response_",
        "base_commit": "a60a6829fa2a719d8a60ea31bb3f0e41aa6c9108",
        "repo": "repo/camel-1309",
        "patch": {
            ".github/ISSUE_TEMPLATE/bug_report.yml": {
                "before": [
                    "@@ -26,7 +26,7 @@ body:",
                    "     attributes:",
                    "       label: What version of camel are you using?",
                    "       description: Run command `python3 -c 'print(__import__(\"camel\").__version__)'` in your shell and paste the output here.",
                    "-      placeholder: E.g., 0.2.12"
                ],
                "after": [
                    "-      placeholder: E.g., 0.2.12",
                    "+      placeholder: E.g., 0.2.11",
                    "     validations:",
                    "       required: true",
                    " "
                ]
            },
            "README.md": {
                "before": [
                    "@@ -144,7 +144,7 @@ conda create --name camel python=3.10",
                    " conda activate camel",
                    " ",
                    " # Clone github repo",
                    "-git clone -b v0.2.12 https://github.com/camel-ai/camel.git"
                ],
                "after": [
                    "-git clone -b v0.2.12 https://github.com/camel-ai/camel.git",
                    "+git clone -b v0.2.11 https://github.com/camel-ai/camel.git",
                    " ",
                    " # Change directory into project directory",
                    " cd camel"
                ]
            },
            "camel/__init__.py": {
                "before": [
                    "@@ -14,7 +14,7 @@",
                    " ",
                    " from camel.logger import disable_logging, enable_logging, set_log_level",
                    " ",
                    "-__version__ = '0.2.12'"
                ],
                "after": [
                    "-__version__ = '0.2.12'",
                    "+__version__ = '0.2.11'",
                    " ",
                    " __all__ = [",
                    "     '__version__',"
                ]
            },
            "docs/conf.py": {
                "before": [
                    "@@ -27,7 +27,7 @@",
                    " project = 'CAMEL'",
                    " copyright = '2024, CAMEL-AI.org'",
                    " author = 'CAMEL-AI.org'",
                    "-release = '0.2.12'"
                ],
                "after": [
                    "-release = '0.2.12'",
                    "+release = '0.2.11'",
                    " ",
                    " html_favicon = (",
                    "     'https://raw.githubusercontent.com/camel-ai/camel/master/misc/favicon.png'"
                ]
            },
            "docs/cookbooks/agents_message.ipynb": {
                "before": [
                    "@@ -101,7 +101,7 @@",
                    "       },",
                    "       \"outputs\": [],",
                    "       \"source\": [",
                    "-        \"!pip install \\\"camel-ai==0.2.12\\\"\""
                ],
                "after": [
                    "-        \"!pip install \\\"camel-ai==0.2.12\\\"\"",
                    "+        \"!pip install \\\"camel-ai==0.2.11\\\"\"",
                    "       ]",
                    "     },",
                    "     {"
                ]
            },
            "docs/cookbooks/agents_prompting.ipynb": {
                "before": [
                    "@@ -64,7 +64,7 @@",
                    "       },",
                    "       \"outputs\": [],",
                    "       \"source\": [",
                    "-        \"!pip install \\\"camel-ai==0.2.12\\\"\""
                ],
                "after": [
                    "-        \"!pip install \\\"camel-ai==0.2.12\\\"\"",
                    "+        \"!pip install \\\"camel-ai==0.2.11\\\"\"",
                    "       ]",
                    "     },",
                    "     {"
                ]
            },
            "docs/cookbooks/agents_society.ipynb": {
                "before": [
                    "@@ -192,7 +192,7 @@",
                    "       },",
                    "       \"outputs\": [],",
                    "       \"source\": [",
                    "-        \"!pip install \\\"camel-ai==0.2.12\\\"\""
                ],
                "after": [
                    "-        \"!pip install \\\"camel-ai==0.2.12\\\"\"",
                    "+        \"!pip install \\\"camel-ai==0.2.11\\\"\"",
                    "       ]",
                    "     },",
                    "     {"
                ]
            },
            "docs/cookbooks/agents_tracking.ipynb": {
                "before": [
                    "@@ -64,7 +64,7 @@",
                    "       },",
                    "       \"outputs\": [],",
                    "       \"source\": [",
                    "-        \"%pip install camel-ai[all]==0.2.12\\n\","
                ],
                "after": [
                    "-        \"%pip install camel-ai[all]==0.2.12\\n\",",
                    "+        \"%pip install camel-ai[all]==0.2.11\\n\",",
                    "         \"%pip install agentops==0.3.10\"",
                    "       ]",
                    "     },"
                ]
            },
            "docs/cookbooks/agents_with_memory.ipynb": {
                "before": [
                    "@@ -73,7 +73,7 @@",
                    "       },",
                    "       \"outputs\": [],",
                    "       \"source\": [",
                    "-        \"!pip install \\\"camel-ai[all]==0.2.12\\\"\""
                ],
                "after": [
                    "-        \"!pip install \\\"camel-ai[all]==0.2.12\\\"\"",
                    "+        \"!pip install \\\"camel-ai[all]==0.2.11\\\"\"",
                    "       ]",
                    "     },",
                    "     {"
                ]
            },
            "docs/cookbooks/agents_with_rag.ipynb": {
                "before": [
                    "@@ -75,7 +75,7 @@",
                    "       },",
                    "       \"outputs\": [],",
                    "       \"source\": [",
                    "-        \"!pip install \\\"camel-ai[all]==0.2.12\\\"\""
                ],
                "after": [
                    "-        \"!pip install \\\"camel-ai[all]==0.2.12\\\"\"",
                    "+        \"!pip install \\\"camel-ai[all]==0.2.11\\\"\"",
                    "       ]",
                    "     },",
                    "     {"
                ]
            },
            "docs/cookbooks/agents_with_tools.ipynb": {
                "before": [
                    "@@ -77,7 +77,7 @@",
                    "       },",
                    "       \"outputs\": [],",
                    "       \"source\": [",
                    "-        \"!pip install \\\"camel-ai[all]==0.2.12\\\"\""
                ],
                "after": [
                    "-        \"!pip install \\\"camel-ai[all]==0.2.12\\\"\"",
                    "+        \"!pip install \\\"camel-ai[all]==0.2.11\\\"\"",
                    "       ]",
                    "     },",
                    "     {"
                ]
            },
            "docs/cookbooks/create_your_first_agent.ipynb": {
                "before": [
                    "@@ -83,7 +83,7 @@",
                    "     {",
                    "       \"cell_type\": \"code\",",
                    "       \"source\": [",
                    "-        \"!pip install \\\"camel-ai[all]==0.2.12\\\"\""
                ],
                "after": [
                    "-        \"!pip install \\\"camel-ai[all]==0.2.12\\\"\"",
                    "+        \"!pip install \\\"camel-ai[all]==0.2.11\\\"\"",
                    "       ],",
                    "       \"metadata\": {",
                    "         \"id\": \"UtcC3c-KVZmU\""
                ]
            },
            "docs/cookbooks/create_your_first_agents_society.ipynb": {
                "before": [
                    "@@ -77,7 +77,7 @@",
                    "     {",
                    "       \"cell_type\": \"code\",",
                    "       \"source\": [",
                    "-        \"!pip install \\\"camel-ai==0.2.12\\\"\""
                ],
                "after": [
                    "-        \"!pip install \\\"camel-ai==0.2.12\\\"\"",
                    "+        \"!pip install \\\"camel-ai==0.2.11\\\"\"",
                    "       ],",
                    "       \"metadata\": {",
                    "         \"id\": \"RiwfwyyLYYxo\""
                ]
            },
            "docs/cookbooks/critic_agents_and_tree_search.ipynb": {
                "before": [
                    "@@ -84,7 +84,7 @@",
                    "     {",
                    "       \"cell_type\": \"code\",",
                    "       \"source\": [",
                    "-        \"%pip install \\\"camel-ai==0.2.12\\\"\""
                ],
                "after": [
                    "-        \"%pip install \\\"camel-ai==0.2.12\\\"\"",
                    "+        \"%pip install \\\"camel-ai==0.2.11\\\"\"",
                    "       ],",
                    "       \"metadata\": {",
                    "         \"id\": \"UtcC3c-KVZmU\""
                ]
            },
            "docs/cookbooks/customer_service_Discord_bot_using_SambaNova_with_agentic_RAG.ipynb": {
                "before": [
                    "@@ -50,7 +50,7 @@",
                    "       },",
                    "       \"outputs\": [],",
                    "       \"source\": [",
                    "-        \"!pip install \\\"camel-ai[all]==0.2.12\\\"\\n\","
                ],
                "after": [
                    "-        \"!pip install \\\"camel-ai[all]==0.2.12\\\"\\n\",",
                    "+        \"!pip install \\\"camel-ai[all]==0.2.11\\\"\\n\",",
                    "         \"!pip install starlette\\n\",",
                    "         \"!pip install nest_asyncio\"",
                    "       ]"
                ]
            },
            "docs/cookbooks/customer_service_Discord_bot_with_agentic_RAG.ipynb": {
                "before": [
                    "@@ -59,7 +59,7 @@",
                    "       },",
                    "       \"outputs\": [],",
                    "       \"source\": [",
                    "-        \"!pip install \\\"camel-ai[all]==0.2.12\\\"\\n\","
                ],
                "after": [
                    "-        \"!pip install \\\"camel-ai[all]==0.2.12\\\"\\n\",",
                    "+        \"!pip install \\\"camel-ai[all]==0.2.11\\\"\\n\",",
                    "         \"!pip install starlette\\n\",",
                    "         \"!pip install nest_asyncio\"",
                    "       ]"
                ]
            },
            "docs/cookbooks/embodied_agents.ipynb": {
                "before": [
                    "@@ -67,7 +67,7 @@",
                    "     {",
                    "       \"cell_type\": \"code\",",
                    "       \"source\": [",
                    "-        \"%pip install \\\"camel-ai==0.2.12\\\"\""
                ],
                "after": [
                    "-        \"%pip install \\\"camel-ai==0.2.12\\\"\"",
                    "+        \"%pip install \\\"camel-ai==0.2.11\\\"\"",
                    "       ],",
                    "       \"metadata\": {",
                    "         \"id\": \"UtcC3c-KVZmU\""
                ]
            },
            "docs/cookbooks/ingest_data_from_websites_with_Firecrawl.ipynb": {
                "before": [
                    "@@ -81,7 +81,7 @@",
                    "       },",
                    "       \"outputs\": [],",
                    "       \"source\": [",
                    "-        \"pip install \\\"camel-ai[all]==0.2.12\\\"\""
                ],
                "after": [
                    "-        \"pip install \\\"camel-ai[all]==0.2.12\\\"\"",
                    "+        \"pip install \\\"camel-ai[all]==0.2.11\\\"\"",
                    "       ]",
                    "     },",
                    "     {"
                ]
            },
            "docs/cookbooks/knowledge_graph.ipynb": {
                "before": [
                    "@@ -73,7 +73,7 @@",
                    "       },",
                    "       \"outputs\": [],",
                    "       \"source\": [",
                    "-        \"pip install \\\"camel-ai[all]==0.2.12\\\"\""
                ],
                "after": [
                    "-        \"pip install \\\"camel-ai[all]==0.2.12\\\"\"",
                    "+        \"pip install \\\"camel-ai[all]==0.2.11\\\"\"",
                    "       ]",
                    "     },",
                    "     {"
                ]
            },
            "docs/cookbooks/model_speed_comparison.ipynb": {
                "before": [
                    "@@ -63,7 +63,7 @@",
                    "     {",
                    "       \"cell_type\": \"code\",",
                    "       \"source\": [",
                    "-        \"!pip install \\\"camel-ai==0.2.12\\\"\""
                ],
                "after": [
                    "-        \"!pip install \\\"camel-ai==0.2.12\\\"\"",
                    "+        \"!pip install \\\"camel-ai==0.2.11\\\"\"",
                    "       ],",
                    "       \"metadata\": {",
                    "         \"id\": \"UtcC3c-KVZmU\""
                ]
            },
            "docs/cookbooks/roleplaying_scraper.ipynb": {
                "before": [
                    "@@ -89,7 +89,7 @@",
                    "       },",
                    "       \"outputs\": [],",
                    "       \"source\": [",
                    "-        \"!pip install \\\"camel-ai[all]==0.2.12\\\"\""
                ],
                "after": [
                    "-        \"!pip install \\\"camel-ai[all]==0.2.12\\\"\"",
                    "+        \"!pip install \\\"camel-ai[all]==0.2.11\\\"\"",
                    "       ]",
                    "     },",
                    "     {"
                ]
            },
            "docs/cookbooks/task_generation.ipynb": {
                "before": [
                    "@@ -62,7 +62,7 @@",
                    "       },",
                    "       \"outputs\": [],",
                    "       \"source\": [",
                    "-        \"!pip install \\\"camel-ai==0.2.12\\\"\""
                ],
                "after": [
                    "-        \"!pip install \\\"camel-ai==0.2.12\\\"\"",
                    "+        \"!pip install \\\"camel-ai==0.2.11\\\"\"",
                    "       ]",
                    "     },",
                    "     {"
                ]
            },
            "docs/cookbooks/video_analysis.ipynb": {
                "before": [
                    "@@ -28,7 +28,7 @@",
                    "    },",
                    "    \"outputs\": [],",
                    "    \"source\": [",
                    "-    \"%pip install \\\"camel-ai[all]==0.2.12\\\"\""
                ],
                "after": [
                    "-    \"%pip install \\\"camel-ai[all]==0.2.12\\\"\"",
                    "+    \"%pip install \\\"camel-ai[all]==0.2.11\\\"\"",
                    "    ]",
                    "   },",
                    "   {"
                ]
            },
            "docs/cookbooks/workforce_judge_committee.ipynb": {
                "before": [
                    "@@ -28,7 +28,7 @@",
                    "       },",
                    "       \"outputs\": [],",
                    "       \"source\": [",
                    "-        \"%pip install \\\"camel-ai[all]==0.2.12\\\"\""
                ],
                "after": [
                    "-        \"%pip install \\\"camel-ai[all]==0.2.12\\\"\"",
                    "+        \"%pip install \\\"camel-ai[all]==0.2.11\\\"\"",
                    "       ]",
                    "     },",
                    "     {"
                ]
            },
            "docs/get_started/installation.md": {
                "before": [
                    "@@ -60,7 +60,7 @@ conda create --name camel python=3.10",
                    " conda activate camel",
                    " ",
                    " # Clone github repo",
                    "-git clone -b v0.2.12 https://github.com/camel-ai/camel.git"
                ],
                "after": [
                    "-git clone -b v0.2.12 https://github.com/camel-ai/camel.git",
                    "+git clone -b v0.2.11 https://github.com/camel-ai/camel.git",
                    " ",
                    " # Change directory into project directory",
                    " cd camel"
                ]
            },
            "docs/key_modules/loaders.md": {
                "before": [
                    "@@ -340,14 +340,14 @@ response = jina_reader.read_content(\"https://docs.camel-ai.org/\")",
                    " print(response)",
                    " ```",
                    " ```markdown",
                    "->>>Welcome to CAMEL\u2019s documentation! \u2014 CAMEL 0.2.12 documentation"
                ],
                "after": [
                    "- [![Image 1](https://raw.githubusercontent.com/camel-ai/camel/master/misc/logo_light.png) ![Image 2](https://raw.githubusercontent.com/camel-ai/camel/master/misc/logo_light.png)CAMEL 0.2.12](https://docs.camel-ai.org/#)",
                    "+ [![Image 1](https://raw.githubusercontent.com/camel-ai/camel/master/misc/logo_light.png) ![Image 2](https://raw.githubusercontent.com/camel-ai/camel/master/misc/logo_light.png)CAMEL 0.2.11](https://docs.camel-ai.org/#)",
                    " ",
                    " Search Ctrl+K",
                    " "
                ]
            },
            "poetry.lock": {
                "before": [
                    "@@ -2265,13 +2265,13 @@ tracing = [\"opentelemetry-api (>=1.1.0)\"]",
                    " ",
                    " [[package]]",
                    " name = \"google-cloud-vision\"",
                    "-version = \"3.8.1\""
                ],
                "after": [
                    "+    {file = \"google_cloud_vision-3.9.0-py2.py3-none-any.whl\", hash = \"sha256:9acec27ee05bd197f0d89c97e9719712ef245e0c37fd428e6af09a15a082fbef\"},",
                    "+    {file = \"google_cloud_vision-3.9.0.tar.gz\", hash = \"sha256:21226aac9cb4ba45bf89cc2e107aea19e4f78f9736eb1de56837e0c2989fecff\"},",
                    " ]",
                    " ",
                    " [package.dependencies]"
                ]
            },
            "pyproject.toml": {
                "before": [
                    "@@ -4,7 +4,7 @@ build-backend = \"poetry.core.masonry.api\"",
                    " ",
                    " [tool.poetry]",
                    " name = \"camel-ai\"",
                    "-version = \"0.2.12\""
                ],
                "after": [
                    "-version = \"0.2.12\"",
                    "+version = \"0.2.11\"",
                    " authors = [\"CAMEL-AI.org\"]",
                    " description = \"Communicative Agents for AI Society Study\"",
                    " readme = \"README.md\""
                ]
            }
        }
    },
    {
        "instance_id": "camel__camel-1273",
        "title": "[BUG] api_keys_required() is not compatible with the method of directly setting api_key",
        "problem_statement": "[BUG] api_keys_required() is not compatible with the method of directly setting api_key. Required prerequisites\n\n- [X] I have read the documentation <https://camel-ai.github.io/camel/camel.html>.\n- [X] I have searched the [Issue Tracker](https://github.com/camel-ai/camel/issues) and [Discussions](https://github.com/camel-ai/camel/discussions) that this hasn't already been reported. (+1 or comment there if it has.)\n- [ ] Consider asking first in a [Discussion](https://github.com/camel-ai/camel/discussions/new).\n\n### What version of camel are you using?\n\n0.2.10\n\n### System information\n\n3.10.10 (tags/v3.10.10:aad5f6a, Feb  7 2023, 17:20:36) [MSC v.1929 64 bit (AMD64)] win32\r\n\r\n0.2.9\n\n### Problem description\n\n```python\r\nfrom camel.utils import api_keys_required\r\n\r\n\r\nclass DummyClass:\r\n    @api_keys_required(\"DUMMY_TOKEN\")\r\n    def __init__(self, api_key: str):\r\n        self._api_key = api_key\r\n\r\n\r\ndc = DummyClass(api_key=\"xxxxx\")\r\n```\r\n\r\n```bash\r\n$ python test_api_keys.py\r\nTraceback (most recent call last):\r\n  File \"path\\to\\test_api_keys.py\", line 10, in <module>\r\n    dc = DummyClass(api_key=\"xxxxx\")\r\n  File \"path\\to\\camel\\utils\\commons.py\", line 268, in wrapper\r\n    raise ValueError(\r\nValueError: Missing API keys: DUMMY_TOKEN\r\n```\r\n\r\n`api_keys_required()` currently only supports setting the value of `\"DUMMY_TOKEN\"` in the environment variable, but does not support directly calling `DummyClass(api_key=\"xxxx\")`.\r\n\r\nI saw that in the implementation of the decorator, it is detected whether the `_api_key` of the class has a value, but when the decorator is used in `__init__()`, the decorator acts before the `__init__()` call, so it is actually `_api_key` has no value, `(args and getattr(args[0], '_api_key', None))` is always `False`.\r\n\r\nI guess the implementation of this step is actually to be compatible with direct assignment? The parameters passed in will exist in `args[1:]` or `kwargs`.\r\n\r\n```python\r\nfrom camel.utils import api_keys_required\r\n\r\n\r\nclass DummyClass:\r\n    @api_keys_required(\"DUMMY_TOKEN\")\r\n    def __init__(self, api_key: str):\r\n        self._api_key = api_key\r\n\r\n\r\ndc = DummyClass(api_key=\"xxxxx\")\r\n\"\"\"\r\npython examples\\test_api_keys.py\r\nargs=(<__main__.DummyClass object at 0x000001F70381A9B0>,), kwargs={'api_key': 'xxxxx'}\r\n\"\"\"\r\n# or\r\ndc = DummyClass(\"xxxxx\")\r\nargs=(<__main__.DummyClass object at 0x0000020D5C6DA9B0>, 'xxxxx'), kwargs={}\r\n```\r\n\r\n---\r\nI believe the above issues can be easily solved. we need to think about the following issues:\r\n`api_keys_required()` is designed for multiple api_keys, so it is impossible to uniformly determine one `_api_key` to use. If multiple API Keys exist, does it mean it can only use environment variables to assign values?\r\n\r\n---\r\nThe above question is based on my guess that `api_keys_required()` is compatible with the two assignment tokens of environment variables and `__init__()`. If there is any deviation, please clarify and discuss it.\n\n### Reproducible example code\n\n```python\r\nfrom camel.utils import api_keys_required\r\n\r\n\r\nclass DummyClass:\r\n    @api_keys_required(\"DUMMY_TOKEN\")\r\n    def __init__(self, api_key: str):\r\n        self._api_key = api_key\r\n\r\n\r\ndc = DummyClass(api_key=\"xxxxx\")\n\n### Traceback\n\n_No response_\n\n### Expected behavior\n\n_No response_\n\n### Additional context\n\n_No response_",
        "base_commit": "777a8f54e0fccd362d6798b4818d9020732031bc",
        "repo": "repo/camel-1273",
        "patch": {
            "camel/benchmarks/__init__.py": {
                "before": [
                    "@@ -12,7 +12,17 @@",
                    " # limitations under the License.",
                    " # ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========",
                    " ",
                    "+from .apibank import APIBankBenchmark"
                ],
                "after": [
                    "+    \"DefaultGAIARetriever\",",
                    "+    \"NexusBenchmark\",",
                    "+    \"APIBenchBenchmark\",",
                    "+    \"APIBankBenchmark\",",
                    "+]"
                ]
            },
            "camel/benchmarks/apibank.py": {
                "before": [
                    "@@ -0,0 +1,560 @@",
                    "+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========",
                    "+# Licensed under the Apache License, Version 2.0 (the \"License\");",
                    "+# you may not use this file except in compliance with the License.",
                    "+# You may obtain a copy of the License at"
                ],
                "after": [
                    "+Expected output:",
                    "+AI: [AI's utterence]",
                    "+",
                    "+API descriptions:",
                    "+'''"
                ]
            },
            "camel/benchmarks/apibench.py": {
                "before": [
                    "@@ -0,0 +1,496 @@",
                    "+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========",
                    "+# Licensed under the Apache License, Version 2.0 (the \"License\");",
                    "+# you may not use this file except in compliance with the License.",
                    "+# You may obtain a copy of the License at"
                ],
                "after": [
                    "+    except Exception as e:",
                    "+        print(f'Error parsing response: {response}, error: {e}')",
                    "+        return e, False, False",
                    "+",
                    "+    return None, correct, halluncination"
                ]
            },
            "camel/benchmarks/gaia.py": {
                "before": [
                    "@@ -25,8 +25,8 @@",
                    " from tqdm import tqdm",
                    " ",
                    " from camel.agents import ChatAgent",
                    "-from camel.benchmarks import BaseBenchmark"
                ],
                "after": [
                    "+from camel.benchmarks.base import BaseBenchmark",
                    "+from camel.messages import BaseMessage",
                    " from camel.retrievers.auto_retriever import AutoRetriever",
                    " ",
                    " logger = logging.getLogger(__name__)"
                ]
            },
            "camel/benchmarks/nexus.py": {
                "before": [
                    "@@ -0,0 +1,518 @@",
                    "+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========",
                    "+# Licensed under the Apache License, Version 2.0 (the \"License\");",
                    "+# you may not use this file except in compliance with the License.",
                    "+# You may obtain a copy of the License at"
                ],
                "after": [
                    "+",
                    "+    if agent_parsed and gt_parsed:",
                    "+        return agent_parsed == gt_parsed",
                    "+    else:",
                    "+        return False"
                ]
            },
            "camel/toolkits/search_toolkit.py": {
                "before": [
                    "@@ -13,9 +13,10 @@",
                    " # ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========",
                    " import os",
                    " import xml.etree.ElementTree as ET",
                    "-from typing import Any, Dict, List, Optional, TypeAlias, Union"
                ],
                "after": [
                    "             FunctionTool(self.search_wiki),",
                    "+            FunctionTool(self.search_linkup),",
                    "             FunctionTool(self.search_google),",
                    "             FunctionTool(self.search_duckduckgo),",
                    "             FunctionTool(self.query_wolfram_alpha),"
                ]
            },
            "camel/utils/__init__.py": {
                "before": [
                    "@@ -19,6 +19,7 @@",
                    "     check_server_running,",
                    "     create_chunks,",
                    "     dependencies_required,",
                    "+    download_github_subdirectory,"
                ],
                "after": [
                    "     \"handle_http_error\",",
                    "     \"get_pydantic_model\",",
                    "+    \"download_github_subdirectory\",",
                    "     \"generate_prompt_for_structured_output\",",
                    " ]"
                ]
            },
            "camel/utils/commons.py": {
                "before": [
                    "@@ -21,6 +21,7 @@",
                    " import zipfile",
                    " from functools import wraps",
                    " from http import HTTPStatus",
                    "+from pathlib import Path"
                ],
                "after": [
                    "+",
                    "+",
                    " def generate_prompt_for_structured_output(",
                    "     response_format: Optional[Type[BaseModel]],",
                    "     user_message: str,"
                ]
            },
            "examples/benchmarks/apibank.py": {
                "before": [
                    "@@ -0,0 +1,25 @@",
                    "+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========",
                    "+# Licensed under the Apache License, Version 2.0 (the \"License\");",
                    "+# you may not use this file except in compliance with the License.",
                    "+# You may obtain a copy of the License at"
                ],
                "after": [
                    "+    data_dir=\"./APIBankDatasets\", save_to=\"./APIBankResults.jsonl\"",
                    "+)",
                    "+benchmark.download()",
                    "+results = benchmark.run(agent, \"level-1\", api_test_enabled=True)",
                    "+print(results)"
                ]
            },
            "examples/benchmarks/apibench.py": {
                "before": [
                    "@@ -0,0 +1,24 @@",
                    "+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========",
                    "+# Licensed under the Apache License, Version 2.0 (the \"License\");",
                    "+# you may not use this file except in compliance with the License.",
                    "+# You may obtain a copy of the License at"
                ],
                "after": [
                    "+benchmark = APIBenchBenchmark(",
                    "+    data_dir=\"./APIBenchDatasets\", save_to=\"./APIBench.jsonl\"",
                    "+)",
                    "+result = benchmark.run(agent, 'torchhub')",
                    "+print(result)"
                ]
            },
            "examples/benchmarks/nexus.py": {
                "before": [
                    "@@ -0,0 +1,25 @@",
                    "+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========",
                    "+# Licensed under the Apache License, Version 2.0 (the \"License\");",
                    "+# you may not use this file except in compliance with the License.",
                    "+# You may obtain a copy of the License at"
                ],
                "after": [
                    "+    data_dir=\"./NexusDatasets\", save_to=\"./NexusResults.jsonl\"",
                    "+)",
                    "+benchmark.download()",
                    "+results = benchmark.run(agent, \"OTX\")",
                    "+print(results)"
                ]
            },
            "examples/toolkits/search_toolkit.py": {
                "before": [
                    "@@ -12,6 +12,8 @@",
                    " # limitations under the License.",
                    " # ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========",
                    " ",
                    "+from pydantic import BaseModel"
                ],
                "after": [
                    "+awarded the Nobel Prize in Physics include: 1. Marie Curie (1903) 2. Maria ",
                    "+Goeppert-Mayer (1963) 3. Donna Strickland (2018) 4. (4th winner not mentioned ",
                    "+in the provided data) 5. (5th winner not mentioned in the provided data). Less ",
                    "+than 5 women have won the Nobel Prize in Physics out of 225 total laureates.'}",
                    "+\"\"\""
                ]
            },
            "pyproject.toml": {
                "before": [
                    "@@ -57,7 +57,7 @@ sglang = { version = \"^0.4.0\", optional = true }",
                    " transformers = { version = \"^4\", optional = true }",
                    " diffusers = { version = \"^0\", optional = true }",
                    " accelerate = { version = \"^0\", optional = true }",
                    "-datasets = { version = \"^2\", optional = true }"
                ],
                "after": [
                    "+    \"pandas\",",
                    "+    \"tree-sitter-python\",",
                    "+    \"tree-sitter\",",
                    " ]",
                    " ignore_missing_imports = true"
                ]
            },
            "test/benchmarks/test_apibank_benchmark.py": {
                "before": [
                    "@@ -0,0 +1,126 @@",
                    "+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========",
                    "+# Licensed under the Apache License, Version 2.0 (the \"License\");",
                    "+# you may not use this file except in compliance with the License.",
                    "+# You may obtain a copy of the License at"
                ],
                "after": [
                    "+        # Verify that the results were written correctly to the save_to file",
                    "+        written_data = json.loads(mock_file().write.call_args[0][0])",
                    "+        print(MOCK_SAMPLE)",
                    "+        assert written_data[\"Model_output\"] == \"huggingface_api_output_example\"",
                    "+        assert written_data[\"Correct\"]"
                ]
            },
            "test/benchmarks/test_apibench_benchmark.py": {
                "before": [
                    "@@ -0,0 +1,121 @@",
                    "+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========",
                    "+# Licensed under the Apache License, Version 2.0 (the \"License\");",
                    "+# you may not use this file except in compliance with the License.",
                    "+# You may obtain a copy of the License at"
                ],
                "after": [
                    "+        )",
                    "+        assert written_data[\"agent_response\"] == \"HuggingFace API call here\"",
                    "+        assert written_data[\"correct\"]",
                    "+        assert not written_data[\"hallucination\"]",
                    "+        assert written_data[\"error\"] is None"
                ]
            },
            "test/benchmarks/test_nexus_benchmark.py": {
                "before": [
                    "@@ -0,0 +1,86 @@",
                    "+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========",
                    "+# Licensed under the Apache License, Version 2.0 (the \"License\");",
                    "+# you may not use this file except in compliance with the License.",
                    "+# You may obtain a copy of the License at"
                ],
                "after": [
                    "+            written_data[\"ground_truth_call\"]",
                    "+            == \"nvdlib.query('CVE-2021-12345')\"",
                    "+        )",
                    "+        assert written_data[\"result\"]",
                    "+        assert written_data[\"error\"] is None"
                ]
            },
            "test/toolkits/test_search_functions.py": {
                "before": [
                    "@@ -323,3 +323,82 @@ def test_get_wolframalpha_step_by_step_solution(mock_get):",
                    "     assert (",
                    "         result == expected_steps",
                    "     ), f\"Expected {expected_steps}, but got {result}\"",
                    "+"
                ],
                "after": [
                    "+",
                    "+        with patch.dict(os.environ, {'LINKUP_API_KEY': 'test_key'}):",
                    "+            result = search_toolkit.search_linkup(query=\"test query\")",
                    "+",
                    "+        assert result == {\"error\": \"An unexpected error occurred: Test error\"}"
                ]
            }
        }
    },
    {
        "instance_id": "camel__camel-88",
        "title": "Fix hard coded `self.update_messages(output_messages[0])`",
        "problem_statement": "Fix hard coded `self.update_messages(output_messages[0])`. https://github.com/lightaime/camel/blob/ba3ec7603ebc735600e32379df235e627c4141c8/camel/agents/chat_agent.py#L93",
        "base_commit": "9a1f0d700b0d21536cee358f0e7c878c7fa256fd",
        "repo": "repo/camel-88",
        "patch": {
            "camel/agents/chat_agent.py": {
                "before": [
                    "@@ -10,6 +10,18 @@",
                    " ",
                    " ",
                    " class ChatAgent:",
                    "+    r\"\"\"Class for managing conversations of CAMEL Chat Agents."
                ],
                "after": [
                    "+",
                    "+        Returns:",
                    "+            str: The string representation of the :obj:`ChatAgent`.",
                    "+        \"\"\"",
                    "         return f\"ChatAgent({self.role_name}, {self.role_type}, {self.model})\""
                ]
            },
            "camel/agents/role_playing.py": {
                "before": [
                    "@@ -142,7 +142,6 @@ def init_chat(self) -> Tuple[AssistantChatMessage, List[ChatMessage]]:",
                    "             content=(f\"{self.user_sys_msg.content}. \"",
                    "                      \"Now start to give me introductions one by one. \"",
                    "                      \"Only reply with Instruction and Input.\"))",
                    "-        assistant_msg.role = \"user\""
                ],
                "after": [
                    "         assistant_msg = self.process_messages(assistant_msgs)",
                    "+        self.assistant_agent.update_messages(assistant_msg)",
                    " ",
                    "         return (",
                    "             (assistant_msg, assistant_terminated, assistant_info),"
                ]
            },
            "camel/human.py": {
                "before": [
                    "@@ -63,14 +63,12 @@ def get_input(self) -> str:",
                    "             human_input = input(",
                    "                 self.menu_color +",
                    "                 f\"Please enter your choice ([1-{len(self.options_dict)}]): \")",
                    "+            print(\"\\n\")"
                ],
                "after": [
                    "-            self.menu_color + \"\\n> Your choice is:\\n\\n\"",
                    "-            f\"\\x1b[3m{human_input}: {self.options_dict[human_input]}\\x1b[0m\")",
                    "         return human_input",
                    " ",
                    "     def parse_input(self, human_input: str,"
                ]
            },
            "camel/messages.py": {
                "before": [
                    "@@ -12,13 +12,62 @@",
                    " ",
                    " @dataclass",
                    " class BaseMessage:",
                    "+    r\"\"\"Base class for message objects used in CAMEL chat system."
                ],
                "after": [
                    "+        content (str): The content of the message. (default: :obj:`\"\"`)",
                    "+    \"\"\"",
                    "     role_name: str",
                    "     role_type: RoleType = RoleType.USER",
                    "     meta_dict: Dict[str, str] = None"
                ]
            },
            "examples/ai_society/role_playing_with_human.py": {
                "before": [
                    "@@ -6,13 +6,13 @@",
                    " ",
                    " ",
                    " def main() -> None:",
                    "-    task_prompt = \"Develop a trading bot for the stock market\""
                ],
                "after": [
                    "+        \"AGI\",",
                    "+        \"Writer\",",
                    "         task_prompt=task_prompt,",
                    "         with_task_specify=True,",
                    "         with_human_in_the_loop=True,"
                ]
            },
            "examples/code/role_playing_multiprocess.py": {
                "before": [
                    "@@ -29,7 +29,6 @@ def init_chat(",
                    "         content=(f\"{user_sys_msg.content}. \"",
                    "                  \"Now start to give me instructions one by one. \"",
                    "                  \"Only reply with Instruction and Input.\"))",
                    "-    assistant_msg.role = \"user\""
                ],
                "after": [
                    "         print(f\"Assistant:\\n{assistant_msg.content}\\n\")",
                    "-        assistant_msg.role = \"user\"",
                    " ",
                    "         # Condition 3: Break if user does not give instruction",
                    "         if user_no_instruct_word not in user_msg.content:"
                ]
            },
            "test/test_messages.py": {
                "before": [
                    "@@ -0,0 +1,127 @@",
                    "+import pytest",
                    "+",
                    "+from camel.messages import BaseMessage, SystemMessage",
                    "+from camel.typing import RoleType"
                ],
                "after": [
                    "+        \"role_type\": \"ASSISTANT\",",
                    "+        \"role\": \"system\",",
                    "+        \"content\": \"test system message\",",
                    "+    }",
                    "+    assert system_message.to_dict() == expected_dict"
                ]
            }
        }
    },
    {
        "instance_id": "camel__camel-1614",
        "title": "[BUG] Remove <think> in request to model",
        "problem_statement": "[BUG] Remove <think> in request to model. Required prerequisites:- [x] I have read the documentation <https://camel-ai.github.io/camel/camel.html>.\n- [x] I have searched the [Issue Tracker](https://github.com/camel-ai/camel/issues) and [Discussions](https://github.com/camel-ai/camel/discussions) that this hasn't already been reported. (+1 or comment there if it has.)\n- [ ] Consider asking first in a [Discussion](https://github.com/camel-ai/camel/discussions/new).\n\n### What version of camel are you using?\n\n0.2.21\n\n### System information\n\n/\n\n### Problem description\n\nfor various model platforms support deepseek r1, we need to remove the <think> content in request to model \n\n### Reproducible example code\n\nThe Python snippets:\n\n```python\n\n```\n\nCommand lines:\n\n```bash\n\n```\n\nExtra dependencies:\n\n```text\n\n```\n\nSteps to reproduce:\n\n1.\n2.\n3.\n\n\n### Traceback\n\n```pytb\n\n```\n\n### Expected behavior\n\n_No response_\n\n### Additional context\n\n_No response_",
        "base_commit": "5d1296ca5f892274fd970807b46dfdb8cfbebb5d",
        "repo": "repo/camel-1614",
        "patch": {
            ".github/ISSUE_TEMPLATE/bug_report.yml": {
                "before": [
                    "@@ -26,7 +26,7 @@ body:",
                    "     attributes:",
                    "       label: What version of camel are you using?",
                    "       description: Run command `python3 -c 'print(__import__(\"camel\").__version__)'` in your shell and paste the output here.",
                    "-      placeholder: E.g., 0.2.21"
                ],
                "after": [
                    "-      placeholder: E.g., 0.2.21",
                    "+      placeholder: E.g., 0.2.22",
                    "     validations:",
                    "       required: true",
                    " "
                ]
            },
            "camel/__init__.py": {
                "before": [
                    "@@ -14,7 +14,7 @@",
                    " ",
                    " from camel.logger import disable_logging, enable_logging, set_log_level",
                    " ",
                    "-__version__ = '0.2.21'"
                ],
                "after": [
                    "-__version__ = '0.2.21'",
                    "+__version__ = '0.2.22'",
                    " ",
                    " __all__ = [",
                    "     '__version__',"
                ]
            },
            "docs/conf.py": {
                "before": [
                    "@@ -27,7 +27,7 @@",
                    " project = 'CAMEL'",
                    " copyright = '2024, CAMEL-AI.org'",
                    " author = 'CAMEL-AI.org'",
                    "-release = '0.2.21'"
                ],
                "after": [
                    "-release = '0.2.21'",
                    "+release = '0.2.22'",
                    " ",
                    " html_favicon = (",
                    "     'https://raw.githubusercontent.com/camel-ai/camel/master/misc/favicon.png'"
                ]
            },
            "docs/get_started/installation.md": {
                "before": [
                    "@@ -60,7 +60,7 @@ conda create --name camel python=3.10",
                    " conda activate camel",
                    " ",
                    " # Clone github repo",
                    "-git clone -b v0.2.21 https://github.com/camel-ai/camel.git"
                ],
                "after": [
                    "-git clone -b v0.2.21 https://github.com/camel-ai/camel.git",
                    "+git clone -b v0.2.22 https://github.com/camel-ai/camel.git",
                    " ",
                    " # Change directory into project directory",
                    " cd camel"
                ]
            },
            "docs/key_modules/loaders.md": {
                "before": [
                    "@@ -340,14 +340,14 @@ response = jina_reader.read_content(\"https://docs.camel-ai.org/\")",
                    " print(response)",
                    " ```",
                    " ```markdown",
                    "->>>Welcome to CAMEL\u2019s documentation! \u2014 CAMEL 0.2.21 documentation"
                ],
                "after": [
                    "- [![Image 1](https://raw.githubusercontent.com/camel-ai/camel/master/misc/logo_light.png) ![Image 2](https://raw.githubusercontent.com/camel-ai/camel/master/misc/logo_light.png)CAMEL 0.2.21](https://docs.camel-ai.org/#)",
                    "+ [![Image 1](https://raw.githubusercontent.com/camel-ai/camel/master/misc/logo_light.png) ![Image 2](https://raw.githubusercontent.com/camel-ai/camel/master/misc/logo_light.png)CAMEL 0.2.22](https://docs.camel-ai.org/#)",
                    " ",
                    " Search Ctrl+K",
                    " "
                ]
            },
            "pyproject.toml": {
                "before": [
                    "@@ -4,7 +4,7 @@ build-backend = \"poetry.core.masonry.api\"",
                    " ",
                    " [tool.poetry]",
                    " name = \"camel-ai\"",
                    "-version = \"0.2.21\""
                ],
                "after": [
                    "-version = \"0.2.21\"",
                    "+version = \"0.2.22\"",
                    " authors = [\"CAMEL-AI.org\"]",
                    " description = \"Communicative Agents for AI Society Study\"",
                    " readme = \"README.md\""
                ]
            }
        }
    },
    {
        "instance_id": "autogen__autogen-5012",
        "title": "Hello World code sample in README.md is not properly awaited",
        "problem_statement": "### What happened?\n\nThe Hello World code sample provided in the README.md file of the repository does not properly await the asynchronous agent.run() method. This results in a RuntimeWarning and improper execution of the sample code.\n\n```\n<coroutine object BaseChatAgent.run at 0x75adf0cbb2e0>  \n/home/ranuga/Jobs/Altrium/Altrium-PD/Learning/AutoGen/basic.py:7: RuntimeWarning: coroutine 'BaseChatAgent.run' was never awaited  \n  print(agent.run(task=\"Say 'Hello World!'\"))  \nRuntimeWarning: Enable tracemalloc to get the object allocation traceback  \n```\n\n### What did you expect to happen?\n\nThe code sample should execute correctly without raising a warning, and it should print the result of the task Say 'Hello World!'.\n\n\n\n### How can we reproduce it (as minimally and precisely as possible)?\n\n1. Clone the repository and follow the setup instructions in the README.md.\n2. Copy the Hello World code sample from the README.md.\n3. Run the code without modifying it.\n\n### AutoGen version\n\n0.4.0\n\n### Which package was this bug in\n\nCore\n\n### Model used\n\ngpt-4o\n\n### Python version\n\n3.11.7\n\n### Operating system\n\nUbuntu 24.04\n\n### Any additional info you think would be helpful for fixing this bug\n\n_No response_",
        "base_commit": "9f351c50fff0043737990304a72a2b85fd9a1f2b",
        "repo": "repo/autogen-5012",
        "patch": {
            "python/packages/autogen-core/docs/src/index.md": {
                "before": [
                    "@@ -1,122 +1,195 @@",
                    "+---",
                    "+myst:",
                    "+  html_meta:",
                    "+    \"description lang=en\": |"
                ],
                "after": [
                    "+user-guide/core-user-guide/index",
                    "+user-guide/extensions-user-guide/index",
                    "+Studio <user-guide/autogenstudio-user-guide/index>",
                    "+reference/index",
                    "+```"
                ]
            }
        }
    },
    {
        "instance_id": "autogen__autogen-5007",
        "title": "Missing tiktoken dependency in AutoGen Studio",
        "problem_statement": "Missing tiktoken dependency in AutoGen Studio. What happened?\n\nCloning main in a devcontainer, trying to launch, results in the following error due to missing dependency `tiktoken`:\n \n```bash\n$ autogenstudio ui --port 8081\nTraceback (most recent call last):\n  File \"/home/vscode/.local/bin/autogenstudio\", line 5, in <module>\n    from autogenstudio.cli import run\n  File \"/workspaces/autogen/python/packages/autogen-studio/autogenstudio/__init__.py\", line 1, in <module>\n    from .database.db_manager import DatabaseManager\n  File \"/workspaces/autogen/python/packages/autogen-studio/autogenstudio/database/__init__.py\", line 1, in <module>\n    from .component_factory import Component, ComponentFactory\n  File \"/workspaces/autogen/python/packages/autogen-studio/autogenstudio/database/component_factory.py\", line 25, in <module>\n    from autogen_ext.models.openai import AzureOpenAIChatCompletionClient, OpenAIChatCompletionClient\n  File \"/home/vscode/.local/lib/python3.12/site-packages/autogen_ext/models/openai/__init__.py\", line 1, in <module>\n    from ._openai_client import AzureOpenAIChatCompletionClient, BaseOpenAIChatCompletionClient, OpenAIChatCompletionClient\n  File \"/home/vscode/.local/lib/python3.12/site-packages/autogen_ext/models/openai/_openai_client.py\", line 23, in <module>\n    import tiktoken\nModuleNotFoundError: No module named 'tiktoken'\n```\n\n### What did you expect to happen?\n\nAutoGen studio to launch\n\n### How can we reproduce it (as minimally and precisely as possible)?\n\n1. Clone main in a dev container based on `mcr.microsoft.com/devcontainers/python:1-3.12-bullseye`\n2. Run\n  ```bash\n    $ autogenstudio ui --port 8081\n  ```\n\n### AutoGen version\n\n115fefa132116f62c428e4dfe43d8f23f71fe306\n\n### Which package was this bug in\n\nAutoGen Studio\n\n### Model used\n\n_No response_\n\n### Python version\n\n3.12\n\n### Operating system\n\nDebian GNU/Linux 11 (bullseye)\n\n### Any additional info you think would be helpful for fixing this bug\n\nPR coming shortly",
        "base_commit": "466848ac6517ff21f6555f40d094b8bd02b98602",
        "repo": "repo/autogen-5007",
        "patch": {
            "python/packages/autogen-core/src/autogen_core/models/_types.py": {
                "before": [
                    "@@ -52,7 +52,7 @@ class RequestUsage:",
                    "     completion_tokens: int",
                    " ",
                    " ",
                    "-FinishReasons = Literal[\"stop\", \"length\", \"function_calls\", \"content_filter\"]"
                ],
                "after": [
                    "-FinishReasons = Literal[\"stop\", \"length\", \"function_calls\", \"content_filter\"]",
                    "+FinishReasons = Literal[\"stop\", \"length\", \"function_calls\", \"content_filter\", \"unknown\"]",
                    " ",
                    " ",
                    " @dataclass"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/models/openai/_openai_client.py": {
                "before": [
                    "@@ -30,6 +30,7 @@",
                    "     Image,",
                    "     MessageHandlerContext,",
                    " )",
                    "+from autogen_core.models import FinishReasons"
                ],
                "after": [
                    "-            finish_reason=stop_reason,  # type: ignore",
                    "+            finish_reason=normalize_stop_reason(stop_reason),",
                    "             content=content,",
                    "             usage=usage,",
                    "             cached=False,"
                ]
            }
        }
    },
    {
        "instance_id": "autogen__autogen-4785",
        "title": "KeyError with OpenAI MODEL_CAPABILITIES",
        "problem_statement": "KeyError with OpenAI MODEL_CAPABILITIES. What happened?\n\nLocation: https://github.com/microsoft/autogen/blob/main/python/packages/autogen-ext/src/autogen_ext/models/openai/_openai_client.py\n\nLine 131 in the above location raises a KeyError when you provide a model that is not in the MODEL_CAPABILITIES dict (eg. 'llama3-8b-8192').\n\nThis is a big problem because the OpenAIChatCompletionClient should be usable with other providers.\n\nA couple changes of are required:\n\n1. Check that the model is in MODEL_CAPABILITIES. \n2. If not, then may return a default dict. Some like {'function_calling': False, 'json_output': False, 'vision': False}.\n\nHowever, I suggest ignoring model capabilities entirely and let developers make sure that models that they use have the capabilities that are required. From there, you could just let the AsyncOpenAI client raise an exception.\n\n### What did you expect to happen?\n\nI expected the client to be unaware of the model that is set, like in the official openai sdk.\n\n### How can we reproduce it (as minimally and precisely as possible)?\n\n`\nfrom autogen_ext.models.openai import OpenAIChatCompletionClient\n\ngroq_model_client = OpenAIChatCompletionClient(\n\tmodel='llama3-groq-70b-8192-tool-use-preview',\n\tbase_url='https://api.groq.com/openai/v1',\n\tapi_key='<GROQ_API_KEY>'\n)\n# KeyError: 'llama3-groq-70b-8192-tool-use-preview'\n`\n\n### AutoGen version\n\n0.4.0.dev9\n\n### Which package was this bug in\n\nExtensions\n\n### Model used\n\nllama3-groq-70b-8192-tool-use-preview (Groq)\n\n### Python version\n\n3.12.5\n\n### Operating system\n\nWindows 11\n\n### Any additional info you think would be helpful for fixing this bug\n\nA couple changes of are required:\n\n1. Check that the model is in MODEL_CAPABILITIES. \n2. If not, then may return a default dict. Some like {'function_calling': False, 'json_output': False, 'vision': False}.\n\nHowever, I suggest ignoring model capabilities entirely and let developers make sure that models that they use have the capabilities that are required. From there, you could just let the AsyncOpenAI client raise an exception.",
        "base_commit": "d2537abbabced23d5bc32b4dd827f8c562403e4f",
        "repo": "repo/autogen-4785",
        "patch": {
            "python/packages/autogen-ext/src/autogen_ext/models/openai/_openai_client.py": {
                "before": [
                    "@@ -360,7 +360,10 @@ def __init__(",
                    "     ):",
                    "         self._client = client",
                    "         if model_capabilities is None:",
                    "-            self._model_capabilities = _model_info.get_capabilities(create_args[\"model\"])"
                ],
                "after": [
                    "+            except KeyError as err:",
                    "+                raise ValueError(\"model_capabilities is required when model name is not a valid OpenAI model\") from err",
                    "         else:",
                    "             self._model_capabilities = model_capabilities",
                    " "
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/models/openai/config/__init__.py": {
                "before": [
                    "@@ -2,7 +2,7 @@",
                    " ",
                    " from autogen_core import ComponentModel",
                    " from autogen_core.models import ModelCapabilities",
                    "-from pydantic import BaseModel"
                ],
                "after": [
                    "+    model_config = ConfigDict(protected_namespaces=())",
                    "+",
                    "     model: str",
                    "     api_key: str | None = None",
                    "     timeout: float | None = None"
                ]
            },
            "python/packages/autogen-ext/tests/models/test_openai_model_client.py": {
                "before": [
                    "@@ -137,6 +137,24 @@ async def test_openai_chat_completion_client() -> None:",
                    "     assert client",
                    " ",
                    " ",
                    "+@pytest.mark.asyncio"
                ],
                "after": [
                    "+",
                    "+",
                    " @pytest.mark.asyncio",
                    " async def test_azure_openai_chat_completion_client() -> None:",
                    "     client = AzureOpenAIChatCompletionClient("
                ]
            }
        }
    },
    {
        "instance_id": "autogen__autogen-4733",
        "title": "code executor util classes(Alias, ImportFromModule) not hashable",
        "problem_statement": "code executor util classes(Alias, ImportFromModule) not hashable. What happened?\n\nWhen using user defined functions for code executor with `Alias`, `ImportFromModule`, error emerges.\n\nIn `build_python_functions_file` function uses Set[Import = Union[str, Alias, ImportFromModule]], \n\nautogen_core.code_executor._func_with_reqs.py\n```python\nImport = Union[str, ImportFromModule, Alias]\n...\n\ndef build_python_functions_file(\n    funcs: Sequence[Union[FunctionWithRequirements[Any, P], Callable[..., Any], FunctionWithRequirementsStr]],\n) -> str:\n    \"\"\":meta private:\"\"\"\n    # First collect all global imports\n    global_imports: Set[Import] = set()\n    for func in funcs:\n        if isinstance(func, (FunctionWithRequirements, FunctionWithRequirementsStr)):\n            global_imports.update(func.global_imports)\n\n    ...\n```\n\nAlias and ImportFromModule cannot be updated to set because they are not hashable.\n\n### What did you expect to happen?\n\nuser defined functions in code executor does not support Alias, ImportModuleFrom case\n\n### How can we reproduce it (as minimally and precisely as possible)?\n\nexample 1\n```python\nfrom autogen_core.code_executor import with_requirements, FunctionWithRequirements, Alias\nfrom autogen_core.code_executor._func_with_reqs import build_python_functions_file\n\nimport pandas as pd\n\n@with_requirements(python_packages=[\"pandas\"], global_imports=[Alias(\"pandas\", \"pd\")])\ndef template_function():\n    return pd.Series([1, 2])\n\nfunctions_module = build_python_functions_file([template_function])\n```\n\nthis code emerges TypeError\n```\nTypeError: unhashable type: 'Alias'\n```\n\nexample 2\n```python\nfrom autogen_core.code_executor import with_requirements, FunctionWithRequirements, ImportFromModule\nfrom autogen_core.code_executor._func_with_reqs import build_python_functions_file\n\nfrom pandas import DataFrame, concat\n\n@with_requirements(python_packages=[\"pandas\"], global_imports=[ImportFromModule(\"pandas\", [\"DataFrame\", \"concat\"])])\ndef template_function():\n    data1 = {\n        \"name\": [\"John\", \"Anna\"],\n        \"location\": [\"New York\", \"Paris\"],\n        \"age\": [24, 13],\n    }\n    data2 = {\n        \"name\": [\"Peter\", \"Linda\"],\n        \"location\": [\"Berlin\", \"London\"],\n        \"age\": [53, 33],\n    }\n    df1 = DataFrame.from_dict(data1)\n    df2 = DataFrame.from_dict(data2)\n    return concat([df1, df2])\n\nfunctions_module = build_python_functions_file([template_function])\n```\n\nthis code also emerges TypeError\n```\nTypeError: unhashable type: 'ImportFromModule'\n```\n\n### AutoGen version\n\n0.4.0dev11\n\n### Which package was this bug in\n\nCore\n\n### Model used\n\nNone\n\n### Python version\n\n_No response_\n\n### Operating system\n\n_No response_\n\n### Any additional info you think would be helpful for fixing this bug\n\n_No response_",
        "base_commit": "dec4c45cec10fb5a548639926ef1d062e1ac9599",
        "repo": "repo/autogen-4733",
        "patch": {
            "README.md": {
                "before": [
                    "@@ -12,11 +12,13 @@",
                    " ",
                    " > [!IMPORTANT]",
                    " >",
                    "+> - (12/11/24) We have created a new Discord server for the AutoGen community. Join us at [aka.ms/autogen-discord](https://aka.ms/autogen-discord)."
                ],
                "after": [
                    "-We are unable to use Discord for project discussions. Therefore, we request that all discussions take place on <https://github.com/microsoft/autogen/discussions/> going forward.",
                    "+We are unable to use the old Discord for project discussions, many of the maintainers no longer have viewing or posting rights there. Therefore, we request that all discussions take place on <https://github.com/microsoft/autogen/discussions/>  or the [new discord server](https://aka.ms/autogen-discord).",
                    " ",
                    " ### What about forks?",
                    " "
                ]
            },
            "dotnet/AutoGen.sln": {
                "before": [
                    "@@ -78,9 +78,7 @@ Project(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution",
                    " \t\tspelling.dic = spelling.dic",
                    " \tEndProjectSection",
                    " EndProject",
                    "-Project(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Microsoft.AutoGen.Agents\", \"src\\Microsoft.AutoGen\\Agents\\Microsoft.AutoGen.Agents.csproj\", \"{FD87BD33-4616-460B-AC85-A412BA08BB78}\""
                ],
                "after": [
                    "+\t\t{3892C83E-7F5D-41DF-A88C-4854EAD38856} = {18BF8DD7-0585-48BF-8F97-AD333080CE06}",
                    "+\t\t{4CB42139-DEE4-40B9-AA81-1E4CCAA2F338} = {18BF8DD7-0585-48BF-8F97-AD333080CE06}",
                    " \tEndGlobalSection",
                    " \tGlobalSection(ExtensibilityGlobals) = postSolution",
                    " \t\tSolutionGuid = {93384647-528D-46C8-922C-8DB36A382F0B}"
                ]
            },
            "dotnet/Directory.Packages.props": {
                "before": [
                    "@@ -72,6 +72,7 @@",
                    "       <PrivateAssets>all</PrivateAssets>",
                    "     </PackageVersion>",
                    "     <PackageVersion Include=\"Microsoft.Orleans.Core.Abstractions\" Version=\"$(MicrosoftOrleans)\" />",
                    "+    <PackageVersion Include=\"Microsoft.Orleans.Persistence.Memory\" Version=\"$(MicrosoftOrleans)\" />"
                ],
                "after": [
                    "     <PackageVersion Include=\"Microsoft.Orleans.Core.Abstractions\" Version=\"$(MicrosoftOrleans)\" />",
                    "+    <PackageVersion Include=\"Microsoft.Orleans.Persistence.Memory\" Version=\"$(MicrosoftOrleans)\" />",
                    "     <PackageVersion Include=\"Microsoft.Orleans.Persistence.Cosmos\" Version=\"$(MicrosoftOrleans)\" />",
                    "     <PackageVersion Include=\"Microsoft.Orleans.Reminders\" Version=\"$(MicrosoftOrleans)\" />",
                    "     <PackageVersion Include=\"Microsoft.Orleans.Reminders.Cosmos\" Version=\"$(MicrosoftOrleans)\" />"
                ]
            },
            "dotnet/samples/Hello/Backend/Backend.csproj": {
                "before": [
                    "@@ -1,15 +0,0 @@",
                    "-<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
                    "-  <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Agents\\Microsoft.AutoGen.Agents.csproj\" />",
                    "-  </ItemGroup>"
                ],
                "after": [
                    "-",
                    "-  <ItemGroup>",
                    "-    <PackageReference Include=\"Microsoft.Extensions.Hosting\" />",
                    "-  </ItemGroup>",
                    "-</Project>"
                ]
            },
            "dotnet/samples/Hello/Backend/Program.cs": {
                "before": [
                    "@@ -1,5 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// Program.cs",
                    "-",
                    "-var app = await Microsoft.AutoGen.Agents.Host.StartAsync(local: false, useGrpc: true);"
                ],
                "after": [
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// Program.cs",
                    "-",
                    "-var app = await Microsoft.AutoGen.Agents.Host.StartAsync(local: false, useGrpc: true);",
                    "-await app.WaitForShutdownAsync();"
                ]
            },
            "dotnet/samples/Hello/Backend/README.md": {
                "before": [
                    "@@ -1,12 +0,0 @@",
                    "-# Backend Example",
                    "-",
                    "-This example demonstrates how to create a simple backend service for the agent runtime using ASP.NET Core.",
                    "-"
                ],
                "after": [
                    "-dotnet run",
                    "-```",
                    "-",
                    "-Or you can run it using Visual Studio Code by pressing `F5`.",
                    "-"
                ]
            },
            "dotnet/samples/Hello/Hello.AppHost/Hello.AppHost.csproj": {
                "before": [
                    "@@ -18,7 +18,7 @@",
                    "   </ItemGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\Backend\\Backend.csproj\" />"
                ],
                "after": [
                    "-    <ProjectReference Include=\"..\\Backend\\Backend.csproj\" />",
                    "+    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/AgentHost/Microsoft.Autogen.AgentHost.csproj\" />",
                    "     <ProjectReference Include=\"..\\HelloAgent\\HelloAgent.csproj\" />",
                    "   </ItemGroup>",
                    " </Project>"
                ]
            },
            "dotnet/samples/Hello/Hello.AppHost/Program.cs": {
                "before": [
                    "@@ -4,7 +4,7 @@",
                    " using Microsoft.Extensions.Hosting;",
                    " ",
                    " var builder = DistributedApplication.CreateBuilder(args);",
                    "-var backend = builder.AddProject<Projects.Backend>(\"backend\").WithExternalHttpEndpoints();"
                ],
                "after": [
                    "-var backend = builder.AddProject<Projects.Backend>(\"backend\").WithExternalHttpEndpoints();",
                    "+var backend = builder.AddProject<Projects.Microsoft_Autogen_AgentHost>(\"backend\").WithExternalHttpEndpoints();",
                    " var client = builder.AddProject<Projects.HelloAgent>(\"HelloAgentsDotNET\")",
                    "     .WithReference(backend)",
                    "     .WithEnvironment(\"AGENT_HOST\", backend.GetEndpoint(\"https\"))"
                ]
            },
            "dotnet/samples/Hello/Hello.AppHost/appsettings.Development.json": {
                "before": [
                    "@@ -2,7 +2,8 @@",
                    "   \"Logging\": {",
                    "     \"LogLevel\": {",
                    "       \"Default\": \"Information\",",
                    "-      \"Microsoft.AspNetCore\": \"Warning\""
                ],
                "after": [
                    "+      \"Microsoft.AspNetCore\": \"Warning\",",
                    "+      \"Aspire.Hosting.ApplicationModel.ResourceNotificationService\": \"Debug\"",
                    "     }",
                    "   }",
                    " }"
                ]
            },
            "dotnet/samples/Hello/HelloAIAgents/HelloAIAgent.cs": {
                "before": [
                    "@@ -1,8 +1,8 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // HelloAIAgent.cs",
                    " ",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "+using Microsoft.AutoGen.Contracts;",
                    "+using Microsoft.AutoGen.Core;",
                    " using Microsoft.Extensions.AI;",
                    " ",
                    " namespace Hello;"
                ]
            },
            "dotnet/samples/Hello/HelloAIAgents/HelloAIAgents.csproj": {
                "before": [
                    "@@ -11,8 +11,9 @@",
                    "   </ItemGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Abstractions\\Microsoft.AutoGen.Abstractions.csproj\" />"
                ],
                "after": [
                    "+    <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Contracts\\Microsoft.AutoGen.Contracts.csproj\" />",
                    "+    <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Core\\Microsoft.AutoGen.Core.csproj\" />",
                    "     <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Extensions\\MEAI\\Microsoft.AutoGen.Extensions.MEAI.csproj\" />",
                    "   </ItemGroup>",
                    " </Project>"
                ]
            },
            "dotnet/samples/Hello/HelloAIAgents/Program.cs": {
                "before": [
                    "@@ -2,8 +2,9 @@",
                    " // Program.cs",
                    " ",
                    " using Hello;",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "+using Microsoft.AutoGen.Contracts;",
                    "+using Microsoft.AutoGen.Core;",
                    " ",
                    " // send a message to the agent",
                    " var builder = WebApplication.CreateBuilder();"
                ]
            },
            "dotnet/samples/Hello/HelloAgent/HelloAgent.csproj": {
                "before": [
                    "@@ -15,7 +15,8 @@",
                    "   </ItemGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Abstractions\\Microsoft.AutoGen.Abstractions.csproj\" />"
                ],
                "after": [
                    "     <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Agents\\Microsoft.AutoGen.Agents.csproj\" />",
                    "+    <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Contracts\\Microsoft.AutoGen.Contracts.csproj\" />",
                    "+    <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Core\\Microsoft.AutoGen.Core.csproj\" />",
                    "   </ItemGroup>",
                    " </Project>"
                ]
            },
            "dotnet/samples/Hello/HelloAgent/Program.cs": {
                "before": [
                    "@@ -1,8 +1,8 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // Program.cs",
                    "-",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-        [FromKeyedServices(\"EventTypes\")] EventTypes typeRegistry) : AgentBase(",
                    "+        [FromKeyedServices(\"EventTypes\")] EventTypes typeRegistry) : Agent(",
                    "             context,",
                    "             typeRegistry),",
                    "             ISayHello,"
                ]
            },
            "dotnet/samples/Hello/HelloAgent/README.md": {
                "before": [
                    "@@ -38,7 +38,7 @@ graph LR;",
                    " ",
                    " The heart of an autogen application are the event handlers. Agents select a ```TopicSubscription``` to listen for events on a specific topic. When an event is received, the agent's event handler is called with the event data.",
                    " ",
                    "-Within that event handler you may optionally *emit* new events, which are then sent to the event bus for other agents to process. The EventTypes are declared gRPC ProtoBuf messages that are used to define the schema of the event.  The default protos are available via the ```Microsoft.AutoGen.Abstractions;``` namespace and are defined in [autogen/protos](/autogen/protos). The EventTypes are registered in the agent's constructor using the ```IHandle``` interface."
                ],
                "after": [
                    "-Within that event handler you may optionally *emit* new events, which are then sent to the event bus for other agents to process. The EventTypes are declared gRPC ProtoBuf messages that are used to define the schema of the event.  The default protos are available via the ```Microsoft.AutoGen.Abstractions;``` namespace and are defined in [autogen/protos](/autogen/protos). The EventTypes are registered in the agent's constructor using the ```IHandle``` interface.",
                    "+Within that event handler you may optionally *emit* new events, which are then sent to the event bus for other agents to process. The EventTypes are declared gRPC ProtoBuf messages that are used to define the schema of the event.  The default protos are available via the ```Microsoft.AutoGen.Contracts;``` namespace and are defined in [autogen/protos](/autogen/protos). The EventTypes are registered in the agent's constructor using the ```IHandle``` interface.",
                    " ",
                    " ```csharp",
                    " TopicSubscription(\"HelloAgents\")]"
                ]
            },
            "dotnet/samples/Hello/HelloAgentState/HelloAgentState.csproj": {
                "before": [
                    "@@ -12,7 +12,8 @@",
                    "   </ItemGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Abstractions\\Microsoft.AutoGen.Abstractions.csproj\" />"
                ],
                "after": [
                    "     <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Agents\\Microsoft.AutoGen.Agents.csproj\" />",
                    "+    <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Contracts\\Microsoft.AutoGen.Contracts.csproj\" />",
                    "+    <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Core\\Microsoft.AutoGen.Core.csproj\" />",
                    "   </ItemGroup>",
                    " </Project>"
                ]
            },
            "dotnet/samples/Hello/HelloAgentState/Program.cs": {
                "before": [
                    "@@ -2,8 +2,9 @@",
                    " // Program.cs",
                    " ",
                    " using System.Text.Json;",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-        [FromKeyedServices(\"EventTypes\")] EventTypes typeRegistry) : AgentBase(",
                    "+        [FromKeyedServices(\"EventTypes\")] EventTypes typeRegistry) : Agent(",
                    "             context,",
                    "             typeRegistry),",
                    "             IHandleConsole,"
                ]
            },
            "dotnet/samples/Hello/HelloAgentState/README.md": {
                "before": [
                    "@@ -38,7 +38,7 @@ graph LR;",
                    " ",
                    " The heart of an autogen application are the event handlers. Agents select a ```TopicSubscription``` to listen for events on a specific topic. When an event is received, the agent's event handler is called with the event data.",
                    " ",
                    "-Within that event handler you may optionally *emit* new events, which are then sent to the event bus for other agents to process. The EventTypes are declared gRPC ProtoBuf messages that are used to define the schema of the event.  The default protos are available via the ```Microsoft.AutoGen.Abstractions;``` namespace and are defined in [autogen/protos](/autogen/protos). The EventTypes are registered in the agent's constructor using the ```IHandle``` interface."
                ],
                "after": [
                    "-Within that event handler you may optionally *emit* new events, which are then sent to the event bus for other agents to process. The EventTypes are declared gRPC ProtoBuf messages that are used to define the schema of the event.  The default protos are available via the ```Microsoft.AutoGen.Abstractions;``` namespace and are defined in [autogen/protos](/autogen/protos). The EventTypes are registered in the agent's constructor using the ```IHandle``` interface.",
                    "+Within that event handler you may optionally *emit* new events, which are then sent to the event bus for other agents to process. The EventTypes are declared gRPC ProtoBuf messages that are used to define the schema of the event.  The default protos are available via the ```Microsoft.AutoGen.Contracts;``` namespace and are defined in [autogen/protos](/autogen/protos). The EventTypes are registered in the agent's constructor using the ```IHandle``` interface.",
                    " ",
                    " ```csharp",
                    " TopicSubscription(\"HelloAgents\")]"
                ]
            },
            "dotnet/samples/Hello/protos/agent_events.proto": {
                "before": [
                    "@@ -2,7 +2,7 @@ syntax = \"proto3\";",
                    " ",
                    " package HelloAgents;",
                    " ",
                    "-option csharp_namespace = \"Microsoft.AutoGen.Abstractions\";"
                ],
                "after": [
                    "-option csharp_namespace = \"Microsoft.AutoGen.Abstractions\";",
                    "+option csharp_namespace = \"Microsoft.AutoGen.Contracts\";",
                    " message TextMessage {",
                    "     string textMessage = 1;",
                    "     string source = 2;"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.AgentHost/DevTeam.AgentHost.csproj": {
                "before": [
                    "@@ -9,7 +9,8 @@",
                    "   </PropertyGroup>",
                    " ",
                    "    <ItemGroup>",
                    "-    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/Agents/Microsoft.AutoGen.Agents.csproj\" />"
                ],
                "after": [
                    "+    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/Core/Microsoft.AutoGen.Core.csproj\" />",
                    "+    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/Runtime.Grpc/Microsoft.AutoGen.Runtime.Grpc.csproj\" />",
                    "     <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Extensions\\Aspire\\Microsoft.AutoGen.Extensions.Aspire.csproj\" />",
                    "   </ItemGroup>",
                    " "
                ]
            },
            "dotnet/samples/dev-team/DevTeam.AgentHost/Program.cs": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // Program.cs",
                    "+using Microsoft.AutoGen.Runtime.Grpc;",
                    " "
                ],
                "after": [
                    " ",
                    "-using Microsoft.AutoGen.Agents;",
                    " var builder = WebApplication.CreateBuilder(args);",
                    " ",
                    " builder.AddServiceDefaults();"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Agents/DevTeam.Agents.csproj": {
                "before": [
                    "@@ -8,8 +8,8 @@",
                    " ",
                    "   <ItemGroup>",
                    " ",
                    "-    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/Agents/Microsoft.AutoGen.Agents.csproj\" />"
                ],
                "after": [
                    "+    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/Core/Microsoft.AutoGen.Core.csproj\" />",
                    "+    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/Agents/Microsoft.AutoGen.Agents.csproj\" />   ",
                    "     <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Extensions\\Aspire\\Microsoft.AutoGen.Extensions.Aspire.csproj\" />",
                    "     <ProjectReference Include=\"..\\DevTeam.Shared\\DevTeam.Shared.csproj\" />",
                    "     <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Extensions\\SemanticKernel\\Microsoft.AutoGen.Extensions.SemanticKernel.csproj\" />"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Agents/Developer/Developer.cs": {
                "before": [
                    "@@ -2,8 +2,9 @@",
                    " // Developer.cs",
                    " ",
                    " using DevTeam.Shared;",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "+using Microsoft.AutoGen.Contracts;",
                    "+using Microsoft.AutoGen.Core;",
                    " using Microsoft.SemanticKernel;",
                    " using Microsoft.SemanticKernel.Memory;",
                    " "
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Agents/DeveloperLead/DeveloperLead.cs": {
                "before": [
                    "@@ -2,8 +2,9 @@",
                    " // DeveloperLead.cs",
                    " ",
                    " using DevTeam.Shared;",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "+using Microsoft.AutoGen.Contracts;",
                    "+using Microsoft.AutoGen.Core;",
                    " using Microsoft.SemanticKernel;",
                    " using Microsoft.SemanticKernel.Connectors.OpenAI;",
                    " using Microsoft.SemanticKernel.Memory;"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Agents/ProductManager/ProductManager.cs": {
                "before": [
                    "@@ -2,8 +2,9 @@",
                    " // ProductManager.cs",
                    " ",
                    " using DevTeam.Shared;",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "+using Microsoft.AutoGen.Contracts;",
                    "+using Microsoft.AutoGen.Core;",
                    " using Microsoft.SemanticKernel;",
                    " using Microsoft.SemanticKernel.Memory;",
                    " "
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Agents/Program.cs": {
                "before": [
                    "@@ -2,7 +2,7 @@",
                    " // Program.cs",
                    " ",
                    " using DevTeam.Agents;",
                    "-using Microsoft.AutoGen.Agents;"
                ],
                "after": [
                    "-using Microsoft.AutoGen.Agents;",
                    "+using Microsoft.AutoGen.Core;",
                    " using Microsoft.AutoGen.Extensions.SemanticKernel;",
                    " ",
                    " var builder = WebApplication.CreateBuilder(args);"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Agents/AzureGenie.cs": {
                "before": [
                    "@@ -3,8 +3,8 @@",
                    " ",
                    " using DevTeam.Backend;",
                    " using DevTeam.Shared;",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    " using Microsoft.AutoGen.Agents;",
                    "+using Microsoft.AutoGen.Core;",
                    " using Microsoft.SemanticKernel;",
                    " using Microsoft.SemanticKernel.Memory;",
                    " namespace Microsoft.AI.DevTeam;"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Agents/Hubber.cs": {
                "before": [
                    "@@ -5,8 +5,8 @@",
                    " using DevTeam;",
                    " using DevTeam.Backend;",
                    " using DevTeam.Shared;",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    " using Microsoft.AutoGen.Agents;",
                    "+using Microsoft.AutoGen.Core;",
                    " using Microsoft.SemanticKernel;",
                    " using Microsoft.SemanticKernel.Memory;",
                    " "
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Agents/Sandbox.cs": {
                "before": [
                    "@@ -3,7 +3,7 @@",
                    " ",
                    " // namespace DevTeam.Backend;",
                    " ",
                    "-// public sealed class Sandbox : AgentBase"
                ],
                "after": [
                    "-// public sealed class Sandbox : AgentBase",
                    "+// public sealed class Sandbox : Agent",
                    " // {",
                    " //     private const string ReminderName = \"SandboxRunReminder\";",
                    " //     private readonly IManageAzure _azService;"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/DevTeam.Backend.csproj": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " <Project Sdk=\"Microsoft.NET.Sdk.Web\">",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/Agents/Microsoft.AutoGen.Agents.csproj\" />"
                ],
                "after": [
                    "   <ItemGroup>",
                    "+    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/Agents/Microsoft.AutoGen.Agents.csproj\" />   ",
                    "     <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Extensions\\Aspire\\Microsoft.AutoGen.Extensions.Aspire.csproj\" />",
                    "     <ProjectReference Include=\"..\\DevTeam.Shared\\DevTeam.Shared.csproj\" />",
                    "     <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Extensions\\SemanticKernel\\Microsoft.AutoGen.Extensions.SemanticKernel.csproj\" />"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Program.cs": {
                "before": [
                    "@@ -5,7 +5,7 @@",
                    " using DevTeam.Backend;",
                    " using DevTeam.Options;",
                    " using Microsoft.AI.DevTeam;",
                    "-using Microsoft.AutoGen.Agents;"
                ],
                "after": [
                    "-using Microsoft.AutoGen.Agents;",
                    "+using Microsoft.AutoGen.Core;",
                    " using Microsoft.AutoGen.Extensions.SemanticKernel;",
                    " using Microsoft.Extensions.Azure;",
                    " using Microsoft.Extensions.Options;"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Services/GithubWebHookProcessor.cs": {
                "before": [
                    "@@ -3,8 +3,8 @@",
                    " ",
                    " using System.Globalization;",
                    " using DevTeam.Shared;",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "+using Microsoft.AutoGen.Contracts;",
                    "+using Microsoft.AutoGen.Core;",
                    " using Octokit.Webhooks;",
                    " using Octokit.Webhooks.Events;",
                    " using Octokit.Webhooks.Events.IssueComment;"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Shared/DevTeam.Shared.csproj": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " <Project Sdk=\"Microsoft.NET.Sdk\">",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/Agents/Microsoft.AutoGen.Agents.csproj\" />"
                ],
                "after": [
                    "-    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/Agents/Microsoft.AutoGen.Agents.csproj\" />",
                    "+    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/Core/Microsoft.AutoGen.Core.csproj\" />",
                    "   </ItemGroup>",
                    " ",
                    "   <PropertyGroup>"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Shared/EventExtensions.cs": {
                "before": [
                    "@@ -2,7 +2,7 @@",
                    " // EventExtensions.cs",
                    " ",
                    " using System.Globalization;",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-using Microsoft.AutoGen.Abstractions;",
                    "+using Microsoft.AutoGen.Contracts;",
                    " ",
                    " namespace DevTeam;",
                    " "
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Abstractions/IAgentBase.cs": {
                "before": [
                    "@@ -1,23 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// IAgentBase.cs",
                    "-",
                    "-using Google.Protobuf;"
                ],
                "after": [
                    "-    Task<T> ReadAsync<T>(AgentId agentId, CancellationToken cancellationToken = default) where T : IMessage, new();",
                    "-    ValueTask PublishEventAsync(CloudEvent item, CancellationToken cancellationToken = default);",
                    "-    ValueTask PublishEventAsync(string topic, IMessage evt, CancellationToken cancellationToken = default);",
                    "-    List<string> Subscribe(string topic);",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/AgentHost/Host.cs": {
                "before": [
                    "@@ -1,25 +1,19 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // Host.cs",
                    "-",
                    "+using System.Threading.Tasks;"
                ],
                "after": [
                    "+        builder.AddAgentService();",
                    "+",
                    "         var app = builder.Build();",
                    "         app.MapAgentService(local, useGrpc);",
                    "         app.MapDefaultEndpoints();"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/AgentHost/Microsoft.Autogen.AgentHost.csproj": {
                "before": [
                    "@@ -0,0 +1,21 @@",
                    "+\ufeff<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
                    "+",
                    "+  <PropertyGroup>",
                    "+    <TargetFramework>net8.0</TargetFramework>"
                ],
                "after": [
                    "+    <ProjectReference Include=\"..\\Runtime.Grpc\\Microsoft.AutoGen.Runtime.Grpc.csproj\" />",
                    "+    <ProjectReference Include=\"..\\Extensions\\Aspire\\Microsoft.AutoGen.Extensions.Aspire.csproj\" />",
                    "+  </ItemGroup>",
                    "+</Project>",
                    "\\ No newline at end of file"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/AgentHost/Program.cs": {
                "before": [
                    "@@ -0,0 +1,6 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// Program.cs",
                    "+using Microsoft.Extensions.Hosting;",
                    "+"
                ],
                "after": [
                    "+// Program.cs",
                    "+using Microsoft.Extensions.Hosting;",
                    "+",
                    "+var app = await Microsoft.AutoGen.Runtime.Grpc.Host.StartAsync(local: false, useGrpc: true).ConfigureAwait(false);",
                    "+await app.WaitForShutdownAsync();"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/AgentHost/Properties/launchSettings.json": {
                "before": [
                    "@@ -1,12 +1,13 @@",
                    " {",
                    "   \"profiles\": {",
                    "-    \"Backend\": {",
                    "+    \"AgentHost\": {"
                ],
                "after": [
                    "     }",
                    "   }",
                    "-}",
                    "\\ No newline at end of file",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Agents/AIAgent/InferenceAgent.cs": {
                "before": [
                    "@@ -1,15 +1,14 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // InferenceAgent.cs",
                    "-",
                    " using Google.Protobuf;"
                ],
                "after": [
                    "-    : AgentBase(context, typeRegistry)",
                    "+    : Agent(context, typeRegistry)",
                    "     where T : IMessage, new()",
                    " {",
                    "     protected IChatClient ChatClient { get; } = client;"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Agents/AIAgent/SKAiAgent.cs": {
                "before": [
                    "@@ -1,15 +1,14 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // SKAiAgent.cs",
                    "-",
                    " using System.Globalization;"
                ],
                "after": [
                    "-public abstract class SKAiAgent<T> : AgentBase where T : class, new()",
                    "+public abstract class SKAiAgent<T> : Agent where T : class, new()",
                    " {",
                    "     protected AgentState<T> _state;",
                    "     protected Kernel _kernel;"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Agents/IOAgent/ConsoleAgent/ConsoleAgent.cs": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // ConsoleAgent.cs",
                    "-",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "+using Microsoft.AutoGen.Contracts;",
                    "+using Microsoft.AutoGen.Core;",
                    " using Microsoft.Extensions.DependencyInjection;",
                    " ",
                    " namespace Microsoft.AutoGen.Agents;"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Agents/IOAgent/ConsoleAgent/IHandleConsole.cs": {
                "before": [
                    "@@ -2,13 +2,13 @@",
                    " // IHandleConsole.cs",
                    " ",
                    " using Google.Protobuf;",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    " {",
                    "-    string Route { get; }",
                    "     AgentId AgentId { get; }",
                    "     ValueTask PublishMessageAsync<T>(T message, string? source = null, CancellationToken token = default) where T : IMessage;",
                    " "
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Agents/IOAgent/FileAgent/FileAgent.cs": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // FileAgent.cs",
                    "-",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "+using Microsoft.AutoGen.Contracts;",
                    "+using Microsoft.AutoGen.Core;",
                    " using Microsoft.Extensions.DependencyInjection;",
                    " using Microsoft.Extensions.Logging;",
                    " "
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Agents/IOAgent/IOAgent.cs": {
                "before": [
                    "@@ -1,11 +1,11 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // IOAgent.cs",
                    " ",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-public abstract class IOAgent : AgentBase",
                    "+public abstract class IOAgent : Agent",
                    " {",
                    "     public string _route = \"base\";",
                    "     protected IOAgent(IAgentRuntime context, EventTypes eventTypes) : base(context, eventTypes)"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Agents/IOAgent/WebAPIAgent/WebAPIAgent.cs": {
                "before": [
                    "@@ -1,9 +1,9 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // WebAPIAgent.cs",
                    "-",
                    " using Microsoft.AspNetCore.Builder;"
                ],
                "after": [
                    "+using Microsoft.AutoGen.Contracts;",
                    "+using Microsoft.AutoGen.Core;",
                    " using Microsoft.Extensions.DependencyInjection;",
                    " using Microsoft.Extensions.Logging;",
                    " "
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Agents/Microsoft.AutoGen.Agents.csproj": {
                "before": [
                    "@@ -1,45 +1,21 @@",
                    " <Project Sdk=\"Microsoft.NET.Sdk\">",
                    " ",
                    "   <PropertyGroup>",
                    "-\t\t<TargetFramework>net8.0</TargetFramework>"
                ],
                "after": [
                    "+  <ItemGroup>",
                    "+\t  <PackageReference Include=\"Microsoft.SemanticKernel\" />",
                    "+   \t  <PackageReference Include=\"Microsoft.Extensions.AI.Abstractions\" />",
                    "+  </ItemGroup>",
                    " </Project>"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/AgentId.cs": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // AgentId.cs",
                    " ",
                    "-namespace Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Abstractions;",
                    "+namespace Microsoft.AutoGen.Contracts;",
                    " ",
                    " public partial class AgentId",
                    " {"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/ChatHistoryItem.cs": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // ChatHistoryItem.cs",
                    " ",
                    "-namespace Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Abstractions;",
                    "+namespace Microsoft.AutoGen.Contracts;",
                    " ",
                    " [Serializable]",
                    " public class ChatHistoryItem"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/ChatState.cs": {
                "before": [
                    "@@ -3,7 +3,7 @@",
                    " ",
                    " using Google.Protobuf;",
                    " ",
                    "-namespace Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Abstractions;",
                    "+namespace Microsoft.AutoGen.Contracts;",
                    " ",
                    " public class ChatState",
                    "     <T> where T : IMessage, new()"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/ChatUserType.cs": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // ChatUserType.cs",
                    " ",
                    "-namespace Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Abstractions;",
                    "+namespace Microsoft.AutoGen.Contracts;",
                    " ",
                    " public enum ChatUserType",
                    " {"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/IAgentState.cs": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // IAgentState.cs",
                    " ",
                    "-namespace Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Abstractions;",
                    "+namespace Microsoft.AutoGen.Contracts;",
                    " ",
                    " /// <summary>",
                    " /// Interface for managing the state of an agent."
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/IConnection.cs": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // IConnection.cs",
                    " ",
                    "-namespace Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Abstractions;",
                    "+namespace Microsoft.AutoGen.Contracts;",
                    " public interface IConnection",
                    " {",
                    " }"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/MessageExtensions.cs": {
                "before": [
                    "@@ -4,7 +4,7 @@",
                    " using Google.Protobuf;",
                    " using Google.Protobuf.WellKnownTypes;",
                    " ",
                    "-namespace Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Abstractions;",
                    "+namespace Microsoft.AutoGen.Contracts;",
                    " ",
                    " public static class MessageExtensions",
                    " {"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/Microsoft.AutoGen.Contracts.csproj": {
                "before": [
                    "@@ -18,6 +18,5 @@",
                    "     <PackageReference Include=\"Grpc.AspNetCore\" />",
                    "     <PackageReference Include=\"Grpc.Net.ClientFactory\" />",
                    "     <PackageReference Include=\"Grpc.Tools\" PrivateAssets=\"All\" />",
                    "-\t  <PackageReference Include=\"Microsoft.SemanticKernel\" />"
                ],
                "after": [
                    "     <PackageReference Include=\"Grpc.Net.ClientFactory\" />",
                    "     <PackageReference Include=\"Grpc.Tools\" PrivateAssets=\"All\" />",
                    "-\t  <PackageReference Include=\"Microsoft.SemanticKernel\" />",
                    "   </ItemGroup>",
                    " </Project>"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/TopicSubscriptionAttribute.cs": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // TopicSubscriptionAttribute.cs",
                    " ",
                    "-namespace Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Abstractions;",
                    "+namespace Microsoft.AutoGen.Contracts;",
                    " ",
                    " [AttributeUsage(AttributeTargets.All)]",
                    " public class TopicSubscriptionAttribute(string topic) : Attribute"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core.Grpc/App.cs": {
                "before": [
                    "@@ -1,12 +1,14 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // App.cs",
                    "+using System.Diagnostics;",
                    " using System.Diagnostics.CodeAnalysis;"
                ],
                "after": [
                    "-            app.MapAgentService(local: true, useGrpc: false);",
                    "-        }",
                    "         app.MapDefaultEndpoints();",
                    "         Host = app;",
                    "         await app.StartAsync().ConfigureAwait(false);"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core.Grpc/GrpcAgentWorker.cs": {
                "before": [
                    "@@ -6,12 +6,12 @@",
                    " using System.Reflection;",
                    " using System.Threading.Channels;",
                    " using Grpc.Core;",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "+",
                    "+    public async ValueTask<AgentState> ReadAsync(AgentId agentId, CancellationToken cancellationToken = default)",
                    "     {",
                    "         var response = await _client.GetStateAsync(agentId).ConfigureAwait(true);",
                    "         //        if (response.Success && response.AgentState.AgentId is not null) - why is success always false?"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core.Grpc/GrpcAgentWorkerHostBuilderExtension.cs": {
                "before": [
                    "@@ -1,13 +1,11 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // GrpcAgentWorkerHostBuilderExtension.cs",
                    "-",
                    " using Grpc.Core;"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Agents;",
                    "+namespace Microsoft.AutoGen.Core.Grpc;",
                    " ",
                    " public static class GrpcAgentWorkerHostBuilderExtensions",
                    " {"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core.Grpc/Microsoft.AutoGen.Core.Grpc.csproj": {
                "before": [
                    "@@ -0,0 +1,15 @@",
                    "+\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">",
                    "+",
                    "+  <PropertyGroup>",
                    "+    <TargetFramework>net8.0</TargetFramework>"
                ],
                "after": [
                    "+    <ProjectReference Include=\"..\\Contracts\\Microsoft.AutoGen.Contracts.csproj\" />",
                    "+  </ItemGroup>",
                    "+",
                    "+",
                    "+</Project>"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/Agent.cs": {
                "before": [
                    "@@ -1,41 +1,43 @@",
                    "+",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// AgentBase.cs",
                    "+// Agent.cs"
                ],
                "after": [
                    "-            static async ((AgentBase Agent, CloudEvent Event) state, CancellationToken ct) =>",
                    "+            static async ((Agent Agent, CloudEvent Event) state, CancellationToken ct) =>",
                    "             {",
                    "                 await state.Agent._runtime.PublishEventAsync(state.Event).ConfigureAwait(false);",
                    "             },"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/AgentExtensions.cs": {
                "before": [
                    "@@ -1,16 +1,16 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// AgentBaseExtensions.cs",
                    "+// AgentExtensions.cs",
                    " "
                ],
                "after": [
                    "-    public static async Task InvokeWithActivityAsync<TState>(this AgentBase agent, Func<TState, CancellationToken, Task> func, TState state, Activity? activity, string methodName, CancellationToken cancellationToken = default)",
                    "+    public static async Task InvokeWithActivityAsync<TState>(this Agent agent, Func<TState, CancellationToken, Task> func, TState state, Activity? activity, string methodName, CancellationToken cancellationToken = default)",
                    "     {",
                    "         if (activity is not null && activity.StartTimeUtc == default)",
                    "         {"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/AgentRuntime.cs": {
                "before": [
                    "@@ -3,19 +3,19 @@",
                    " ",
                    " using System.Diagnostics;",
                    " using Google.Protobuf.Collections;",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-    public async ValueTask SendRequestAsync(IAgentBase agent, RpcRequest request, CancellationToken cancellationToken = default)",
                    "+    public async ValueTask SendRequestAsync(Agent agent, RpcRequest request, CancellationToken cancellationToken = default)",
                    "     {",
                    "         await worker.SendRequestAsync(agent, request, cancellationToken).ConfigureAwait(false);",
                    "     }"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/AgentTypes.cs": {
                "before": [
                    "@@ -0,0 +1,20 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// AgentTypes.cs",
                    "+",
                    "+namespace Microsoft.AutoGen.Core"
                ],
                "after": [
                    "+                                .ToDictionary(type => type.Name, type => type);",
                    "+",
                    "+        return new AgentTypes(agents);",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/AgentWorker.cs": {
                "before": [
                    "@@ -4,23 +4,23 @@",
                    " using System.Collections.Concurrent;",
                    " using System.Diagnostics;",
                    " using System.Threading.Channels;",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "+                var context = new AgentRuntime(agentId, this, _serviceProvider.GetRequiredService<ILogger<Agent>>(), _distributedContextPropagator);",
                    "+                agent = (Agent)ActivatorUtilities.CreateInstance(_serviceProvider, agentType, context);",
                    "                 _agents.TryAdd((agentId.Type, agentId.Key), agent);",
                    "             }",
                    "             else"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/App.cs": {
                "before": [
                    "@@ -0,0 +1,67 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// App.cs",
                    "+using System.Diagnostics;",
                    "+using System.Diagnostics.CodeAnalysis;"
                ],
                "after": [
                    "+            builder.AddAgent(type.Key, type.Value);",
                    "+        }",
                    "+        return builder;",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/Client.cs": {
                "before": [
                    "@@ -2,13 +2,13 @@",
                    " // Client.cs",
                    " ",
                    " using System.Diagnostics;",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "     [FromKeyedServices(\"EventTypes\")] EventTypes eventTypes, ILogger<Client> logger)",
                    "-    : AgentBase(new AgentRuntime(new AgentId(\"client\", Guid.NewGuid().ToString()), runtime, logger, distributedContextPropagator), eventTypes)",
                    "+    : Agent(new AgentRuntime(new AgentId(\"client\", Guid.NewGuid().ToString()), runtime, logger, distributedContextPropagator), eventTypes)",
                    " {",
                    " }"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/EventTypes.cs": {
                "before": [
                    "@@ -0,0 +1,11 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// EventTypes.cs",
                    "+using Google.Protobuf.Reflection;",
                    "+"
                ],
                "after": [
                    "+{",
                    "+    public TypeRegistry TypeRegistry { get; } = typeRegistry;",
                    "+    public Dictionary<string, Type> Types { get; } = types;",
                    "+    public Dictionary<Type, HashSet<string>> EventsMap { get; } = eventsMap;",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/HostBuilderExtensions.cs": {
                "before": [
                    "@@ -6,19 +6,18 @@",
                    " using System.Reflection;",
                    " using Google.Protobuf;",
                    " using Google.Protobuf.Reflection;",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-        [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] TAgent>(string typeName) where TAgent : AgentBase",
                    "+        [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] TAgent>(string typeName) where TAgent : Agent",
                    "     {",
                    "         builder.Services.AddKeyedSingleton(\"AgentTypes\", (sp, key) => Tuple.Create(typeName, typeof(TAgent)));",
                    "         return this;"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/IAgentRuntime.cs": {
                "before": [
                    "@@ -2,17 +2,18 @@",
                    " // IAgentRuntime.cs",
                    " ",
                    " using System.Diagnostics;",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "-    ValueTask SendRequestAsync(IAgentBase agent, RpcRequest request, CancellationToken cancellationToken = default);",
                    "+    ValueTask SendRequestAsync(Agent agent, RpcRequest request, CancellationToken cancellationToken = default);",
                    "     ValueTask SendMessageAsync(Message message, CancellationToken cancellationToken = default);",
                    "     ValueTask PublishEventAsync(CloudEvent @event, CancellationToken cancellationToken = default);",
                    "     void Update(RpcRequest request, Activity? activity);"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/IAgentWorker.cs": {
                "before": [
                    "@@ -1,11 +1,12 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // IAgentWorker.cs",
                    "-namespace Microsoft.AutoGen.Abstractions;",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "-    ValueTask SendRequestAsync(IAgentBase agent, RpcRequest request, CancellationToken cancellationToken = default);",
                    "+    ValueTask SendRequestAsync(Agent agent, RpcRequest request, CancellationToken cancellationToken = default);",
                    "     ValueTask SendResponseAsync(RpcResponse response, CancellationToken cancellationToken = default);",
                    "     ValueTask SendMessageAsync(Message message, CancellationToken cancellationToken = default);",
                    "     ValueTask StoreAsync(AgentState value, CancellationToken cancellationToken = default);"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/IHandle.cs": {
                "before": [
                    "@@ -1,8 +1,6 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // IHandle.cs",
                    "-",
                    "-namespace Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-",
                    "+namespace Microsoft.AutoGen.Core;",
                    " public interface IHandle",
                    " {",
                    "     Task HandleObject(object item);"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/Microsoft.AutoGen.Core.csproj": {
                "before": [
                    "@@ -0,0 +1,21 @@",
                    "+<Project Sdk=\"Microsoft.NET.Sdk\">",
                    "+",
                    "+  <PropertyGroup>",
                    "+\t\t<TargetFramework>net8.0</TargetFramework>"
                ],
                "after": [
                    "+\t<ItemGroup>",
                    "+\t  <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" />",
                    "+\t  <PackageReference Include=\"Microsoft.Extensions.DependencyInjection.Abstractions\" />",
                    "+\t</ItemGroup>",
                    "+</Project>"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/ReflectionHelper.cs": {
                "before": [
                    "@@ -0,0 +1,59 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// ReflectionHelper.cs",
                    "+using System.Reflection;",
                    "+using Google.Protobuf;"
                ],
                "after": [
                    "+    {",
                    "+        var property = type.GetProperty(\"Descriptor\", BindingFlags.Static | BindingFlags.Public);",
                    "+        return property?.GetValue(null) as MessageDescriptor;",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Extensions/Aspire/AspireHostingExtensions.cs": {
                "before": [
                    "@@ -17,7 +17,7 @@ namespace Microsoft.Extensions.Hosting;",
                    " // To learn more about using this project, see https://aka.ms/dotnet/aspire/service-defaults",
                    " public static class AspireHostingExtensions",
                    " {",
                    "-    public static IHostApplicationBuilder AddServiceDefaults(this IHostApplicationBuilder builder)"
                ],
                "after": [
                    "-    public static IHostApplicationBuilder AddServiceDefaults(this IHostApplicationBuilder builder)",
                    "+    public static WebApplicationBuilder AddServiceDefaults(this WebApplicationBuilder builder)",
                    "     {",
                    "         builder.ConfigureOpenTelemetry();",
                    " "
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Extensions/SemanticKernel/Microsoft.AutoGen.Extensions.SemanticKernel.csproj": {
                "before": [
                    "@@ -16,7 +16,7 @@",
                    " ",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"../../Agents/Microsoft.AutoGen.Agents.csproj\" />"
                ],
                "after": [
                    "-    <ProjectReference Include=\"../../Agents/Microsoft.AutoGen.Agents.csproj\" />",
                    "+    <ProjectReference Include=\"../../Core/Microsoft.AutoGen.Core.csproj\" />",
                    "     <ProjectReference Include=\"../MEAI/Microsoft.AutoGen.Extensions.MEAI.csproj\" />",
                    "   </ItemGroup>",
                    " "
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Microsoft.AutoGen.Runtime.Grpc.csproj": {
                "before": [
                    "@@ -0,0 +1,31 @@",
                    "+<Project Sdk=\"Microsoft.NET.Sdk\">",
                    "+  <PropertyGroup>",
                    "+    <TargetFramework>net8.0</TargetFramework>",
                    "+    <ImplicitUsings>enable</ImplicitUsings>"
                ],
                "after": [
                    "+\t\t<PackageReference Include=\"Microsoft.Orleans.Streaming.EventHubs\" />",
                    "+\t\t<PackageReference Include=\"OrleansDashboard\" />",
                    "+\t</ItemGroup>",
                    "+</Project>",
                    "\\ No newline at end of file"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/AgentWorkerHostingExtensions.cs": {
                "before": [
                    "@@ -7,31 +7,22 @@",
                    " using Microsoft.Extensions.DependencyInjection.Extensions;",
                    " using Microsoft.Extensions.Hosting;",
                    " ",
                    "-namespace Microsoft.AutoGen.Agents;"
                ],
                "after": [
                    "-    }",
                    "-",
                    "     public static WebApplication MapAgentService(this WebApplication app, bool local = false, bool useGrpc = true)",
                    "     {",
                    "         if (useGrpc) { app.MapGrpcService<GrpcGatewayService>(); }"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Grpc/GrpcGateway.cs": {
                "before": [
                    "@@ -3,11 +3,11 @@",
                    " ",
                    " using System.Collections.Concurrent;",
                    " using Grpc.Core;",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Agents;",
                    "+namespace Microsoft.AutoGen.Runtime.Grpc;",
                    " ",
                    " public sealed class GrpcGateway : BackgroundService, IGateway",
                    " {"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Grpc/GrpcGatewayService.cs": {
                "before": [
                    "@@ -2,9 +2,9 @@",
                    " // GrpcGatewayService.cs",
                    " ",
                    " using Grpc.Core;",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Agents;",
                    "+namespace Microsoft.AutoGen.Runtime.Grpc;",
                    " ",
                    " // gRPC service which handles communication between the agent worker and the cluster.",
                    " internal sealed class GrpcGatewayService : AgentRpc.AgentRpcBase"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Grpc/GrpcWorkerConnection.cs": {
                "before": [
                    "@@ -3,9 +3,9 @@",
                    " ",
                    " using System.Threading.Channels;",
                    " using Grpc.Core;",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Agents;",
                    "+namespace Microsoft.AutoGen.Runtime.Grpc;",
                    " ",
                    " internal sealed class GrpcWorkerConnection : IAsyncDisposable, IConnection",
                    " {"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/IGateway.cs": {
                "before": [
                    "@@ -1,8 +1,8 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // IGateway.cs",
                    "-using Microsoft.AutoGen.Abstractions;",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Agents;",
                    "+namespace Microsoft.AutoGen.Runtime.Grpc;",
                    " ",
                    " public interface IGateway : IGrainObserver",
                    " {"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/AgentStateGrain.cs": {
                "before": [
                    "@@ -1,9 +1,9 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // AgentStateGrain.cs",
                    " ",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Agents;",
                    "+namespace Microsoft.AutoGen.Runtime.Grpc;",
                    " ",
                    " internal sealed class AgentStateGrain([PersistentState(\"state\", \"AgentStateStore\")] IPersistentState<AgentState> state) : Grain, IAgentState",
                    " {"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/IRegistryGrain.cs": {
                "before": [
                    "@@ -1,8 +1,8 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // IRegistryGrain.cs",
                    "-using Microsoft.AutoGen.Abstractions;",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Agents;",
                    "+namespace Microsoft.AutoGen.Runtime.Grpc;",
                    " ",
                    " public interface IRegistryGrain : IGrainWithIntegerKey",
                    " {"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/ISubscriptionsGrain.cs": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // ISubscriptionsGrain.cs",
                    " ",
                    "-namespace Microsoft.AutoGen.Agents;"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Agents;",
                    "+namespace Microsoft.AutoGen.Runtime.Grpc;",
                    " public interface ISubscriptionsGrain : IGrainWithIntegerKey",
                    " {",
                    "     ValueTask SubscribeAsync(string agentType, string topic);"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/OrleansRuntimeHostingExtenions.cs": {
                "before": [
                    "@@ -9,16 +9,11 @@",
                    " using Orleans.Configuration;",
                    " using Orleans.Serialization;",
                    " ",
                    "-namespace Microsoft.AutoGen.Agents;"
                ],
                "after": [
                    "-            if (builder.Environment.IsDevelopment() || local)",
                    "+            if (builder.Environment.IsDevelopment())",
                    "             {",
                    "                 siloBuilder.UseLocalhostClustering()",
                    "                        .AddMemoryStreams(\"StreamProvider\")"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/RegistryGrain.cs": {
                "before": [
                    "@@ -1,9 +1,9 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // RegistryGrain.cs",
                    " ",
                    "-using Microsoft.AutoGen.Abstractions;"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Agents;",
                    "+namespace Microsoft.AutoGen.Runtime.Grpc;",
                    " ",
                    " internal sealed class RegistryGrain : Grain, IRegistryGrain",
                    " {"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/SubscriptionsGrain.cs": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // SubscriptionsGrain.cs",
                    " ",
                    "-namespace Microsoft.AutoGen.Agents;"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Agents;",
                    "+namespace Microsoft.AutoGen.Runtime.Grpc;",
                    " ",
                    " internal sealed class SubscriptionsGrain([PersistentState(\"state\", \"PubSubStore\")] IPersistentState<SubscriptionsState> state) : Grain, ISubscriptionsGrain",
                    " {"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Agents.Tests/AgentTests.cs": {
                "before": [
                    "@@ -1,21 +1,22 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// AgentBaseTests.cs",
                    "+// AgentTests.cs",
                    " "
                ],
                "after": [
                    "-            .AddAgentWorker(local: true)",
                    "+            .AddAgentWorker()",
                    "             .AddAgent<TestAgent>(nameof(TestAgent));",
                    " ",
                    "         AppHost = builder.Build();"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Agents.Tests/Microsoft.AutoGen.Agents.Tests.csproj": {
                "before": [
                    "@@ -8,7 +8,7 @@",
                    "   </PropertyGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\src\\Microsoft.AutoGen\\Agents\\Microsoft.AutoGen.Agents.csproj\" />"
                ],
                "after": [
                    "-    <ProjectReference Include=\"..\\..\\src\\Microsoft.AutoGen\\Agents\\Microsoft.AutoGen.Agents.csproj\" />",
                    "+    <ProjectReference Include=\"..\\..\\src\\Microsoft.AutoGen\\Core\\Microsoft.AutoGen.Core.csproj\" />",
                    "     <PackageReference Include=\"Microsoft.Extensions.Hosting\" />",
                    "   </ItemGroup>",
                    " "
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Integration.Tests/HelloAppHostIntegrationTests.cs": {
                "before": [
                    "@@ -42,8 +42,8 @@ public async Task AppHostLogsHelloAgentE2E(TestEndpoints testEndpoints)",
                    "                 await app.WaitForResource(ResourceName, TargetState).WaitAsync(timeout);",
                    "             }",
                    "         }",
                    "-        //sleep 5 seconds to make sure the app is running"
                ],
                "after": [
                    "+        //sleep to make sure the app is running",
                    "+        await Task.Delay(20000);",
                    "         app.EnsureNoErrorsLogged();",
                    "         app.EnsureLogContains(\"HelloAgents said Goodbye\");",
                    "         app.EnsureLogContains(\"Wild Hello from Python!\");"
                ]
            },
            "protos/agent_events.proto": {
                "before": [
                    "@@ -2,7 +2,7 @@ syntax = \"proto3\";",
                    " ",
                    " package agents;",
                    " ",
                    "-option csharp_namespace = \"Microsoft.AutoGen.Abstractions\";"
                ],
                "after": [
                    "-option csharp_namespace = \"Microsoft.AutoGen.Abstractions\";",
                    "+option csharp_namespace = \"Microsoft.AutoGen.Contracts\";",
                    " message TextMessage {",
                    "     string textMessage = 1;",
                    "     string source = 2;"
                ]
            },
            "protos/agent_states.proto": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " syntax = \"proto3\";",
                    " package agents;",
                    " ",
                    "-option csharp_namespace = \"Microsoft.AutoGen.Abstractions\";"
                ],
                "after": [
                    "-option csharp_namespace = \"Microsoft.AutoGen.Abstractions\";",
                    "+option csharp_namespace = \"Microsoft.AutoGen.Contracts\";",
                    " ",
                    " message AgentState {",
                    "   string message = 1;"
                ]
            },
            "protos/agent_worker.proto": {
                "before": [
                    "@@ -2,7 +2,7 @@ syntax = \"proto3\";",
                    " ",
                    " package agents;",
                    " ",
                    "-option csharp_namespace = \"Microsoft.AutoGen.Abstractions\";"
                ],
                "after": [
                    "-option csharp_namespace = \"Microsoft.AutoGen.Abstractions\";",
                    "+option csharp_namespace = \"Microsoft.AutoGen.Contracts\";",
                    " ",
                    " import \"cloudevent.proto\";",
                    " import \"google/protobuf/any.proto\";"
                ]
            },
            "protos/cloudevent.proto": {
                "before": [
                    "@@ -15,7 +15,7 @@ package io.cloudevents.v1;",
                    " import \"google/protobuf/any.proto\";",
                    " import \"google/protobuf/timestamp.proto\";",
                    " ",
                    "-option csharp_namespace = \"Microsoft.AutoGen.Abstractions\";"
                ],
                "after": [
                    "-option csharp_namespace = \"Microsoft.AutoGen.Abstractions\";",
                    "+option csharp_namespace = \"Microsoft.AutoGen.Contracts\";",
                    " ",
                    " ",
                    " message CloudEvent {"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/agents/_base_chat_agent.py": {
                "before": [
                    "@@ -1,10 +1,14 @@",
                    " from abc import ABC, abstractmethod",
                    "-from typing import Any, AsyncGenerator, List, Mapping, Sequence",
                    "+from typing import Any, AsyncGenerator, List, Mapping, Sequence, get_args",
                    " "
                ],
                "after": [
                    "+                    raise ValueError(f\"Invalid message type in list: {type(msg)}\")",
                    "+        elif isinstance(task, get_args(ChatMessage)[0]):",
                    "             input_messages.append(task)",
                    "             output_messages.append(task)",
                    "             yield task"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/agents/_society_of_mind_agent.py": {
                "before": [
                    "@@ -1,10 +1,10 @@",
                    "-from typing import AsyncGenerator, List, Sequence",
                    "+from typing import Any, AsyncGenerator, List, Mapping, Sequence",
                    " ",
                    "-from autogen_core import CancellationToken, Image"
                ],
                "after": [
                    "+        return state.model_dump()",
                    "+",
                    "+    async def load_state(self, state: Mapping[str, Any]) -> None:",
                    "+        society_of_mind_state = SocietyOfMindAgentState.model_validate(state)",
                    "+        await self._team.load_state(society_of_mind_state.inner_team_state)"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/base/_task.py": {
                "before": [
                    "@@ -1,5 +1,5 @@",
                    " from dataclasses import dataclass",
                    "-from typing import AsyncGenerator, Protocol, Sequence",
                    "+from typing import AsyncGenerator, List, Protocol, Sequence",
                    " "
                ],
                "after": [
                    "-        task: str | ChatMessage | None = None,",
                    "+        task: str | ChatMessage | List[ChatMessage] | None = None,",
                    "         cancellation_token: CancellationToken | None = None,",
                    "     ) -> AsyncGenerator[AgentMessage | TaskResult, None]:",
                    "         \"\"\"Run the task and produces a stream of messages and the final result"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/state/__init__.py": {
                "before": [
                    "@@ -8,6 +8,7 @@",
                    "     MagenticOneOrchestratorState,",
                    "     RoundRobinManagerState,",
                    "     SelectorManagerState,",
                    "+    SocietyOfMindAgentState,"
                ],
                "after": [
                    "     \"SwarmManagerState\",",
                    "     \"MagenticOneOrchestratorState\",",
                    "     \"TeamState\",",
                    "+    \"SocietyOfMindAgentState\",",
                    " ]"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/state/_states.py": {
                "before": [
                    "@@ -79,3 +79,10 @@ class MagenticOneOrchestratorState(BaseGroupChatManagerState):",
                    "     n_rounds: int = Field(default=0)",
                    "     n_stalls: int = Field(default=0)",
                    "     type: str = Field(default=\"MagenticOneOrchestratorState\")",
                    "+"
                ],
                "after": [
                    "+class SocietyOfMindAgentState(BaseState):",
                    "+    \"\"\"State for a Society of Mind agent.\"\"\"",
                    "+",
                    "+    inner_team_state: Mapping[str, Any] = Field(default_factory=dict)",
                    "+    type: str = Field(default=\"SocietyOfMindAgentState\")"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/teams/_group_chat/_base_group_chat.py": {
                "before": [
                    "@@ -2,7 +2,7 @@",
                    " import logging",
                    " import uuid",
                    " from abc import ABC, abstractmethod",
                    "-from typing import Any, AsyncGenerator, Callable, List, Mapping"
                ],
                "after": [
                    "-                GroupChatStart(message=first_chat_message),",
                    "+                GroupChatStart(messages=messages),",
                    "                 recipient=AgentId(type=self._group_chat_manager_topic_type, key=self._team_id),",
                    "                 cancellation_token=cancellation_token,",
                    "             )"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/teams/_group_chat/_base_group_chat_manager.py": {
                "before": [
                    "@@ -70,24 +70,28 @@ async def handle_start(self, message: GroupChatStart, ctx: MessageContext) -> No",
                    "             # Stop the group chat.",
                    "             return",
                    " ",
                    "-        # Validate the group state given the start message."
                ],
                "after": [
                    "+            messages: A list of chat messages to validate, or None if no messages are provided.",
                    "+        \"\"\"",
                    "         ...",
                    " ",
                    "     @abstractmethod"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/teams/_group_chat/_chat_agent_container.py": {
                "before": [
                    "@@ -30,8 +30,8 @@ def __init__(self, parent_topic_type: str, output_topic_type: str, agent: ChatAg",
                    "     @event",
                    "     async def handle_start(self, message: GroupChatStart, ctx: MessageContext) -> None:",
                    "         \"\"\"Handle a start event by appending the content to the buffer.\"\"\"",
                    "-        if message.message is not None:"
                ],
                "after": [
                    "+        if message.messages is not None:",
                    "+            self._message_buffer.extend(message.messages)",
                    " ",
                    "     @event",
                    "     async def handle_agent_response(self, message: GroupChatAgentResponse, ctx: MessageContext) -> None:"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/teams/_group_chat/_events.py": {
                "before": [
                    "@@ -1,3 +1,5 @@",
                    "+from typing import List",
                    "+",
                    " from pydantic import BaseModel",
                    " "
                ],
                "after": [
                    "+    messages: List[ChatMessage] | None = None",
                    "+    \"\"\"An optional list of messages to start the group chat.\"\"\"",
                    " ",
                    " ",
                    " class GroupChatAgentResponse(BaseModel):"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/teams/_group_chat/_magentic_one/_magentic_one_orchestrator.py": {
                "before": [
                    "@@ -126,17 +126,18 @@ async def handle_start(self, message: GroupChatStart, ctx: MessageContext) -> No",
                    "             )",
                    "             # Stop the group chat.",
                    "             return",
                    "-        assert message is not None and message.message is not None"
                ],
                "after": [
                    "-    async def validate_group_state(self, message: ChatMessage | None) -> None:",
                    "+    async def validate_group_state(self, messages: List[ChatMessage] | None) -> None:",
                    "         pass",
                    " ",
                    "     async def save_state(self) -> Mapping[str, Any]:"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/teams/_group_chat/_round_robin_group_chat.py": {
                "before": [
                    "@@ -29,7 +29,7 @@ def __init__(",
                    "         )",
                    "         self._next_speaker_index = 0",
                    " ",
                    "-    async def validate_group_state(self, message: ChatMessage | None) -> None:"
                ],
                "after": [
                    "-    async def validate_group_state(self, message: ChatMessage | None) -> None:",
                    "+    async def validate_group_state(self, messages: List[ChatMessage] | None) -> None:",
                    "         pass",
                    " ",
                    "     async def reset(self) -> None:"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/teams/_group_chat/_selector_group_chat.py": {
                "before": [
                    "@@ -54,7 +54,7 @@ def __init__(",
                    "         self._allow_repeated_speaker = allow_repeated_speaker",
                    "         self._selector_func = selector_func",
                    " ",
                    "-    async def validate_group_state(self, message: ChatMessage | None) -> None:"
                ],
                "after": [
                    "-    async def validate_group_state(self, message: ChatMessage | None) -> None:",
                    "+    async def validate_group_state(self, messages: List[ChatMessage] | None) -> None:",
                    "         pass",
                    " ",
                    "     async def reset(self) -> None:"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/teams/_group_chat/_swarm_group_chat.py": {
                "before": [
                    "@@ -29,16 +29,19 @@ def __init__(",
                    "         )",
                    "         self._current_speaker = participant_topic_types[0]",
                    " ",
                    "-    async def validate_group_state(self, message: ChatMessage | None) -> None:"
                ],
                "after": [
                    "+                    return",
                    "+",
                    "         # Check if there is a handoff message in the thread that is not targeting a valid participant.",
                    "         for existing_message in reversed(self._message_thread):",
                    "             if isinstance(existing_message, HandoffMessage):"
                ]
            },
            "python/packages/autogen-agentchat/tests/test_assistant_agent.py": {
                "before": [
                    "@@ -8,6 +8,7 @@",
                    " from autogen_agentchat.agents import AssistantAgent",
                    " from autogen_agentchat.base import Handoff, TaskResult",
                    " from autogen_agentchat.messages import (",
                    "+    ChatMessage,"
                ],
                "after": [
                    "+        if isinstance(message, TaskResult):",
                    "+            assert message == result",
                    "+        else:",
                    "+            assert message == result.messages[index]",
                    "+        index += 1"
                ]
            },
            "python/packages/autogen-agentchat/tests/test_group_chat.py": {
                "before": [
                    "@@ -1025,3 +1025,48 @@ async def test_swarm_with_handoff_termination() -> None:",
                    "     assert result.messages[1].content == \"Transferred to second_agent.\"",
                    "     assert result.messages[2].content == \"Transferred to third_agent.\"",
                    "     assert result.messages[3].content == \"Transferred to non_existing_agent.\"",
                    "+"
                ],
                "after": [
                    "+        await team.run(task=[\"not a message\"])  # type: ignore[list-item, arg-type]  # intentionally testing invalid input",
                    "+",
                    "+    # Test with empty message list",
                    "+    with pytest.raises(ValueError, match=\"Task list cannot be empty\"):",
                    "+        await team.run(task=[])"
                ]
            },
            "python/packages/autogen-agentchat/tests/test_society_of_mind_agent.py": {
                "before": [
                    "@@ -72,9 +72,20 @@ async def test_society_of_mind_agent(monkeypatch: pytest.MonkeyPatch) -> None:",
                    "     inner_team = RoundRobinGroupChat([agent1, agent2], termination_condition=inner_termination)",
                    "     society_of_mind_agent = SocietyOfMindAgent(\"society_of_mind\", team=inner_team, model_client=model_client)",
                    "     response = await society_of_mind_agent.run(task=\"Count to 10.\")",
                    "-    assert len(response.messages) == 5"
                ],
                "after": [
                    "+    inner_team = RoundRobinGroupChat([agent1, agent2], termination_condition=inner_termination)",
                    "+    society_of_mind_agent2 = SocietyOfMindAgent(\"society_of_mind\", team=inner_team, model_client=model_client)",
                    "+    await society_of_mind_agent2.load_state(state)",
                    "+    state2 = await society_of_mind_agent2.save_state()",
                    "+    assert state == state2"
                ]
            },
            "python/packages/autogen-core/docs/src/packages/index.md": {
                "before": [
                    "@@ -83,7 +83,7 @@ Extras:",
                    " A generalist multi-agent softbot utilizing five agents to tackle intricate tasks involving multi-step planning and real-world actions.",
                    " ",
                    " ```{note}",
                    "-Not yet available on PyPI."
                ],
                "after": [
                    "-Not yet available on PyPI.",
                    "+Not yet available on PyPI. Please install from source.",
                    " ```",
                    " ",
                    " [{fab}`github;pst-color-primary` Source](https://github.com/microsoft/autogen/tree/main/python/packages/autogen-magentic-one)"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/agentchat-user-guide/tutorial/custom-agents.ipynb": {
                "before": [
                    "@@ -34,9 +34,20 @@",
                    "   },",
                    "   {",
                    "    \"cell_type\": \"code\",",
                    "-   \"execution_count\": null,"
                ],
                "after": [
                    "+   \"pygments_lexer\": \"ipython3\",",
                    "+   \"version\": \"3.12.7\"",
                    "   }",
                    "  },",
                    "  \"nbformat\": 4,"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/agentchat-user-guide/tutorial/models.ipynb": {
                "before": [
                    "@@ -15,7 +15,7 @@",
                    "             \"source\": [",
                    "                 \"## OpenAI\\n\",",
                    "                 \"\\n\",",
                    "-                \"To access OpenAI models, install the `openai` extension, which allows you to use the {py:class}`~autogen_ext.models.OpenAIChatCompletionClient`.\""
                ],
                "after": [
                    "-            \"version\": \"3.11.5\"",
                    "+            \"version\": \"3.12.7\"",
                    "         }",
                    "     },",
                    "     \"nbformat\": 4,"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/agentchat-user-guide/tutorial/state.ipynb": {
                "before": [
                    "@@ -26,9 +26,9 @@",
                    "      \"name\": \"stdout\",",
                    "      \"output_type\": \"stream\",",
                    "      \"text\": [",
                    "-      \"In Tanganyika's depths so wide and deep,  \\n\","
                ],
                "after": [
                    "-   \"version\": \"3.11.5\"",
                    "+   \"version\": \"3.11.9\"",
                    "   }",
                    "  },",
                    "  \"nbformat\": 4,"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/agentchat-user-guide/tutorial/teams.ipynb": {
                "before": [
                    "@@ -204,7 +204,7 @@",
                    "    \"cell_type\": \"markdown\",",
                    "    \"metadata\": {},",
                    "    \"source\": [",
                    "-    \"## Controlling a Team\\n\","
                ],
                "after": [
                    "-    \"## Controlling a Team\\n\",",
                    "+    \"## Resetting a Team\\n\",",
                    "     \"\\n\",",
                    "     \"You can reset the team by calling the {py:meth}`~autogen_agentchat.teams.BaseGroupChat.reset` method. This method will clear the team's state, including all agents.\"",
                    "    ]"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/autogenstudio-user-guide/faq.md": {
                "before": [
                    "@@ -0,0 +1,124 @@",
                    "+---",
                    "+myst:",
                    "+  html_meta:",
                    "+    \"description lang=en\": |"
                ],
                "after": [
                    "+Using Gunicorn as the application server for improved performance is recommended. To run AutoGen Studio with Gunicorn, you can use the following command:",
                    "+",
                    "+```bash",
                    "+gunicorn -w $((2 * $(getconf _NPROCESSORS_ONLN) + 1)) --timeout 12600 -k uvicorn.workers.UvicornWorker autogenstudio.web.app:app --bind",
                    "+```"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/autogenstudio-user-guide/index.md": {
                "before": [
                    "@@ -0,0 +1,111 @@",
                    "+---",
                    "+myst:",
                    "+  html_meta:",
                    "+    \"description lang=en\": |"
                ],
                "after": [
                    "+",
                    "+installation",
                    "+usage",
                    "+faq",
                    "+```"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/autogenstudio-user-guide/installation.md": {
                "before": [
                    "@@ -0,0 +1,69 @@",
                    "+---",
                    "+myst:",
                    "+  html_meta:",
                    "+    \"description lang=en\": |"
                ],
                "after": [
                    "+- `--upgrade-database` argument to upgrade the database schema (assuming there are changes in the version you are installing). By default, it is set to `False`.",
                    "+- `--reload` argument to enable auto-reloading of the server when changes are made to the code. By default, it is set to `False`.",
                    "+- `--database-uri` argument to specify the database URI. Example values include `sqlite:///database.sqlite` for SQLite and `postgresql+psycopg://user:password@localhost/dbname` for PostgreSQL. If this is not specified, the database URI defaults to a `database.sqlite` file in the `--appdir` directory.",
                    "+",
                    "+Now that you have AutoGen Studio installed and running, you are ready to explore its capabilities, including defining and modifying agent workflows, interacting with agents and sessions, and expanding agent skills."
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/autogenstudio-user-guide/usage.md": {
                "before": [
                    "@@ -0,0 +1,57 @@",
                    "+---",
                    "+myst:",
                    "+  html_meta:",
                    "+    \"description lang=en\": |"
                ],
                "after": [
                    "+```bash",
                    "+autogenstudio serve --team=team.json --port=5000",
                    "+```",
                    "+",
                    "+Similarly, the team launch command above can be wrapped into a Dockerfile that can be deployed on cloud services like Azure Container Apps or Azure Web Apps. -->"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/core-user-guide/cookbook/local-llms-ollama-litellm.ipynb": {
                "before": [
                    "@@ -15,10 +15,10 @@",
                    "     \"```\\n\",",
                    "     \"curl -fsSL https://ollama.com/install.sh | sh\\n\",",
                    "     \"\\n\",",
                    "-    \"ollama pull llama3:instruct\\n\","
                ],
                "after": [
                    "-   \"display_name\": \"pyautogen\",",
                    "+   \"display_name\": \".venv\",",
                    "    \"language\": \"python\",",
                    "    \"name\": \"python3\"",
                    "   },"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/core-user-guide/design-patterns/index.md": {
                "before": [
                    "@@ -27,4 +27,5 @@ handoffs",
                    " mixture-of-agents",
                    " multi-agent-debate",
                    " reflection",
                    "+code-execution-groupchat"
                ],
                "after": [
                    " mixture-of-agents",
                    " multi-agent-debate",
                    " reflection",
                    "+code-execution-groupchat",
                    " ```"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/core-user-guide/design-patterns/sequential-workflow.svg": {
                "before": [
                    "@@ -1,3 +1,3 @@",
                    " <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
                    " <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">",
                    "-<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"746px\" height=\"139px\" viewBox=\"-0.5 -0.5 746 139\" class=\"ge-export-svg-dark\" style=\"background-color: rgb(0, 0, 0);\"><defs><style type=\"text/css\">svg.ge-export-svg-dark:not(mjx-container &gt; svg) { filter: invert(100%) hue-rotate(180deg); }&#xa;svg.ge-export-svg-dark foreignObject img,&#xa;svg.ge-export-svg-dark image:not(svg.ge-export-svg-dark switch image),&#xa;svg.ge-export-svg-dark svg:not(mjx-container &gt; svg)&#xa;{ filter: invert(100%) hue-rotate(180deg) }</style></defs><rect fill=\"#ffffff\" width=\"100%\" height=\"100%\" x=\"0\" y=\"0\"/><g><g data-cell-id=\"0\"><g data-cell-id=\"1\"><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-1\"><g><rect x=\"0\" y=\"77\" width=\"120\" height=\"60\" rx=\"9\" ry=\"9\" fill=\"#dae8fc\" stroke=\"#6c8ebf\" pointer-events=\"all\"/></g><g><g transform=\"translate(-0.5 -0.5)scale(0.9999999999999999)\"><switch><foreignObject pointer-events=\"none\" width=\"101%\" height=\"101%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 107px; margin-left: 1px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\">Concept\u00a0<span style=\"background-color: initial;\">Extractor</span><div><span style=\"background-color: initial;\">Agent</span></div></div></div></div></foreignObject><text x=\"60\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"12px\" text-anchor=\"middle\">Concept\u00a0Extractor...</text></switch></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-2\"><g><rect x=\"213\" y=\"77\" width=\"120\" height=\"60\" rx=\"9\" ry=\"9\" fill=\"#dae8fc\" stroke=\"#6c8ebf\" pointer-events=\"all\"/></g><g><g transform=\"translate(-0.5 -0.5)scale(0.9999999999999999)\"><switch><foreignObject pointer-events=\"none\" width=\"101%\" height=\"101%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 107px; margin-left: 214px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\"><div>Writer Agent</div></div></div></div></foreignObject><text x=\"273\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"12px\" text-anchor=\"middle\">Writer Agent</text></switch></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-3\"><g><rect x=\"428\" y=\"77\" width=\"120\" height=\"60\" rx=\"9\" ry=\"9\" fill=\"#dae8fc\" stroke=\"#6c8ebf\" pointer-events=\"all\"/></g><g><g transform=\"translate(-0.5 -0.5)scale(0.9999999999999999)\"><switch><foreignObject pointer-events=\"none\" width=\"101%\" height=\"101%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 107px; margin-left: 429px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\"><div>Format\u00a0<span style=\"background-color: initial;\">Proof</span></div><div><span style=\"background-color: initial;\">Agent</span></div></div></div></div></foreignObject><text x=\"488\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"12px\" text-anchor=\"middle\">Format\u00a0Proof...</text></switch></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-4\"><g><rect x=\"624\" y=\"77\" width=\"120\" height=\"60\" rx=\"9\" ry=\"9\" fill=\"#dae8fc\" stroke=\"#6c8ebf\" pointer-events=\"all\"/></g><g><g transform=\"translate(-0.5 -0.5)scale(0.9999999999999999)\"><switch><foreignObject pointer-events=\"none\" width=\"101%\" height=\"101%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 107px; margin-left: 625px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\"><div>User Agent</div></div></div></div></foreignObject><text x=\"684\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"12px\" text-anchor=\"middle\">User Agent</text></switch></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-5\"><g><path d=\"M 120 106.75 L 206.63 106.75\" fill=\"none\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"stroke\"/><path d=\"M 211.88 106.75 L 204.88 110.25 L 206.63 106.75 L 204.88 103.25 Z\" fill=\"rgb(0, 0, 0)\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"all\"/></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-11\"><g><g transform=\"translate(-0.5 -0.5)scale(0.9999999999999999)\"><switch><foreignObject pointer-events=\"none\" width=\"101%\" height=\"101%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 107px; margin-left: 163px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;\">Product<div>Concepts</div></div></div></div></foreignObject><text x=\"163\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"11px\" text-anchor=\"middle\">Product...</text></switch></g></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-6\"><g><path d=\"M 333 107 L 421.63 107\" fill=\"none\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"stroke\"/><path d=\"M 426.88 107 L 419.88 110.5 L 421.63 107 L 419.88 103.5 Z\" fill=\"rgb(0, 0, 0)\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"all\"/></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-13\"><g><g transform=\"translate(-0.5 -0.5)scale(0.9999999999999999)\"><switch><foreignObject pointer-events=\"none\" width=\"101%\" height=\"101%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 108px; margin-left: 382px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;\">Marketing\u00a0<div>Copy</div></div></div></div></foreignObject><text x=\"382\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"11px\" text-anchor=\"middle\">Marketing...</text></switch></g></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-7\"><g><path d=\"M 548 107 L 617.63 107\" fill=\"none\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"stroke\"/><path d=\"M 622.88 107 L 615.88 110.5 L 617.63 107 L 615.88 103.5 Z\" fill=\"rgb(0, 0, 0)\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"all\"/></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-14\"><g><g transform=\"translate(-0.5 -0.5)scale(0.9999999999999999)\"><switch><foreignObject pointer-events=\"none\" width=\"101%\" height=\"101%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 108px; margin-left: 584px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;\">Final\u00a0<div>Copy</div></div></div></div></foreignObject><text x=\"584\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"11px\" text-anchor=\"middle\">Final...</text></switch></g></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-9\"><g><path d=\"M 60 7 L 60 70.63\" fill=\"none\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"stroke\"/><path d=\"M 60 75.88 L 56.5 68.88 L 60 70.63 L 63.5 68.88 Z\" fill=\"rgb(0, 0, 0)\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"all\"/></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-15\"><g><g transform=\"translate(-0.5 -0.5)scale(0.9999999999999999)\"><switch><foreignObject pointer-events=\"none\" width=\"101%\" height=\"101%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 30px; margin-left: 58px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;\">Product Description</div></div></div></foreignObject><text x=\"58\" y=\"33\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"11px\" text-anchor=\"middle\">Product Description</text></switch></g></g></g></g></g></g></g></svg>",
                    "\\ No newline at end of file"
                ],
                "after": [
                    " <!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">",
                    "-<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"746px\" height=\"139px\" viewBox=\"-0.5 -0.5 746 139\" class=\"ge-export-svg-dark\" style=\"background-color: rgb(0, 0, 0);\"><defs><style type=\"text/css\">svg.ge-export-svg-dark:not(mjx-container &gt; svg) { filter: invert(100%) hue-rotate(180deg); }&#xa;svg.ge-export-svg-dark foreignObject img,&#xa;svg.ge-export-svg-dark image:not(svg.ge-export-svg-dark switch image),&#xa;svg.ge-export-svg-dark svg:not(mjx-container &gt; svg)&#xa;{ filter: invert(100%) hue-rotate(180deg) }</style></defs><rect fill=\"#ffffff\" width=\"100%\" height=\"100%\" x=\"0\" y=\"0\"/><g><g data-cell-id=\"0\"><g data-cell-id=\"1\"><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-1\"><g><rect x=\"0\" y=\"77\" width=\"120\" height=\"60\" rx=\"9\" ry=\"9\" fill=\"#dae8fc\" stroke=\"#6c8ebf\" pointer-events=\"all\"/></g><g><g transform=\"translate(-0.5 -0.5)scale(0.9999999999999999)\"><switch><foreignObject pointer-events=\"none\" width=\"101%\" height=\"101%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 107px; margin-left: 1px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\">Concept\u00a0<span style=\"background-color: initial;\">Extractor</span><div><span style=\"background-color: initial;\">Agent</span></div></div></div></div></foreignObject><text x=\"60\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"12px\" text-anchor=\"middle\">Concept\u00a0Extractor...</text></switch></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-2\"><g><rect x=\"213\" y=\"77\" width=\"120\" height=\"60\" rx=\"9\" ry=\"9\" fill=\"#dae8fc\" stroke=\"#6c8ebf\" pointer-events=\"all\"/></g><g><g transform=\"translate(-0.5 -0.5)scale(0.9999999999999999)\"><switch><foreignObject pointer-events=\"none\" width=\"101%\" height=\"101%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 107px; margin-left: 214px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\"><div>Writer Agent</div></div></div></div></foreignObject><text x=\"273\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"12px\" text-anchor=\"middle\">Writer Agent</text></switch></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-3\"><g><rect x=\"428\" y=\"77\" width=\"120\" height=\"60\" rx=\"9\" ry=\"9\" fill=\"#dae8fc\" stroke=\"#6c8ebf\" pointer-events=\"all\"/></g><g><g transform=\"translate(-0.5 -0.5)scale(0.9999999999999999)\"><switch><foreignObject pointer-events=\"none\" width=\"101%\" height=\"101%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 107px; margin-left: 429px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\"><div>Format\u00a0<span style=\"background-color: initial;\">Proof</span></div><div><span style=\"background-color: initial;\">Agent</span></div></div></div></div></foreignObject><text x=\"488\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"12px\" text-anchor=\"middle\">Format\u00a0Proof...</text></switch></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-4\"><g><rect x=\"624\" y=\"77\" width=\"120\" height=\"60\" rx=\"9\" ry=\"9\" fill=\"#dae8fc\" stroke=\"#6c8ebf\" pointer-events=\"all\"/></g><g><g transform=\"translate(-0.5 -0.5)scale(0.9999999999999999)\"><switch><foreignObject pointer-events=\"none\" width=\"101%\" height=\"101%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 107px; margin-left: 625px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\"><div>User Agent</div></div></div></div></foreignObject><text x=\"684\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"12px\" text-anchor=\"middle\">User Agent</text></switch></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-5\"><g><path d=\"M 120 106.75 L 206.63 106.75\" fill=\"none\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"stroke\"/><path d=\"M 211.88 106.75 L 204.88 110.25 L 206.63 106.75 L 204.88 103.25 Z\" fill=\"rgb(0, 0, 0)\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"all\"/></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-11\"><g><g transform=\"translate(-0.5 -0.5)scale(0.9999999999999999)\"><switch><foreignObject pointer-events=\"none\" width=\"101%\" height=\"101%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 107px; margin-left: 163px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;\">Product<div>Concepts</div></div></div></div></foreignObject><text x=\"163\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"11px\" text-anchor=\"middle\">Product...</text></switch></g></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-6\"><g><path d=\"M 333 107 L 421.63 107\" fill=\"none\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"stroke\"/><path d=\"M 426.88 107 L 419.88 110.5 L 421.63 107 L 419.88 103.5 Z\" fill=\"rgb(0, 0, 0)\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"all\"/></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-13\"><g><g transform=\"translate(-0.5 -0.5)scale(0.9999999999999999)\"><switch><foreignObject pointer-events=\"none\" width=\"101%\" height=\"101%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 108px; margin-left: 382px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;\">Marketing\u00a0<div>Copy</div></div></div></div></foreignObject><text x=\"382\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"11px\" text-anchor=\"middle\">Marketing...</text></switch></g></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-7\"><g><path d=\"M 548 107 L 617.63 107\" fill=\"none\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"stroke\"/><path d=\"M 622.88 107 L 615.88 110.5 L 617.63 107 L 615.88 103.5 Z\" fill=\"rgb(0, 0, 0)\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"all\"/></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-14\"><g><g transform=\"translate(-0.5 -0.5)scale(0.9999999999999999)\"><switch><foreignObject pointer-events=\"none\" width=\"101%\" height=\"101%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 108px; margin-left: 584px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;\">Final\u00a0<div>Copy</div></div></div></div></foreignObject><text x=\"584\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"11px\" text-anchor=\"middle\">Final...</text></switch></g></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-9\"><g><path d=\"M 60 7 L 60 70.63\" fill=\"none\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"stroke\"/><path d=\"M 60 75.88 L 56.5 68.88 L 60 70.63 L 63.5 68.88 Z\" fill=\"rgb(0, 0, 0)\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"all\"/></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-15\"><g><g transform=\"translate(-0.5 -0.5)scale(0.9999999999999999)\"><switch><foreignObject pointer-events=\"none\" width=\"101%\" height=\"101%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 30px; margin-left: 58px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;\">Product Description</div></div></div></foreignObject><text x=\"58\" y=\"33\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"11px\" text-anchor=\"middle\">Product Description</text></switch></g></g></g></g></g></g></g></svg>",
                    "\\ No newline at end of file",
                    "+<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" width=\"745px\" height=\"138px\" viewBox=\"-0.5 -0.5 745 138\" class=\"ge-export-svg-auto\" style=\"background-color: rgb(255, 255, 255);\"><defs><style type=\"text/css\">@media (prefers-color-scheme: dark) {&#xa;svg.ge-export-svg-auto:not(mjx-container &gt; svg) { filter: invert(100%) hue-rotate(180deg); }&#xa;svg.ge-export-svg-auto foreignObject img,&#xa;svg.ge-export-svg-auto image:not(svg.ge-export-svg-auto switch image),&#xa;svg.ge-export-svg-auto svg:not(mjx-container &gt; svg)&#xa;{ filter: invert(100%) hue-rotate(180deg) }&#xa;svg.ge-export-svg-auto { background-color: #000000 !important; }&#xa;}</style></defs><rect fill=\"#ffffff\" width=\"100%\" height=\"100%\" x=\"0\" y=\"0\"/><g><g data-cell-id=\"0\"><g data-cell-id=\"1\"><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-1\"><g><rect x=\"0\" y=\"77\" width=\"120\" height=\"60\" rx=\"9\" ry=\"9\" fill=\"#dae8fc\" stroke=\"#6c8ebf\" pointer-events=\"all\"/></g><g><g transform=\"translate(-0.5 -0.5)\"><switch><foreignObject pointer-events=\"none\" width=\"100%\" height=\"100%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 107px; margin-left: 1px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\">Concept\u00a0<span style=\"background-color: initial;\">Extractor</span><div><span style=\"background-color: initial;\">Agent</span></div></div></div></div></foreignObject><text x=\"60\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"12px\" text-anchor=\"middle\">Concept\u00a0Extractor...</text></switch></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-2\"><g><rect x=\"213\" y=\"77\" width=\"120\" height=\"60\" rx=\"9\" ry=\"9\" fill=\"#dae8fc\" stroke=\"#6c8ebf\" pointer-events=\"all\"/></g><g><g transform=\"translate(-0.5 -0.5)\"><switch><foreignObject pointer-events=\"none\" width=\"100%\" height=\"100%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 107px; margin-left: 214px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\"><div>Writer Agent</div></div></div></div></foreignObject><text x=\"273\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"12px\" text-anchor=\"middle\">Writer Agent</text></switch></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-3\"><g><rect x=\"428\" y=\"77\" width=\"120\" height=\"60\" rx=\"9\" ry=\"9\" fill=\"#dae8fc\" stroke=\"#6c8ebf\" pointer-events=\"all\"/></g><g><g transform=\"translate(-0.5 -0.5)\"><switch><foreignObject pointer-events=\"none\" width=\"100%\" height=\"100%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 107px; margin-left: 429px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\"><div>Format\u00a0<span style=\"background-color: initial;\">Proof</span></div><div><span style=\"background-color: initial;\">Agent</span></div></div></div></div></foreignObject><text x=\"488\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"12px\" text-anchor=\"middle\">Format\u00a0Proof...</text></switch></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-4\"><g><rect x=\"624\" y=\"77\" width=\"120\" height=\"60\" rx=\"9\" ry=\"9\" fill=\"#dae8fc\" stroke=\"#6c8ebf\" pointer-events=\"all\"/></g><g><g transform=\"translate(-0.5 -0.5)\"><switch><foreignObject pointer-events=\"none\" width=\"100%\" height=\"100%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 107px; margin-left: 625px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; white-space: normal; overflow-wrap: normal;\"><div>User Agent</div></div></div></div></foreignObject><text x=\"684\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"12px\" text-anchor=\"middle\">User Agent</text></switch></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-5\"><g><path d=\"M 120 106.75 L 206.63 106.75\" fill=\"none\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"stroke\"/><path d=\"M 211.88 106.75 L 204.88 110.25 L 206.63 106.75 L 204.88 103.25 Z\" fill=\"rgb(0, 0, 0)\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"all\"/></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-11\"><g><g transform=\"translate(-0.5 -0.5)\"><switch><foreignObject pointer-events=\"none\" width=\"100%\" height=\"100%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 107px; margin-left: 164px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;\">Product<div>Concepts</div></div></div></div></foreignObject><text x=\"164\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"11px\" text-anchor=\"middle\">Product...</text></switch></g></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-6\"><g><path d=\"M 333 107 L 421.63 107\" fill=\"none\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"stroke\"/><path d=\"M 426.88 107 L 419.88 110.5 L 421.63 107 L 419.88 103.5 Z\" fill=\"rgb(0, 0, 0)\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"all\"/></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-13\"><g><g transform=\"translate(-0.5 -0.5)\"><switch><foreignObject pointer-events=\"none\" width=\"100%\" height=\"100%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 108px; margin-left: 383px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;\">Marketing\u00a0<div>Copy</div></div></div></div></foreignObject><text x=\"383\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"11px\" text-anchor=\"middle\">Marketing...</text></switch></g></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-7\"><g><path d=\"M 548 107 L 617.63 107\" fill=\"none\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"stroke\"/><path d=\"M 622.88 107 L 615.88 110.5 L 617.63 107 L 615.88 103.5 Z\" fill=\"rgb(0, 0, 0)\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"all\"/></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-14\"><g><g transform=\"translate(-0.5 -0.5)\"><switch><foreignObject pointer-events=\"none\" width=\"100%\" height=\"100%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 108px; margin-left: 584px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;\">Final\u00a0<div>Copy</div></div></div></div></foreignObject><text x=\"584\" y=\"111\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"11px\" text-anchor=\"middle\">Final...</text></switch></g></g></g></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-9\"><g><path d=\"M 60 7 L 60 70.63\" fill=\"none\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"stroke\"/><path d=\"M 60 75.88 L 56.5 68.88 L 60 70.63 L 63.5 68.88 Z\" fill=\"rgb(0, 0, 0)\" stroke=\"rgb(0, 0, 0)\" stroke-miterlimit=\"10\" pointer-events=\"all\"/></g><g data-cell-id=\"sqq-OtPLxvXwgYRML6Fe-15\"><g><g transform=\"translate(-0.5 -0.5)\"><switch><foreignObject pointer-events=\"none\" width=\"100%\" height=\"100%\" requiredFeatures=\"http://www.w3.org/TR/SVG11/feature#Extensibility\" style=\"overflow: visible; text-align: left;\"><div xmlns=\"http://www.w3.org/1999/xhtml\" style=\"display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 30px; margin-left: 58px;\"><div data-drawio-colors=\"color: rgb(0, 0, 0); background-color: rgb(255, 255, 255); \" style=\"box-sizing: border-box; font-size: 0px; text-align: center;\"><div style=\"display: inline-block; font-size: 11px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: all; background-color: rgb(255, 255, 255); white-space: nowrap;\">Product Description</div></div></div></foreignObject><text x=\"58\" y=\"33\" fill=\"rgb(0, 0, 0)\" font-family=\"&quot;Helvetica&quot;\" font-size=\"11px\" text-anchor=\"middle\">Product Description</text></switch></g></g></g></g></g></g></g></svg>",
                    "\\ No newline at end of file"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/index.md": {
                "before": [
                    "@@ -5,6 +5,7 @@",
                    " :hidden:",
                    " ",
                    " agentchat-user-guide/index",
                    "+autogenstudio-user-guide/index"
                ],
                "after": [
                    "         window.location.href = \"agentchat-user-guide/quickstart.html\";",
                    "     }, 0);",
                    "-</script>",
                    "\\ No newline at end of file",
                    "+</script>"
                ]
            },
            "python/packages/autogen-core/samples/protos/agent_events_pb2.py": {
                "before": [
                    "@@ -3,49 +3,47 @@",
                    " # source: agent_events.proto",
                    " # Protobuf Python Version: 4.25.1",
                    " \"\"\"Generated protocol buffer code.\"\"\"",
                    "-"
                ],
                "after": [
                    "+  _globals['_CONVERSATIONCLOSED']._serialized_start=368",
                    "+  _globals['_CONVERSATIONCLOSED']._serialized_end=427",
                    "+  _globals['_SHUTDOWN']._serialized_start=429",
                    "+  _globals['_SHUTDOWN']._serialized_end=456",
                    " # @@protoc_insertion_point(module_scope)"
                ]
            },
            "python/packages/autogen-core/samples/protos/agent_events_pb2_grpc.py": {
                "before": [
                    "@@ -1,4 +1,4 @@",
                    " # Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!",
                    " \"\"\"Client and server classes corresponding to protobuf-defined services.\"\"\"",
                    "-",
                    " import grpc"
                ],
                "after": [
                    " # Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!",
                    " \"\"\"Client and server classes corresponding to protobuf-defined services.\"\"\"",
                    "-",
                    " import grpc",
                    "+"
                ]
            },
            "python/packages/autogen-ext/pyproject.toml": {
                "before": [
                    "@@ -32,6 +32,7 @@ web-surfer = [",
                    "     \"autogen-agentchat==0.4.0.dev11\",",
                    "     \"playwright>=1.48.0\",",
                    "     \"pillow>=11.0.0\",",
                    "+    \"markitdown>=0.0.1a2\","
                ],
                "after": [
                    "+]",
                    "+test.default_item_type = \"cmd\"",
                    " mypy = \"mypy --config-file ../../pyproject.toml --exclude src/autogen_ext/runtimes/grpc/protos --exclude tests/protos src tests\"",
                    " ",
                    " [tool.mypy]"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/agents/web_surfer/__init__.py": {
                "before": [
                    "@@ -1,3 +1,4 @@",
                    " from ._multimodal_web_surfer import MultimodalWebSurfer",
                    "+from .playwright_controller import PlaywrightController",
                    " ",
                    "-__all__ = [\"MultimodalWebSurfer\"]"
                ],
                "after": [
                    " from ._multimodal_web_surfer import MultimodalWebSurfer",
                    "+from .playwright_controller import PlaywrightController",
                    " ",
                    "-__all__ = [\"MultimodalWebSurfer\"]",
                    "+__all__ = [\"MultimodalWebSurfer\", \"PlaywrightController\"]"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/agents/web_surfer/_multimodal_web_surfer.py": {
                "before": [
                    "@@ -9,37 +9,35 @@",
                    " import traceback",
                    " from typing import (",
                    "     Any,",
                    "+    AsyncGenerator,"
                ],
                "after": [
                    "         response = await self._model_client.create(messages, cancellation_token=cancellation_token)",
                    "+        self.model_usage.append(response.usage)",
                    "         scaled_screenshot.close()",
                    "         assert isinstance(response.content, str)",
                    "         return response.content"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/agents/web_surfer/playwright_controller.py": {
                "before": [
                    "@@ -1,9 +1,15 @@",
                    " import asyncio",
                    " import base64",
                    "+import io",
                    " import os"
                ],
                "after": [
                    "+            res = self._markdown_converter.convert_stream(io.StringIO(html), file_extension=\".html\", url=page.url)  # type: ignore",
                    "+            assert hasattr(res, \"text_content\") and isinstance(res.text_content, str)",
                    "+            return res.text_content",
                    "+        else:",
                    "+            return await self.get_webpage_text(page, n_lines=200)"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/runtimes/grpc/protos/agent_worker_pb2.py": {
                "before": [
                    "@@ -16,14 +16,14 @@",
                    " from google.protobuf import any_pb2 as google_dot_protobuf_dot_any__pb2",
                    " ",
                    " ",
                    "-DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\\n\\x12\\x61gent_worker.proto\\x12\\x06\\x61gents\\x1a\\x10\\x63loudevent.proto\\x1a\\x19google/protobuf/any.proto\\\"\\'\\n\\x07TopicId\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\t\\x12\\x0e\\n\\x06source\\x18\\x02 \\x01(\\t\\\"$\\n\\x07\\x41gentId\\x12\\x0c\\n\\x04type\\x18\\x01 \\x01(\\t\\x12\\x0b\\n\\x03key\\x18\\x02 \\x01(\\t\\\"E\\n\\x07Payload\\x12\\x11\\n\\tdata_type\\x18\\x01 \\x01(\\t\\x12\\x19\\n\\x11\\x64\\x61ta_content_type\\x18\\x02 \\x01(\\t\\x12\\x0c\\n\\x04\\x64\\x61ta\\x18\\x03 \\x01(\\x0c\\\"\\x89\\x02\\n\\nRpcRequest\\x12\\x12\\n\\nrequest_id\\x18\\x01 \\x01(\\t\\x12$\\n\\x06source\\x18\\x02 \\x01(\\x0b\\x32\\x0f.agents.AgentIdH\\x00\\x88\\x01\\x01\\x12\\x1f\\n\\x06target\\x18\\x03 \\x01(\\x0b\\x32\\x0f.agents.AgentId\\x12\\x0e\\n\\x06method\\x18\\x04 \\x01(\\t\\x12 \\n\\x07payload\\x18\\x05 \\x01(\\x0b\\x32\\x0f.agents.Payload\\x12\\x32\\n\\x08metadata\\x18\\x06 \\x03(\\x0b\\x32 .agents.RpcRequest.MetadataEntry\\x1a/\\n\\rMetadataEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x42\\t\\n\\x07_source\\\"\\xb8\\x01\\n\\x0bRpcResponse\\x12\\x12\\n\\nrequest_id\\x18\\x01 \\x01(\\t\\x12 \\n\\x07payload\\x18\\x02 \\x01(\\x0b\\x32\\x0f.agents.Payload\\x12\\r\\n\\x05\\x65rror\\x18\\x03 \\x01(\\t\\x12\\x33\\n\\x08metadata\\x18\\x04 \\x03(\\x0b\\x32!.agents.RpcResponse.MetadataEntry\\x1a/\\n\\rMetadataEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\\"\\xe4\\x01\\n\\x05\\x45vent\\x12\\x12\\n\\ntopic_type\\x18\\x01 \\x01(\\t\\x12\\x14\\n\\x0ctopic_source\\x18\\x02 \\x01(\\t\\x12$\\n\\x06source\\x18\\x03 \\x01(\\x0b\\x32\\x0f.agents.AgentIdH\\x00\\x88\\x01\\x01\\x12 \\n\\x07payload\\x18\\x04 \\x01(\\x0b\\x32\\x0f.agents.Payload\\x12-\\n\\x08metadata\\x18\\x05 \\x03(\\x0b\\x32\\x1b.agents.Event.MetadataEntry\\x1a/\\n\\rMetadataEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x42\\t\\n\\x07_source\\\"<\\n\\x18RegisterAgentTypeRequest\\x12\\x12\\n\\nrequest_id\\x18\\x01 \\x01(\\t\\x12\\x0c\\n\\x04type\\x18\\x02 \\x01(\\t\\\"^\\n\\x19RegisterAgentTypeResponse\\x12\\x12\\n\\nrequest_id\\x18\\x01 \\x01(\\t\\x12\\x0f\\n\\x07success\\x18\\x02 \\x01(\\x08\\x12\\x12\\n\\x05\\x65rror\\x18\\x03 \\x01(\\tH\\x00\\x88\\x01\\x01\\x42\\x08\\n\\x06_error\\\":\\n\\x10TypeSubscription\\x12\\x12\\n\\ntopic_type\\x18\\x01 \\x01(\\t\\x12\\x12\\n\\nagent_type\\x18\\x02 \\x01(\\t\\\"G\\n\\x16TypePrefixSubscription\\x12\\x19\\n\\x11topic_type_prefix\\x18\\x01 \\x01(\\t\\x12\\x12\\n\\nagent_type\\x18\\x02 \\x01(\\t\\\"\\x96\\x01\\n\\x0cSubscription\\x12\\x34\\n\\x10typeSubscription\\x18\\x01 \\x01(\\x0b\\x32\\x18.agents.TypeSubscriptionH\\x00\\x12@\\n\\x16typePrefixSubscription\\x18\\x02 \\x01(\\x0b\\x32\\x1e.agents.TypePrefixSubscriptionH\\x00\\x42\\x0e\\n\\x0csubscription\\\"X\\n\\x16\\x41\\x64\\x64SubscriptionRequest\\x12\\x12\\n\\nrequest_id\\x18\\x01 \\x01(\\t\\x12*\\n\\x0csubscription\\x18\\x02 \\x01(\\x0b\\x32\\x14.agents.Subscription\\\"\\\\\\n\\x17\\x41\\x64\\x64SubscriptionResponse\\x12\\x12\\n\\nrequest_id\\x18\\x01 \\x01(\\t\\x12\\x0f\\n\\x07success\\x18\\x02 \\x01(\\x08\\x12\\x12\\n\\x05\\x65rror\\x18\\x03 \\x01(\\tH\\x00\\x88\\x01\\x01\\x42\\x08\\n\\x06_error\\\"\\x9d\\x01\\n\\nAgentState\\x12!\\n\\x08\\x61gent_id\\x18\\x01 \\x01(\\x0b\\x32\\x0f.agents.AgentId\\x12\\x0c\\n\\x04\\x65Tag\\x18\\x02 \\x01(\\t\\x12\\x15\\n\\x0b\\x62inary_data\\x18\\x03 \\x01(\\x0cH\\x00\\x12\\x13\\n\\ttext_data\\x18\\x04 \\x01(\\tH\\x00\\x12*\\n\\nproto_data\\x18\\x05 \\x01(\\x0b\\x32\\x14.google.protobuf.AnyH\\x00\\x42\\x06\\n\\x04\\x64\\x61ta\\\"j\\n\\x10GetStateResponse\\x12\\'\\n\\x0b\\x61gent_state\\x18\\x01 \\x01(\\x0b\\x32\\x12.agents.AgentState\\x12\\x0f\\n\\x07success\\x18\\x02 \\x01(\\x08\\x12\\x12\\n\\x05\\x65rror\\x18\\x03 \\x01(\\tH\\x00\\x88\\x01\\x01\\x42\\x08\\n\\x06_error\\\"B\\n\\x11SaveStateResponse\\x12\\x0f\\n\\x07success\\x18\\x01 \\x01(\\x08\\x12\\x12\\n\\x05\\x65rror\\x18\\x02 \\x01(\\tH\\x00\\x88\\x01\\x01\\x42\\x08\\n\\x06_error\\\"\\xad\\x03\\n\\x07Message\\x12%\\n\\x07request\\x18\\x01 \\x01(\\x0b\\x32\\x12.agents.RpcRequestH\\x00\\x12\\'\\n\\x08response\\x18\\x02 \\x01(\\x0b\\x32\\x13.agents.RpcResponseH\\x00\\x12\\x33\\n\\ncloudEvent\\x18\\x03 \\x01(\\x0b\\x32\\x1d.io.cloudevents.v1.CloudEventH\\x00\\x12\\x44\\n\\x18registerAgentTypeRequest\\x18\\x04 \\x01(\\x0b\\x32 .agents.RegisterAgentTypeRequestH\\x00\\x12\\x46\\n\\x19registerAgentTypeResponse\\x18\\x05 \\x01(\\x0b\\x32!.agents.RegisterAgentTypeResponseH\\x00\\x12@\\n\\x16\\x61\\x64\\x64SubscriptionRequest\\x18\\x06 \\x01(\\x0b\\x32\\x1e.agents.AddSubscriptionRequestH\\x00\\x12\\x42\\n\\x17\\x61\\x64\\x64SubscriptionResponse\\x18\\x07 \\x01(\\x0b\\x32\\x1f.agents.AddSubscriptionResponseH\\x00\\x42\\t\\n\\x07message2\\xb2\\x01\\n\\x08\\x41gentRpc\\x12\\x33\\n\\x0bOpenChannel\\x12\\x0f.agents.Message\\x1a\\x0f.agents.Message(\\x01\\x30\\x01\\x12\\x35\\n\\x08GetState\\x12\\x0f.agents.AgentId\\x1a\\x18.agents.GetStateResponse\\x12:\\n\\tSaveState\\x12\\x12.agents.AgentState\\x1a\\x19.agents.SaveStateResponseB!\\xaa\\x02\\x1eMicrosoft.AutoGen.Abstractionsb\\x06proto3')"
                ],
                "after": [
                    "-  _globals['DESCRIPTOR']._serialized_options = b'\\252\\002\\036Microsoft.AutoGen.Abstractions'",
                    "+  _globals['DESCRIPTOR']._serialized_options = b'\\252\\002\\033Microsoft.AutoGen.Contracts'",
                    "   _globals['_RPCREQUEST_METADATAENTRY']._options = None",
                    "   _globals['_RPCREQUEST_METADATAENTRY']._serialized_options = b'8\\001'",
                    "   _globals['_RPCRESPONSE_METADATAENTRY']._options = None"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/runtimes/grpc/protos/cloudevent_pb2.py": {
                "before": [
                    "@@ -16,14 +16,14 @@",
                    " from google.protobuf import timestamp_pb2 as google_dot_protobuf_dot_timestamp__pb2",
                    " ",
                    " ",
                    "-DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\\n\\x10\\x63loudevent.proto\\x12\\x11io.cloudevents.v1\\x1a\\x19google/protobuf/any.proto\\x1a\\x1fgoogle/protobuf/timestamp.proto\\\"\\xb0\\x04\\n\\nCloudEvent\\x12\\n\\n\\x02id\\x18\\x01 \\x01(\\t\\x12\\x0e\\n\\x06source\\x18\\x02 \\x01(\\t\\x12\\x14\\n\\x0cspec_version\\x18\\x03 \\x01(\\t\\x12\\x0c\\n\\x04type\\x18\\x04 \\x01(\\t\\x12\\x41\\n\\nattributes\\x18\\x05 \\x03(\\x0b\\x32-.io.cloudevents.v1.CloudEvent.AttributesEntry\\x12\\x15\\n\\x0b\\x62inary_data\\x18\\x06 \\x01(\\x0cH\\x00\\x12\\x13\\n\\ttext_data\\x18\\x07 \\x01(\\tH\\x00\\x12*\\n\\nproto_data\\x18\\x08 \\x01(\\x0b\\x32\\x14.google.protobuf.AnyH\\x00\\x1ai\\n\\x0f\\x41ttributesEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\x45\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32\\x36.io.cloudevents.v1.CloudEvent.CloudEventAttributeValue:\\x02\\x38\\x01\\x1a\\xd3\\x01\\n\\x18\\x43loudEventAttributeValue\\x12\\x14\\n\\nce_boolean\\x18\\x01 \\x01(\\x08H\\x00\\x12\\x14\\n\\nce_integer\\x18\\x02 \\x01(\\x05H\\x00\\x12\\x13\\n\\tce_string\\x18\\x03 \\x01(\\tH\\x00\\x12\\x12\\n\\x08\\x63\\x65_bytes\\x18\\x04 \\x01(\\x0cH\\x00\\x12\\x10\\n\\x06\\x63\\x65_uri\\x18\\x05 \\x01(\\tH\\x00\\x12\\x14\\n\\nce_uri_ref\\x18\\x06 \\x01(\\tH\\x00\\x12\\x32\\n\\x0c\\x63\\x65_timestamp\\x18\\x07 \\x01(\\x0b\\x32\\x1a.google.protobuf.TimestampH\\x00\\x42\\x06\\n\\x04\\x61ttrB\\x06\\n\\x04\\x64\\x61taB!\\xaa\\x02\\x1eMicrosoft.AutoGen.Abstractionsb\\x06proto3')"
                ],
                "after": [
                    "-  _globals['DESCRIPTOR']._serialized_options = b'\\252\\002\\036Microsoft.AutoGen.Abstractions'",
                    "+  _globals['DESCRIPTOR']._serialized_options = b'\\252\\002\\033Microsoft.AutoGen.Contracts'",
                    "   _globals['_CLOUDEVENT_ATTRIBUTESENTRY']._options = None",
                    "   _globals['_CLOUDEVENT_ATTRIBUTESENTRY']._serialized_options = b'8\\001'",
                    "   _globals['_CLOUDEVENT']._serialized_start=100"
                ]
            },
            "python/packages/autogen-ext/tests/test_playwright_controller.py": {
                "before": [
                    "@@ -0,0 +1,78 @@",
                    "+import pytest",
                    "+from autogen_ext.agents.web_surfer.playwright_controller import PlaywrightController",
                    "+from playwright.async_api import async_playwright",
                    "+"
                ],
                "after": [
                    "+                input_box_id = str(rect)",
                    "+                break",
                    "+        controller = PlaywrightController()",
                    "+        await controller.fill_id(page, input_box_id, \"test input\")",
                    "+        assert await page.evaluate(\"document.getElementById('input-box').value\") == \"test input\""
                ]
            },
            "python/packages/autogen-ext/tests/test_websurfer_agent.py": {
                "before": [
                    "@@ -0,0 +1,147 @@",
                    "+import asyncio",
                    "+import json",
                    "+import logging",
                    "+from datetime import datetime"
                ],
                "after": [
                    "+            \"I am waiting a short period of time before taking further action.\\n\\n Here is a screenshot of the webpage:\"",
                    "+        )",
                    "+    )  # type: ignore",
                    "+    url_after_sleep = agent._page.url  # type: ignore",
                    "+    assert url_after_no_tool == url_after_sleep"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/database/component_factory.py": {
                "before": [
                    "@@ -18,34 +18,45 @@",
                    "     TokenUsageTermination,",
                    " )",
                    " from autogen_agentchat.teams import MagenticOneGroupChat, RoundRobinGroupChat, SelectorGroupChat",
                    "-from autogen_core.components.tools import FunctionTool"
                ],
                "after": [
                    "+                    api_key=config.api_key,",
                    "+                )",
                    "                 self._model_cache[cache_key] = model",
                    "                 return model",
                    "             else:"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/datamodel/db.py": {
                "before": [
                    "@@ -118,7 +118,7 @@ class Tool(SQLModel, table=True):",
                    "     )  # pylint: disable=not-callable",
                    "     user_id: Optional[str] = None",
                    "     version: Optional[str] = \"0.0.1\"",
                    "-    config: Union[ToolConfig, dict] = Field(default_factory=ToolConfig, sa_column=Column(JSON))"
                ],
                "after": [
                    "-    config: Union[AgentConfig, dict] = Field(default_factory=AgentConfig, sa_column=Column(JSON))",
                    "+    config: Union[AgentConfig, dict] = Field(sa_column=Column(JSON))",
                    "     tools: List[Tool] = Relationship(back_populates=\"agents\", link_model=AgentToolLink)",
                    "     models: List[Model] = Relationship(back_populates=\"agents\", link_model=AgentModelLink)",
                    "     teams: List[Team] = Relationship(back_populates=\"agents\", link_model=TeamAgentLink)"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/datamodel/types.py": {
                "before": [
                    "@@ -1,14 +1,16 @@",
                    " from datetime import datetime",
                    " from enum import Enum",
                    " from pathlib import Path",
                    "-from typing import Any, Dict, List, Literal, Optional, Union"
                ],
                "after": [
                    "+",
                    "+",
                    " class TeamResult(BaseModel):",
                    "     task_result: TaskResult",
                    "     usage: str"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/teammanager.py": {
                "before": [
                    "@@ -44,6 +44,11 @@ async def run_stream(",
                    "                 else:",
                    "                     yield message",
                    " ",
                    "+            # close agent resources"
                ],
                "after": [
                    "+        for agent in team._participants:",
                    "+            if hasattr(agent, \"close\"):",
                    "+                await agent.close()",
                    "+",
                    "         return self._create_result(result, start_time)"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/web/managers/connection.py": {
                "before": [
                    "@@ -5,7 +5,16 @@",
                    " from uuid import UUID",
                    " ",
                    " from autogen_agentchat.base._task import TaskResult",
                    "-from autogen_agentchat.messages import AgentMessage, ChatMessage, MultiModalMessage, TextMessage"
                ],
                "after": [
                    "             return None",
                    "+",
                    "         except Exception as e:",
                    "             logger.error(f\"Message formatting error: {e}\")",
                    "             return None"
                ]
            },
            "python/packages/autogen-studio/docs/ags_screen.png": {
                "before": [
                    "@@ -1,3 +1,3 @@",
                    " version https://git-lfs.github.com/spec/v1",
                    "-oid sha256:aa05d0e55262549880e3e06ca3839cffdbcd0836bd2b98690185255f03dc98ac",
                    "-size 194702",
                    "+oid sha256:54473a4fbfcded2b3e008b448c00117e801462cc7687b0bc14a1c22c92dbdb97"
                ],
                "after": [
                    " version https://git-lfs.github.com/spec/v1",
                    "-oid sha256:aa05d0e55262549880e3e06ca3839cffdbcd0836bd2b98690185255f03dc98ac",
                    "-size 194702",
                    "+oid sha256:54473a4fbfcded2b3e008b448c00117e801462cc7687b0bc14a1c22c92dbdb97",
                    "+size 621469"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/layout.tsx": {
                "before": [
                    "@@ -99,6 +99,10 @@ const Layout = ({",
                    " ",
                    "         <ConfigProvider",
                    "           theme={{",
                    "+            token: {"
                ],
                "after": [
                    "+              colorBgBase: darkMode === \"dark\" ? \"#05080C\" : \"#ffffff\",",
                    "+            },",
                    "             algorithm:",
                    "               darkMode === \"dark\"",
                    "                 ? theme.darkAlgorithm"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/sidebar.tsx": {
                "before": [
                    "@@ -9,6 +9,7 @@ import {",
                    "   Bot,",
                    "   PanelLeftClose,",
                    "   PanelLeftOpen,",
                    "+  GalleryHorizontalEnd,"
                ],
                "after": [
                    "+                    </Link>",
                    "+                  </div>",
                    "                 );",
                    " ",
                    "                 return ("
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/types/datamodel.ts": {
                "before": [
                    "@@ -98,6 +98,7 @@ export interface SessionRuns {",
                    " export interface BaseConfig {",
                    "   component_type: string;",
                    "   version?: string;",
                    "+  description?: string;"
                ],
                "after": [
                    "-  config: TeamConfigTypes;",
                    "+  config: TeamConfig;",
                    " }",
                    " ",
                    " export interface TeamResult {"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/gallery/create-modal.tsx": {
                "before": [
                    "@@ -0,0 +1,200 @@",
                    "+import React, { useState, useRef } from \"react\";",
                    "+import { Modal, Tabs, Input, Button, Alert, Upload } from \"antd\";",
                    "+import { Globe, Upload as UploadIcon, Code } from \"lucide-react\";",
                    "+import { MonacoEditor } from \"../monaco\";"
                ],
                "after": [
                    "+    </Modal>",
                    "+  );",
                    "+};",
                    "+",
                    "+export default GalleryCreateModal;"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/gallery/detail.tsx": {
                "before": [
                    "@@ -0,0 +1,315 @@",
                    "+import React, { useState, useRef } from \"react\";",
                    "+import { Button, message, Tooltip } from \"antd\";",
                    "+import {",
                    "+  Package,"
                ],
                "after": [
                    "+        </div>",
                    "+      )}",
                    "+    </div>",
                    "+  );",
                    "+};"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/gallery/manager.tsx": {
                "before": [
                    "@@ -0,0 +1,205 @@",
                    "+import React, { useEffect, useState } from \"react\";",
                    "+import { message, Modal } from \"antd\";",
                    "+import { ChevronRight } from \"lucide-react\";",
                    "+import { useGalleryStore } from \"./store\";"
                ],
                "after": [
                    "+    </div>",
                    "+  );",
                    "+};",
                    "+",
                    "+export default GalleryManager;"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/gallery/sidebar.tsx": {
                "before": [
                    "@@ -0,0 +1,276 @@",
                    "+import React from \"react\";",
                    "+import { Button, Tooltip, Tag } from \"antd\";",
                    "+import {",
                    "+  Plus,"
                ],
                "after": [
                    "+        </div>",
                    "+      )}",
                    "+    </div>",
                    "+  );",
                    "+};"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/gallery/store.tsx": {
                "before": [
                    "@@ -0,0 +1,156 @@",
                    "+import { create } from \"zustand\";",
                    "+import { persist } from \"zustand/middleware\";",
                    "+import { Gallery } from \"./types\";",
                    "+import {"
                ],
                "after": [
                    "+    {",
                    "+      name: \"gallery-storage\",",
                    "+    }",
                    "+  )",
                    "+);"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/gallery/types.ts": {
                "before": [
                    "@@ -0,0 +1,44 @@",
                    "+import {",
                    "+  AgentConfig,",
                    "+  ModelConfig,",
                    "+  TeamConfig,"
                ],
                "after": [
                    "+  getGallery: (id: string) => Promise<Gallery>;",
                    "+  createGallery: (gallery: Gallery) => Promise<Gallery>;",
                    "+  updateGallery: (gallery: Gallery) => Promise<Gallery>;",
                    "+  deleteGallery: (id: string) => Promise<void>;",
                    "+}"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/gallery/utils.ts": {
                "before": [
                    "@@ -0,0 +1,194 @@",
                    "+import {",
                    "+  AssistantAgentConfig,",
                    "+  CombinationTerminationConfig,",
                    "+  MaxMessageTerminationConfig,"
                ],
                "after": [
                    "+        } as CombinationTerminationConfig,",
                    "+      ],",
                    "+    },",
                    "+  },",
                    "+};"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/session/chat/agentflow/agentflow.tsx": {
                "before": [
                    "@@ -23,7 +23,7 @@ import AgentNode from \"./agentnode\";",
                    " import {",
                    "   AgentMessageConfig,",
                    "   AgentConfig,",
                    "-  TeamConfigTypes,"
                ],
                "after": [
                    "-  teamConfig: TeamConfigTypes;",
                    "+  teamConfig: TeamConfig;",
                    "   run: Run;",
                    " }",
                    " "
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/session/chat/chat.tsx": {
                "before": [
                    "@@ -6,7 +6,7 @@ import {",
                    "   Run,",
                    "   Message,",
                    "   WebSocketMessage,",
                    "-  TeamConfigTypes,"
                ],
                "after": [
                    "-          messageApi.error(\"Failed to load team config\");",
                    "+          // messageApi.error(\"Failed to load team config\");",
                    "           setTeamConfig(null);",
                    "         });",
                    "     }"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/session/chat/inputrequest.tsx": {
                "before": [
                    "@@ -123,7 +123,7 @@ const InputRequestView: React.FC<InputRequestProps> = ({",
                    "           onChange={handleInputChange}",
                    "           onKeyDown={handleKeyDown}",
                    "           disabled={disabled || isSubmitting}",
                    "-          className=\"flex-1 px-3 py-2 rounded bg-background border border-secondary focus:border-accent focus:ring-1 focus:ring-accent outline-none disabled:opacity-50\""
                ],
                "after": [
                    "-          className=\"flex-1 px-3 py-2 rounded bg-background border border-secondary focus:border-accent focus:ring-1 focus:ring-accent outline-none disabled:opacity-50\"",
                    "+          className=\"text-primary flex-1 px-3 py-2 rounded bg-tertiary border border-secondary focus:border-accent focus:ring-1 focus:ring-accent outline-none disabled:opacity-50\"",
                    "           placeholder={",
                    "             disabled",
                    "               ? \"Input timeout - please restart the conversation\""
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/session/chat/rendermessage.tsx": {
                "before": [
                    "@@ -45,7 +45,7 @@ const RenderMultiModal: React.FC<{ content: (string | ImageContent)[] }> = ({",
                    " const RenderToolCall: React.FC<{ content: FunctionCall[] }> = ({ content }) => (",
                    "   <div className=\"space-y-2\">",
                    "     {content.map((call) => (",
                    "-      <div key={call.id} className=\"border rounded p-2\">"
                ],
                "after": [
                    "-          className=\"text-sm mt-1 bg-secondary p-2 border rounded scroll overflow-x-scroll\"",
                    "+          className=\"text-sm mt-1 bg-secondary p-2 border border-secondary rounded scroll overflow-x-scroll\"",
                    "         />",
                    "       </div>",
                    "     ))}"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/session/chat/runview.tsx": {
                "before": [
                    "@@ -11,7 +11,7 @@ import {",
                    "   ChevronUp,",
                    "   Bot,",
                    " } from \"lucide-react\";",
                    "-import { Run, Message, TeamConfigTypes } from \"../../../types/datamodel\";"
                ],
                "after": [
                    "+                  </>",
                    "+                )}",
                    "               </div>",
                    "             )}",
                    "           </div>"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/session/manager.tsx": {
                "before": [
                    "@@ -37,7 +37,11 @@ export const SessionManager: React.FC = () => {",
                    "       setIsLoading(true);",
                    "       const data = await sessionAPI.listSessions(user.email);",
                    "       setSessions(data);",
                    "-      if (!session && data.length > 0) {"
                ],
                "after": [
                    "-        className={`flex-1 transition-all duration-200 ${",
                    "+        className={`flex-1 transition-all -mr-4 duration-200 ${",
                    "           isSidebarOpen ? \"ml-64\" : \"ml-12\"",
                    "         }`}",
                    "       >"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/session/sidebar.tsx": {
                "before": [
                    "@@ -6,6 +6,8 @@ import {",
                    "   Trash2,",
                    "   PanelLeftClose,",
                    "   PanelLeftOpen,",
                    "+  InfoIcon,"
                ],
                "after": [
                    "+                </Tooltip>",
                    "+              </div>",
                    "             </div>",
                    "           </div>",
                    "         ))}"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/builder/builder.tsx": {
                "before": [
                    "@@ -18,18 +18,18 @@ import {",
                    " } from \"@xyflow/react\";",
                    " import \"@xyflow/react/dist/style.css\";",
                    " import { Button, Layout, message, Modal, Switch, Tooltip } from \"antd\";",
                    "-import { Cable, Code2, Save } from \"lucide-react\";"
                ],
                "after": [
                    "+          </Tooltip>",
                    "+",
                    "           <Tooltip title=\"Save Changes\">",
                    "             <Button",
                    "               type=\"text\""
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/builder/components/library.tsx": {
                "before": [
                    "@@ -1,316 +0,0 @@",
                    "-import React from \"react\";",
                    "-import { Input, Collapse, type CollapseProps } from \"antd\";",
                    "-import { useDraggable } from \"@dnd-kit/core\";",
                    "-import { CSS } from \"@dnd-kit/utilities\";"
                ],
                "after": [
                    "-    </Sider>",
                    "-  );",
                    "-};",
                    "-",
                    "-export default ComponentLibrary;"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/builder/library.tsx": {
                "before": [
                    "@@ -0,0 +1,228 @@",
                    "+import React from \"react\";",
                    "+import { Input, Collapse, type CollapseProps } from \"antd\";",
                    "+import { useDraggable } from \"@dnd-kit/core\";",
                    "+import { CSS } from \"@dnd-kit/utilities\";"
                ],
                "after": [
                    "+    </Sider>",
                    "+  );",
                    "+};",
                    "+",
                    "+export default ComponentLibrary;"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/builder/node-editor.tsx": {
                "before": [
                    "@@ -1,28 +1,28 @@",
                    " import React, { useEffect, useState } from \"react\";",
                    " import { Drawer, Button, Space, message, Select, Input } from \"antd\";",
                    "-import { NodeEditorProps } from \"../types\";",
                    "-import { useTeamBuilderStore } from \"../store\";"
                ],
                "after": [
                    "-      const modelConfig = config as ModelConfigTypes;",
                    "+      const modelConfig = config as ModelConfig;",
                    "       if (\"AzureOpenAIChatCompletionClient\" in modelConfig) {",
                    "         const azureConfig = config as AzureOpenAIModelConfig;",
                    "         if ("
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/builder/nodes.tsx": {
                "before": [
                    "@@ -16,26 +16,27 @@ import {",
                    "   Timer,",
                    "   Trash2Icon,",
                    "   Edit,",
                    "+  Bot,"
                ],
                "after": [
                    "-  const config = props.data.config as TerminationConfigTypes;",
                    "+  const config = props.data.config as TerminationConfig;",
                    " ",
                    "   return (",
                    "     <BaseNode"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/builder/store.tsx": {
                "before": [
                    "@@ -8,38 +8,35 @@ import {",
                    " } from \"./types\";",
                    " import { nanoid } from \"nanoid\";",
                    " import {",
                    "-  TeamConfigTypes,"
                ],
                "after": [
                    "-  loadFromJson: (config: TeamConfigTypes) => {",
                    "+  loadFromJson: (config: TeamConfig) => {",
                    "     const { nodes, edges } = convertTeamConfigToGraph(config);",
                    "     const { nodes: layoutedNodes, edges: layoutedEdges } = getLayoutedElements(",
                    "       nodes,"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/builder/types.ts": {
                "before": [
                    "@@ -1,13 +1,6 @@",
                    " import { Node, Edge } from \"@xyflow/react\";",
                    " import { ComponentConfigTypes, ComponentTypes } from \"../../../types/datamodel\";",
                    " ",
                    "-interface NodeConnections {"
                ],
                "after": [
                    "-}",
                    "-",
                    " export interface NodeData extends Record<string, unknown> {",
                    "   label: string;",
                    "   type: ComponentTypes;"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/builder/utils.ts": {
                "before": [
                    "@@ -1,5 +1,5 @@",
                    " import dagre from \"@dagrejs/dagre\";",
                    "-import { CustomNode, CustomEdge } from \"../types\";",
                    "+import { CustomNode, CustomEdge } from \"./types\";",
                    " import { nanoid } from \"nanoid\";"
                ],
                "after": [
                    "-  if (config.model_client) {",
                    "+  if (config.team_type === \"SelectorGroupChat\" && config.model_client) {",
                    "     const modelNode = createNode(",
                    "       \"model\",",
                    "       { x: 200, y: 50 },"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/manager.tsx": {
                "before": [
                    "@@ -99,7 +99,7 @@ export const TeamManager: React.FC = () => {",
                    "     if (!teamId || !user?.email) return;",
                    "     setIsLoading(true);",
                    "     try {",
                    "-      const data = await teamAPI.getTeam(teamId, user.email!); // We can assert user.email exists since we checked above"
                ],
                "after": [
                    "-            <div className=\"flex items-center justify-center h-[calc(100vh-120px)] text-secondary\">",
                    "+            <div className=\"flex items-center   justify-center h-[calc(100vh-190px)] text-secondary\">",
                    "               Select a team from the sidebar or create a new one",
                    "             </div>",
                    "           )}"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/sidebar.tsx": {
                "before": [
                    "@@ -8,17 +8,23 @@ import {",
                    "   PanelLeftClose,",
                    "   PanelLeftOpen,",
                    "   Calendar,",
                    "+  Copy,"
                ],
                "after": [
                    "+        </>",
                    "+      </div>",
                    "     </div>",
                    "   );",
                    " };"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/types.ts": {
                "before": [
                    "@@ -1,4 +1,4 @@",
                    "-import type { Team, TeamConfigTypes } from \"../../types/datamodel\";",
                    "+import type { Team, TeamConfig } from \"../../types/datamodel\";",
                    " ",
                    " export interface TeamEditorProps {"
                ],
                "after": [
                    "-export const defaultTeamConfig: TeamConfigTypes = {",
                    "+export const defaultTeamConfig: TeamConfig = {",
                    "   version: \"1.0.0\",",
                    "   component_type: \"team\",",
                    "   name: \"default_team\","
                ]
            },
            "python/packages/autogen-studio/frontend/src/pages/gallery.tsx": {
                "before": [
                    "@@ -0,0 +1,28 @@",
                    "+import * as React from \"react\";",
                    "+import Layout from \"../components/layout\";",
                    "+import { graphql } from \"gatsby\";",
                    "+import GalleryManager from \"../components/views/gallery/manager\";"
                ],
                "after": [
                    "+    }",
                    "+  }",
                    "+`;",
                    "+",
                    "+export default GalleryPage;"
                ]
            },
            "python/packages/autogen-studio/frontend/src/styles/global.css": {
                "before": [
                    "@@ -105,7 +105,7 @@ body {",
                    "   border: grey;",
                    " }",
                    " ",
                    "-.ant-modal-content {"
                ],
                "after": [
                    "-}",
                    "+} */",
                    " a:hover {",
                    "   @apply text-accent;",
                    " }"
                ]
            },
            "python/packages/autogen-studio/frontend/static/images/bg/layeredbg.svg": {
                "before": [
                    "@@ -0,0 +1 @@",
                    "+<svg id=\"visual\" viewBox=\"0 0 900 300\" width=\"900\" height=\"300\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"><path d=\"M484 300L542 300L542 280L564 280L564 260L490 260L490 240L484 240L484 220L637 220L637 200L570 200L570 180L567 180L567 160L629 160L629 140L580 140L580 120L567 120L567 100L457 100L457 80L531 80L531 60L615 60L615 40L504 40L504 20L490 20L490 0L900 0L900 20L900 20L900 40L900 40L900 60L900 60L900 80L900 80L900 100L900 100L900 120L900 120L900 140L900 140L900 160L900 160L900 180L900 180L900 200L900 200L900 220L900 220L900 240L900 240L900 260L900 260L900 280L900 280L900 300L900 300Z\" fill=\"#8187fa\"></path><path d=\"M536 300L660 300L660 280L640 280L640 260L649 260L649 240L620 240L620 220L574 220L574 200L613 200L613 180L659 180L659 160L632 160L632 140L637 140L637 120L502 120L502 100L558 100L558 80L608 80L608 60L550 60L550 40L564 40L564 20L631 20L631 0L900 0L900 20L900 20L900 40L900 40L900 60L900 60L900 80L900 80L900 100L900 100L900 120L900 120L900 140L900 140L900 160L900 160L900 180L900 180L900 200L900 200L900 220L900 220L900 240L900 240L900 260L900 260L900 280L900 280L900 300L900 300Z\" fill=\"#797ff8\"></path><path d=\"M642 300L651 300L651 280L623 280L623 260L680 260L680 240L565 240L565 220L669 220L669 200L557 200L557 180L688 180L688 160L612 160L612 140L658 140L658 120L588 120L588 100L662 100L662 80L553 80L553 60L662 60L662 40L628 40L628 20L701 20L701 0L900 0L900 20L900 20L900 40L900 40L900 60L900 60L900 80L900 80L900 100L900 100L900 120L900 120L900 140L900 140L900 160L900 160L900 180L900 180L900 200L900 200L900 220L900 220L900 240L900 240L900 260L900 260L900 280L900 280L900 300L900 300Z\" fill=\"#7177f6\"></path><path d=\"M684 300L658 300L658 280L652 280L652 260L693 260L693 240L618 240L618 220L614 220L614 200L593 200L593 180L601 180L601 160L713 160L713 140L701 140L701 120L717 120L717 100L665 100L665 80L635 80L635 60L594 60L594 40L646 40L646 20L689 20L689 0L900 0L900 20L900 20L900 40L900 40L900 60L900 60L900 80L900 80L900 100L900 100L900 120L900 120L900 140L900 140L900 160L900 160L900 180L900 180L900 200L900 200L900 220L900 220L900 240L900 240L900 260L900 260L900 280L900 280L900 300L900 300Z\" fill=\"#696ff4\"></path><path d=\"M670 300L736 300L736 280L762 280L762 260L700 260L700 240L754 240L754 220L688 220L688 200L735 200L735 180L726 180L726 160L763 160L763 140L662 140L662 120L739 120L739 100L703 100L703 80L762 80L762 60L690 60L690 40L652 40L652 20L753 20L753 0L900 0L900 20L900 20L900 40L900 40L900 60L900 60L900 80L900 80L900 100L900 100L900 120L900 120L900 140L900 140L900 160L900 160L900 180L900 180L900 200L900 200L900 220L900 220L900 240L900 240L900 260L900 260L900 280L900 280L900 300L900 300Z\" fill=\"#6167f2\"></path><path d=\"M717 300L754 300L754 280L739 280L739 260L735 260L735 240L790 240L790 220L761 220L761 200L772 200L772 180L754 180L754 160L749 160L749 140L754 140L754 120L782 120L782 100L701 100L701 80L748 80L748 60L721 60L721 40L730 40L730 20L746 20L746 0L900 0L900 20L900 20L900 40L900 40L900 60L900 60L900 80L900 80L900 100L900 100L900 120L900 120L900 140L900 140L900 160L900 160L900 180L900 180L900 200L900 200L900 220L900 220L900 240L900 240L900 260L900 260L900 280L900 280L900 300L900 300Z\" fill=\"#585ff0\"></path><path d=\"M813 300L784 300L784 280L772 280L772 260L813 260L813 240L811 240L811 220L794 220L794 200L805 200L805 180L757 180L757 160L818 160L818 140L818 140L818 120L773 120L773 100L817 100L817 80L792 80L792 60L791 60L791 40L811 40L811 20L814 20L814 0L900 0L900 20L900 20L900 40L900 40L900 60L900 60L900 80L900 80L900 100L900 100L900 120L900 120L900 140L900 140L900 160L900 160L900 180L900 180L900 200L900 200L900 220L900 220L900 240L900 240L900 260L900 260L900 280L900 280L900 300L900 300Z\" fill=\"#4f57ed\"></path><path d=\"M814 300L830 300L830 280L805 280L805 260L820 260L820 240L829 240L829 220L830 220L830 200L842 200L842 180L839 180L839 160L829 160L829 140L855 140L855 120L856 120L856 100L834 100L834 80L820 80L820 60L847 60L847 40L841 40L841 20L820 20L820 0L900 0L900 20L900 20L900 40L900 40L900 60L900 60L900 80L900 80L900 100L900 100L900 120L900 120L900 140L900 140L900 160L900 160L900 180L900 180L900 200L900 200L900 220L900 220L900 240L900 240L900 260L900 260L900 280L900 280L900 300L900 300Z\" fill=\"#464feb\"></path></svg>",
                    "\\ No newline at end of file"
                ],
                "after": [
                    "@@ -0,0 +1 @@",
                    "+<svg id=\"visual\" viewBox=\"0 0 900 300\" width=\"900\" height=\"300\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"><path d=\"M484 300L542 300L542 280L564 280L564 260L490 260L490 240L484 240L484 220L637 220L637 200L570 200L570 180L567 180L567 160L629 160L629 140L580 140L580 120L567 120L567 100L457 100L457 80L531 80L531 60L615 60L615 40L504 40L504 20L490 20L490 0L900 0L900 20L900 20L900 40L900 40L900 60L900 60L900 80L900 80L900 100L900 100L900 120L900 120L900 140L900 140L900 160L900 160L900 180L900 180L900 200L900 200L900 220L900 220L900 240L900 240L900 260L900 260L900 280L900 280L900 300L900 300Z\" fill=\"#8187fa\"></path><path d=\"M536 300L660 300L660 280L640 280L640 260L649 260L649 240L620 240L620 220L574 220L574 200L613 200L613 180L659 180L659 160L632 160L632 140L637 140L637 120L502 120L502 100L558 100L558 80L608 80L608 60L550 60L550 40L564 40L564 20L631 20L631 0L900 0L900 20L900 20L900 40L900 40L900 60L900 60L900 80L900 80L900 100L900 100L900 120L900 120L900 140L900 140L900 160L900 160L900 180L900 180L900 200L900 200L900 220L900 220L900 240L900 240L900 260L900 260L900 280L900 280L900 300L900 300Z\" fill=\"#797ff8\"></path><path d=\"M642 300L651 300L651 280L623 280L623 260L680 260L680 240L565 240L565 220L669 220L669 200L557 200L557 180L688 180L688 160L612 160L612 140L658 140L658 120L588 120L588 100L662 100L662 80L553 80L553 60L662 60L662 40L628 40L628 20L701 20L701 0L900 0L900 20L900 20L900 40L900 40L900 60L900 60L900 80L900 80L900 100L900 100L900 120L900 120L900 140L900 140L900 160L900 160L900 180L900 180L900 200L900 200L900 220L900 220L900 240L900 240L900 260L900 260L900 280L900 280L900 300L900 300Z\" fill=\"#7177f6\"></path><path d=\"M684 300L658 300L658 280L652 280L652 260L693 260L693 240L618 240L618 220L614 220L614 200L593 200L593 180L601 180L601 160L713 160L713 140L701 140L701 120L717 120L717 100L665 100L665 80L635 80L635 60L594 60L594 40L646 40L646 20L689 20L689 0L900 0L900 20L900 20L900 40L900 40L900 60L900 60L900 80L900 80L900 100L900 100L900 120L900 120L900 140L900 140L900 160L900 160L900 180L900 180L900 200L900 200L900 220L900 220L900 240L900 240L900 260L900 260L900 280L900 280L900 300L900 300Z\" fill=\"#696ff4\"></path><path d=\"M670 300L736 300L736 280L762 280L762 260L700 260L700 240L754 240L754 220L688 220L688 200L735 200L735 180L726 180L726 160L763 160L763 140L662 140L662 120L739 120L739 100L703 100L703 80L762 80L762 60L690 60L690 40L652 40L652 20L753 20L753 0L900 0L900 20L900 20L900 40L900 40L900 60L900 60L900 80L900 80L900 100L900 100L900 120L900 120L900 140L900 140L900 160L900 160L900 180L900 180L900 200L900 200L900 220L900 220L900 240L900 240L900 260L900 260L900 280L900 280L900 300L900 300Z\" fill=\"#6167f2\"></path><path d=\"M717 300L754 300L754 280L739 280L739 260L735 260L735 240L790 240L790 220L761 220L761 200L772 200L772 180L754 180L754 160L749 160L749 140L754 140L754 120L782 120L782 100L701 100L701 80L748 80L748 60L721 60L721 40L730 40L730 20L746 20L746 0L900 0L900 20L900 20L900 40L900 40L900 60L900 60L900 80L900 80L900 100L900 100L900 120L900 120L900 140L900 140L900 160L900 160L900 180L900 180L900 200L900 200L900 220L900 220L900 240L900 240L900 260L900 260L900 280L900 280L900 300L900 300Z\" fill=\"#585ff0\"></path><path d=\"M813 300L784 300L784 280L772 280L772 260L813 260L813 240L811 240L811 220L794 220L794 200L805 200L805 180L757 180L757 160L818 160L818 140L818 140L818 120L773 120L773 100L817 100L817 80L792 80L792 60L791 60L791 40L811 40L811 20L814 20L814 0L900 0L900 20L900 20L900 40L900 40L900 60L900 60L900 80L900 80L900 100L900 100L900 120L900 120L900 140L900 140L900 160L900 160L900 180L900 180L900 200L900 200L900 220L900 220L900 240L900 240L900 260L900 260L900 280L900 280L900 300L900 300Z\" fill=\"#4f57ed\"></path><path d=\"M814 300L830 300L830 280L805 280L805 260L820 260L820 240L829 240L829 220L830 220L830 200L842 200L842 180L839 180L839 160L829 160L829 140L855 140L855 120L856 120L856 100L834 100L834 80L820 80L820 60L847 60L847 40L841 40L841 20L820 20L820 0L900 0L900 20L900 20L900 40L900 40L900 60L900 60L900 80L900 80L900 100L900 100L900 120L900 120L900 140L900 140L900 160L900 160L900 180L900 180L900 200L900 200L900 220L900 220L900 240L900 240L900 260L900 260L900 280L900 280L900 300L900 300Z\" fill=\"#464feb\"></path></svg>",
                    "\\ No newline at end of file"
                ]
            },
            "python/packages/autogen-studio/frontend/yarn.lock": {
                "before": [
                    "@@ -9027,9 +9027,9 @@ mz@^2.7.0:",
                    "     thenify-all \"^1.0.0\"",
                    " ",
                    " nanoid@^3.3.7:",
                    "-  version \"3.3.7\""
                ],
                "after": [
                    "+  resolved \"https://registry.yarnpkg.com/nanoid/-/nanoid-3.3.8.tgz#b1be3030bee36aaff18bacb375e5cce521684baf\"",
                    "+  integrity sha512-WNLf5Sd8oZxOm+TzppcYk8gVOgP+l58xNy58D0nbUnOxOWRWvlcCV4kUF7ltmI6PsrLl/BgKEyS4mqsGChFN0w==",
                    " ",
                    " napi-build-utils@^1.0.1:",
                    "   version \"1.0.2\""
                ]
            },
            "python/packages/autogen-studio/notebooks/tutorial.ipynb": {
                "before": [
                    "@@ -16,9 +16,17 @@",
                    "   },",
                    "   {",
                    "    \"cell_type\": \"code\",",
                    "-   \"execution_count\": null,"
                ],
                "after": [
                    "-    \"    print(response)\"",
                    "-   ]",
                    "   }",
                    "  ],",
                    "  \"metadata\": {"
                ]
            },
            "python/packages/autogen-studio/tests/test_component_factory.py": {
                "before": [
                    "@@ -7,11 +7,16 @@",
                    " from autogen_core.tools import FunctionTool",
                    " ",
                    " from autogenstudio.datamodel.types import (",
                    "-    AgentConfig,"
                ],
                "after": [
                    "-            TerminationConfig(",
                    "+            MaxMessageTerminationConfig(",
                    "                 termination_type=\"InvalidTermination\",  # type: ignore",
                    "                 component_type=ComponentTypes.TERMINATION,",
                    "                 version=\"1.0.0\","
                ]
            },
            "python/packages/autogen-studio/tests/test_db_manager.py": {
                "before": [
                    "@@ -6,9 +6,13 @@",
                    " ",
                    " from autogenstudio.database import DatabaseManager",
                    " from autogenstudio.datamodel.types import (",
                    "-    ModelConfig, AgentConfig, ToolConfig,"
                ],
                "after": [
                    "-                config=ModelConfig(",
                    "+                config=OpenAIModelConfig(",
                    "                     model=\"gpt-3.5\",",
                    "                     model_type=ModelTypes.OPENAI,",
                    "                     component_type=ComponentTypes.MODEL,"
                ]
            },
            "python/packages/autogen-test-utils/pyproject.toml": {
                "before": [
                    "@@ -27,5 +27,5 @@ include = [\"src\"]",
                    " include = \"../../shared_tasks.toml\"",
                    " ",
                    " [tool.poe.tasks]",
                    "-"
                ],
                "after": [
                    " ",
                    " [tool.poe.tasks]",
                    "-",
                    "+mypy = \"mypy --config-file $POE_ROOT/../../pyproject.toml src\"",
                    " test = \"true\""
                ]
            }
        }
    },
    {
        "instance_id": "autogen__autogen-4382",
        "title": "ModuleNotFoundError: No module named 'grpc'",
        "problem_statement": "ModuleNotFoundError: No module named 'grpc'. What happened?\n\nI ran the weather agents from https://microsoft.github.io/autogen/dev/user-guide/agentchat-user-guide/quickstart.html\n\n\n\n### What did you expect to happen?\n\nI expected the code to run instead I got\n\n```console\n  File \"/Users/gaganbansal/workspace/test-autogen/weather.py\", line 5, in <module>\n    from autogen_agentchat.teams import RoundRobinGroupChat\n  File \"/Users/gaganbansal/miniconda3/envs/test-autogen/lib/python3.10/site-packages/autogen_agentchat/teams/__init__.py\", line 1, in <module>\n    from ._group_chat._base_group_chat import BaseGroupChat\n  File \"/Users/gaganbansal/miniconda3/envs/test-autogen/lib/python3.10/site-packages/autogen_agentchat/teams/_group_chat/_base_group_chat.py\", line 7, in <module>\n    from autogen_core.application import SingleThreadedAgentRuntime\n  File \"/Users/gaganbansal/miniconda3/envs/test-autogen/lib/python3.10/site-packages/autogen_core/application/__init__.py\", line 6, in <module>\n    from ._worker_runtime import WorkerAgentRuntime\n  File \"/Users/gaganbansal/miniconda3/envs/test-autogen/lib/python3.10/site-packages/autogen_core/application/_worker_runtime.py\", line 53, in <module>\n    from .protos import agent_worker_pb2, agent_worker_pb2_grpc\n  File \"/Users/gaganbansal/miniconda3/envs/test-autogen/lib/python3.10/site-packages/autogen_core/application/protos/agent_worker_pb2_grpc.py\", line 3, in <module>\n    import grpc\nModuleNotFoundError: No module named 'grpc'\n```\n\n### How can we reproduce it (as minimally and precisely as possible)?\n\n```\nconda create -n test-autogen python==3.10\nconda activate test-autogen\npip install 'autogen-agentchat==0.4.0.dev7' 'autogen-ext[openai]==0.4.0.dev7'\npython weather.py\n```\n\nHere `weather.py` contains:\n\n```python\nimport asyncio\n\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_agentchat.task import Console, TextMentionTermination\nfrom autogen_agentchat.teams import RoundRobinGroupChat\nfrom autogen_ext.models import OpenAIChatCompletionClient\n\n\n# Define a tool\nasync def get_weather(city: str) -> str:\n    return f\"The weather in {city} is 73 degrees and Sunny.\"\n\n\nasync def main() -> None:\n    # Define an agent\n    weather_agent = AssistantAgent(\n        name=\"weather_agent\",\n        model_client=OpenAIChatCompletionClient(\n            model=\"gpt-4o-2024-08-06\",\n            # api_key=\"YOUR_API_KEY\",\n        ),\n        tools=[get_weather],\n    )\n\n    # Define termination condition\n    termination = TextMentionTermination(\"TERMINATE\")\n\n    # Define a team\n    agent_team = RoundRobinGroupChat([weather_agent], termination_condition=termination)\n\n    # Run the team and stream messages to the console\n    stream = agent_team.run_stream(task=\"What is the weather in New York?\")\n    await Console(stream)\n\nasyncio.run(main())\n\n```\n\n### AutoGen version\n\nautogen-agentchat==0.4.0.dev7\n\n### Which package was this bug in\n\nCore\n\n### Model used\n\ngpt-4o\n\n### Python version\n\n3.10\n\n### Operating system\n\nMac\n\n### Any additional info you think would be helpful for fixing this bug\n\n_No response_",
        "base_commit": "6184e15c5eca1ca9bb5c9dcb7a6b0995171bd990",
        "repo": "repo/autogen-4382",
        "patch": {
            "python/uv.lock": {
                "before": [
                    "@@ -7,7 +7,8 @@ resolution-markers = [",
                    "     \"python_full_version < '3.11'\",",
                    "     \"python_full_version == '3.11.*'\",",
                    "     \"python_full_version >= '3.12' and python_full_version < '3.12.4'\",",
                    "-    \"python_full_version >= '3.12.4'\","
                ],
                "after": [
                    "-    { name = \"greenlet\", marker = \"platform_machine == 'AMD64' or platform_machine == 'WIN32' or platform_machine == 'aarch64' or platform_machine == 'amd64' or platform_machine == 'ppc64le' or platform_machine == 'win32' or platform_machine == 'x86_64'\" },",
                    "+    { name = \"greenlet\", marker = \"(python_full_version < '3.13' and platform_machine == 'AMD64') or (python_full_version < '3.13' and platform_machine == 'WIN32') or (python_full_version < '3.13' and platform_machine == 'aarch64') or (python_full_version < '3.13' and platform_machine == 'amd64') or (python_full_version < '3.13' and platform_machine == 'ppc64le') or (python_full_version < '3.13' and platform_machine == 'win32') or (python_full_version < '3.13' and platform_machine == 'x86_64')\" },",
                    "     { name = \"typing-extensions\" },",
                    " ]",
                    " sdist = { url = \"https://files.pythonhosted.org/packages/50/65/9cbc9c4c3287bed2499e05033e207473504dc4df999ce49385fb1f8b058a/sqlalchemy-2.0.36.tar.gz\", hash = \"sha256:7f2767680b6d2398aea7082e45a774b2b0767b5c8d8ffb9c8b683088ea9b29c5\", size = 9574485 }"
                ]
            }
        }
    },
    {
        "instance_id": "autogen__autogen-4197",
        "title": "Make import self-consistent in large code blocks in agent chat tutorial.",
        "problem_statement": "Make import self-consistent in large code blocks in agent chat tutorial. What happened?\n\ntrying to run the sample code: \n\n```python\nfrom typing import AsyncGenerator, List, Sequence\n\nfrom autogen_agentchat.agents import BaseChatAgent\nfrom autogen_agentchat.base import Response\nfrom autogen_agentchat.messages import AgentMessage, ChatMessage\nimport asyncio\n\n\nclass CountDownAgent(BaseChatAgent):\n    def __init__(self, name: str, count: int = 3):\n        super().__init__(name, \"A simple agent that counts down.\")\n        self._count = count\n\n    @property\n    def produced_message_types(self) -> List[type[ChatMessage]]:\n        return [TextMessage]\n\n    async def on_messages(self, messages: Sequence[ChatMessage], cancellation_token: CancellationToken) -> Response:\n        # Calls the on_messages_stream.\n        response: Response | None = None\n        async for message in self.on_messages_stream(messages, cancellation_token):\n            if isinstance(message, Response):\n                response = message\n        assert response is not None\n        return response\n\n    async def on_messages_stream(\n        self, messages: Sequence[ChatMessage], cancellation_token: CancellationToken\n    ) -> AsyncGenerator[AgentMessage | Response, None]:\n        inner_messages: List[AgentMessage] = []\n        for i in range(self._count, 0, -1):\n            msg = TextMessage(content=f\"{i}...\", source=self.name)\n            inner_messages.append(msg)\n            yield msg\n        # The response is returned at the end of the stream.\n        # It contains the final message and all the inner messages.\n        yield Response(chat_message=TextMessage(content=\"Done!\", source=self.name), inner_messages=inner_messages)\n\n    async def on_reset(self, cancellation_token: CancellationToken) -> None:\n        pass\n\n\nasync def run_countdown_agent() -> None:\n    # Create a countdown agent.\n    countdown_agent = CountDownAgent(\"countdown\")\n\n    # Run the agent with a given task and stream the response.\n    async for message in countdown_agent.on_messages_stream([], CancellationToken()):\n        if isinstance(message, Response):\n            print(message.chat_message.content)\n        else:\n            print(message.content)\n\n\n# Use asyncio.run(run_countdown_agent()) when running in a script.\nasyncio.run(run_countdown_agent())\n```\n\nhowever it fails with \n\n(autogenDev6) VSKUMAR@VSKUMAR-mac autogen % python counter.py\nTraceback (most recent call last):\n  File \"/Users/VSKUMAR/code/research/autogen/counter.py\", line 9, in <module>\n    class CountDownAgent(BaseChatAgent):\n  File \"/Users/VSKUMAR/code/research/autogen/counter.py\", line 18, in CountDownAgent\n    async def on_messages(self, messages: Sequence[ChatMessage], cancellation_token: CancellationToken) -> Response:\nNameError: name 'CancellationToken' is not defined\n\n### What did you expect to happen?\n\nit should run\n\n### How can we reproduce it (as minimally and precisely as possible)?\n\nconda create -n autogenDev6 python=3.10     \nconda activate autogenDev6 \npip install 'autogen-agentchat==0.4.0.dev6' \n pip install 'autogen-ext[openai]==0.4.0.dev6'\npython counter.py      \n\n### AutoGen version\n\n0.4.0dev6\n\n### Which package was this bug in\n\nAgentChat\n\n### Model used\n\ngpt4o\n\n### Python version\n\n3.10\n\n### Operating system\n\nmacosx\n\n### Any additional info you think would be helpful for fixing this bug\n\n_No response_",
        "base_commit": "9ec7ecc29c6e5dcfbe60713d2ed8b938a9b08a51",
        "repo": "repo/autogen-4197",
        "patch": {
            "python/packages/autogen-core/docs/src/user-guide/extensions-user-guide/index.md": {
                "before": [
                    "@@ -15,7 +15,7 @@ azure-container-code-executor",
                    " ```",
                    " ",
                    " ",
                    "-Discover community projects:"
                ],
                "after": [
                    "+- [`autogen-extension`](https://github.com/topics/autogen-extension) for extensions",
                    "+- [`autogen-sample`](https://github.com/topics/autogen-sample) for samples",
                    " ",
                    " ### Changes from 0.2",
                    " "
                ]
            }
        }
    },
    {
        "instance_id": "autogen__autogen-3361",
        "title": "[Bug]: TypeError: unhashable type: 'ImportFromModule' for User Defined Functions",
        "problem_statement": "[Bug]: TypeError: unhashable type: 'ImportFromModule' for User Defined Functions. Describe the bug\r\n\r\nI got this error when I created a user defined function:\r\n`TypeError: unhashable type: 'ImportFromModule'`\r\n\r\n### Steps to reproduce\r\n\r\nMy function is like this:\r\n```\r\n@with_requirements(python_packages=[\"requests\", \"urllib3\"], global_imports=[\"requests\", \"os\", ImportFromModule(\"urllib.parse\", [\"urlencode\"])])\r\ndef search_from_web(search_keyword: str):\r\n    pass\r\n```\r\n\r\nThe exception is caused by this function under `func_with_reqs.py`:\r\n```\r\ndef _build_python_functions_file(\r\n    funcs: List[Union[FunctionWithRequirements[Any, P], Callable[..., Any], FunctionWithRequirementsStr]]\r\n) -> str:\r\n    # First collect all global imports\r\n    global_imports = set()\r\n    for func in funcs:\r\n        if isinstance(func, (FunctionWithRequirements, FunctionWithRequirementsStr)):\r\n            global_imports.update(func.global_imports)\r\n\r\n    content = \"\\n\".join(map(_import_to_str, global_imports)) + \"\\n\\n\"\r\n\r\n    for func in funcs:\r\n        content += _to_code(func) + \"\\n\\n\"\r\n\r\n    return content\r\n```\r\n\r\nThe `ImportFromModule` is unhashable at `global_imports.update(func.global_imports)`\r\n\r\n### Model Used\r\n\r\ngpt-4o-mini\r\n\r\n### Expected Behavior\r\n\r\n_No response_\r\n\r\n### Screenshots and logs\r\n\r\n> Traceback (most recent call last):\r\n  File \"C:\\Users\\zhaoc\\PycharmProjects\\financal-analyst\\3.function_use.py\", line 15, in <module>\r\n    code_executor.initiate_chat(\r\n  File \"C:\\Users\\zhaoc\\miniconda3\\envs\\financial-analyst\\Lib\\site-packages\\autogen\\agentchat\\conversable_agent.py\", line 1019, in initiate_chat\r\n    self.send(msg2send, recipient, silent=silent)\r\n  File \"C:\\Users\\zhaoc\\miniconda3\\envs\\financial-analyst\\Lib\\site-packages\\autogen\\agentchat\\conversable_agent.py\", line 656, in send\r\n    recipient.receive(message, self, request_reply, silent)\r\n  File \"C:\\Users\\zhaoc\\miniconda3\\envs\\financial-analyst\\Lib\\site-packages\\autogen\\agentchat\\conversable_agent.py\", line 821, in receive\r\n    self.send(reply, sender, silent=silent)\r\n  File \"C:\\Users\\zhaoc\\miniconda3\\envs\\financial-analyst\\Lib\\site-packages\\autogen\\agentchat\\conversable_agent.py\", line 656, in send\r\n    recipient.receive(message, self, request_reply, silent)\r\n  File \"C:\\Users\\zhaoc\\miniconda3\\envs\\financial-analyst\\Lib\\site-packages\\autogen\\agentchat\\conversable_agent.py\", line 819, in receive\r\n    reply = self.generate_reply(messages=self.chat_messages[sender], sender=sender)\r\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\zhaoc\\miniconda3\\envs\\financial-analyst\\Lib\\site-packages\\autogen\\agentchat\\conversable_agent.py\", line 1973, in generate_reply\r\n    final, reply = reply_func(self, messages=messages, sender=sender, config=reply_func_tuple[\"config\"])\r\n                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\zhaoc\\miniconda3\\envs\\financial-analyst\\Lib\\site-packages\\autogen\\agentchat\\conversable_agent.py\", line 1471, in _generate_code_execution_reply_using_executor\r\n    code_result = self._code_executor.execute_code_blocks(code_blocks)\r\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\zhaoc\\miniconda3\\envs\\financial-analyst\\Lib\\site-packages\\autogen\\coding\\local_commandline_code_executor.py\", line 245, in execute_code_blocks\r\n    self._setup_functions()\r\n  File \"C:\\Users\\zhaoc\\miniconda3\\envs\\financial-analyst\\Lib\\site-packages\\autogen\\coding\\local_commandline_code_executor.py\", line 207, in _setup_functions\r\n    func_file_content = _build_python_functions_file(self._functions)\r\n                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\zhaoc\\miniconda3\\envs\\financial-analyst\\Lib\\site-packages\\autogen\\coding\\func_with_reqs.py\", line 165, in _build_python_functions_file\r\n    global_imports.update(func.global_imports)\r\nTypeError: unhashable type: 'ImportFromModule'\r\n",
        "base_commit": "3fc708d53efe457a47dd82e5800e1f0032284d8d",
        "repo": "repo/autogen-3361",
        "patch": {
            "autogen/agentchat/contrib/capabilities/transform_messages.py": {
                "before": [
                    "@@ -1,9 +1,8 @@",
                    " import copy",
                    " from typing import Dict, List",
                    " ",
                    "-from autogen import ConversableAgent"
                ],
                "after": [
                    " from ....formatting_utils import colored",
                    "+from ...conversable_agent import ConversableAgent",
                    " from .transforms import MessageTransform",
                    " ",
                    " "
                ]
            },
            "autogen/agentchat/groupchat.py": {
                "before": [
                    "@@ -5,7 +5,7 @@",
                    " import re",
                    " import sys",
                    " from dataclasses import dataclass, field",
                    "-from typing import Callable, Dict, List, Literal, Optional, Tuple, Union"
                ],
                "after": [
                    "-        remove_termination_string: Union[str, Callable[[str], str]],",
                    "+        remove_termination_string: Union[str, Callable[[str], str]] = None,",
                    "         silent: Optional[bool] = False,",
                    "     ) -> Tuple[ConversableAgent, Dict]:",
                    "         \"\"\"Resumes a group chat using the previous messages as a starting point, asynchronously. Requires the agents, group chat, and group chat manager to be established"
                ]
            },
            "test/agentchat/test_groupchat.py": {
                "before": [
                    "@@ -12,6 +12,7 @@",
                    " ",
                    " import autogen",
                    " from autogen import Agent, AssistantAgent, GroupChat, GroupChatManager",
                    "+from autogen.agentchat.contrib.capabilities import transform_messages, transforms"
                ],
                "after": [
                    "     test_manager_resume_functions()",
                    "     # test_manager_resume_returns()",
                    "     # test_manager_resume_messages()",
                    "+    # test_select_speaker_transform_messages()",
                    "     pass"
                ]
            },
            "website/docs/Use-Cases/agent_chat.md": {
                "before": [
                    "@@ -21,7 +21,7 @@ The figure below shows the built-in agents in AutoGen.",
                    " We have designed a generic [`ConversableAgent`](../reference/agentchat/conversable_agent.md#conversableagent-objects)",
                    "  class for Agents that are capable of conversing with each other through the exchange of messages to jointly finish a task. An agent can communicate with other agents and perform actions. Different agents can differ in what actions they perform after receiving messages. Two representative subclasses are [`AssistantAgent`](../reference/agentchat/assistant_agent.md#assistantagent-objects) and [`UserProxyAgent`](../reference/agentchat/user_proxy_agent.md#userproxyagent-objects)",
                    " ",
                    "-- The [`AssistantAgent`](../reference/agentchat/assistant_agent.md#assistantagent-objects) is designed to act as an AI assistant, using LLMs by default but not requiring human input or code execution. It could write Python code (in a Python coding block) for a user to execute when a message (typically a description of a task that needs to be solved) is received. Under the hood, the Python code is written by LLM (e.g., GPT-4). It can also receive the execution results and suggest corrections or bug fixes. Its behavior can be altered by passing a new system message. The LLM [inference](#enhanced-inference) configuration can be configured via [`llm_config`]."
                ],
                "after": [
                    "-- The [`AssistantAgent`](../reference/agentchat/assistant_agent.md#assistantagent-objects) is designed to act as an AI assistant, using LLMs by default but not requiring human input or code execution. It could write Python code (in a Python coding block) for a user to execute when a message (typically a description of a task that needs to be solved) is received. Under the hood, the Python code is written by LLM (e.g., GPT-4). It can also receive the execution results and suggest corrections or bug fixes. Its behavior can be altered by passing a new system message. The LLM [inference](#enhanced-inference) configuration can be configured via [`llm_config`].",
                    "+- The [`AssistantAgent`](../reference/agentchat/assistant_agent.md#assistantagent-objects) is designed to act as an AI assistant, using LLMs by default but not requiring human input or code execution. It could write Python code (in a Python coding block) for a user to execute when a message (typically a description of a task that needs to be solved) is received. Under the hood, the Python code is written by LLM (e.g., GPT-4). It can also receive the execution results and suggest corrections or bug fixes. Its behavior can be altered by passing a new system message. The LLM [inference](/docs/Use-Cases/enhanced_inference) configuration can be configured via [`llm_config`].",
                    " ",
                    " - The [`UserProxyAgent`](../reference/agentchat/user_proxy_agent.md#userproxyagent-objects) is conceptually a proxy agent for humans, soliciting human input as the agent's reply at each interaction turn by default and also having the capability to execute code and call functions or tools. The [`UserProxyAgent`](../reference/agentchat/user_proxy_agent.md#userproxyagent-objects) triggers code execution automatically when it detects an executable code block in the received message and no human user input is provided. Code execution can be disabled by setting the `code_execution_config` parameter to False. LLM-based response is disabled by default. It can be enabled by setting `llm_config` to a dict corresponding to the [inference](/docs/Use-Cases/enhanced_inference) configuration. When `llm_config` is set as a dictionary, [`UserProxyAgent`](../reference/agentchat/user_proxy_agent.md#userproxyagent-objects) can generate replies using an LLM when code execution is not performed.",
                    " "
                ]
            },
            "website/docs/topics/groupchat/transform_messages_speaker_selection.ipynb": {
                "before": [
                    "@@ -0,0 +1,246 @@",
                    "+{",
                    "+ \"cells\": [",
                    "+  {",
                    "+   \"cell_type\": \"markdown\","
                ],
                "after": [
                    "+  }",
                    "+ },",
                    "+ \"nbformat\": 4,",
                    "+ \"nbformat_minor\": 2",
                    "+}"
                ]
            }
        }
    },
    {
        "instance_id": "autogen__autogen-1844",
        "title": "[Bug]: `overlap`  parameter in the  `split_text_to_chunks`  not used.",
        "problem_statement": "[Bug]: `overlap`  parameter in the  `split_text_to_chunks`  not used. Describe the bug\n\n`overlap`  in the `split_text_to_chunks` function in the `autogen.retrieve_utils.split_text_to_chunks`, I think it's easy to fix it by adding it in the right place [](url)\n\n### Steps to reproduce\n\n1. go to autogen.retrieve_utils file\r\n2. search for the function `split_text_to_chunks`\r\n3. it will be in the parameters but not used with `cnt` indexing\n\n### Model Used\n\n_No response_\n\n### Expected Behavior\n\n_No response_\n\n### Screenshots and logs\n\n_No response_\n\n### Additional Information\n\n_No response_",
        "base_commit": "513b0b788445ac4801863430967f52e7142abdc8",
        "repo": "repo/autogen-1844",
        "patch": {
            ".github/workflows/contrib-tests.yml": {
                "before": [
                    "@@ -48,7 +48,7 @@ jobs:",
                    "         run: |",
                    "           sudo apt-get update",
                    "           sudo apt-get install -y tesseract-ocr poppler-utils",
                    "-          pip install unstructured[all-docs]"
                ],
                "after": [
                    "-          pip install unstructured[all-docs]",
                    "+          pip install unstructured[all-docs]==0.13.0",
                    "       - name: Install packages and dependencies for RetrieveChat",
                    "         run: |",
                    "           pip install -e .[retrievechat]"
                ]
            }
        }
    },
    {
        "instance_id": "autogen__autogen-1174",
        "title": "[Bug]: Async_human_input openai.BadRequestError",
        "problem_statement": "[Bug]: Async_human_input openai.BadRequestError. Describe the bug\n\nopenai.BadRequestError: Error code: 400 - {'error': {'message': \"Additional properties are not allowed ('tool_responses' was unexpected) - 'messages.3'\", 'type': 'invalid_request_error', 'param': None, 'code': None}}\n\n### Steps to reproduce\n\n_No response_\n\n### Expected Behavior\n\n_No response_\n\n### Screenshots and logs\n\n_No response_\n\n### Additional Information\n\nv0.2.4",
        "base_commit": "56aed2d3d19d03c9d48d2ae22f94a4ae2cb16ba4",
        "repo": "repo/autogen-1174",
        "patch": {
            "autogen/agentchat/conversable_agent.py": {
                "before": [
                    "@@ -871,7 +871,7 @@ def generate_tool_calls_reply(",
                    "                     \"content\": func_return.get(\"content\", \"\"),",
                    "                 }",
                    "             )",
                    "-        if len(tool_returns) > 0:"
                ],
                "after": [
                    "-        if len(async_tool_calls) > 0:",
                    "+        if async_tool_calls:",
                    "             tool_returns = await asyncio.gather(*async_tool_calls)",
                    "             return True, {",
                    "                 \"role\": \"tool\","
                ]
            }
        }
    },
    {
        "instance_id": "autogen__autogen-5124",
        "title": "GrpcWorkerAgentRuntimeHost fails to start due to \"no running event loop\" error (Doc and Sample updated required)",
        "problem_statement": "GrpcWorkerAgentRuntimeHost fails to start due to \"no running event loop\" error (Doc and Sample updated required). What happened?\n\nWhile using Distributed Agent Runtime to start `GrpcWorkerAgentRuntimeHost`, an error occurs. Below are the steps to reproduce the issue and the code snippet.  \n\n**Steps to Reproduce**:  \n1. Use the following code to start `GrpcWorkerAgentRuntimeHost`:  \n```python\n\n  def main():\n      host = GrpcWorkerAgentRuntimeHost(address=\"0.0.0.0:50051\")\n      host.start()  # Start a host service in the background.\n  \n  if __name__ == \"__main__\":\n```\n2. Run the script, and the following error appears:  \n\n```\n   Traceback (most recent call last):\n  File \"d:\\Users\\10609302\\Documents\\workspace\\ai-agent\\ag_event_host.py\", line 96, in <module>\n    main()\n  File \"d:\\Users\\10609302\\Documents\\workspace\\ai-agent\\ag_event_host.py\", line 93, in main\n    host.start()  # Start a host service in the background.\n    ^^^^^^^^^^^^\n  File \"C:\\Users\\10609302\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\ai-agent-avTRqWVV-py3.11\\Lib\\site-packages\\autogen_ext\\runtimes\\grpc\\_worker_runtime_host.py\", line 37, in start\n    self._serve_task = asyncio.create_task(self._serve())\n                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\Program Files\\Python311\\Lib\\asyncio\\tasks.py\", line 381, in create_task\n    loop = events.get_running_loop()\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\nRuntimeError: no running event loop\nsys:1: RuntimeWarning: coroutine 'GrpcWorkerAgentRuntimeHost._serve' was never awaited\n```\n\n**Expected Behavior**:  \n`GrpcWorkerAgentRuntimeHost` should successfully start the background service without throwing a `RuntimeError`.  \n\n\n### What did you expect to happen?\n\n\n1. Use the following code to start GrpcWorkerAgentRuntimeHost\n\n```python\n  def main():\n      host = GrpcWorkerAgentRuntimeHost(address=\"0.0.0.0:50051\")\n      host.start()  # Start a host service in the background.\n  \n  if __name__ == \"__main__\":\n      main()\n```\n\n### How can we reproduce it (as minimally and precisely as possible)?\n\nThe error message suggests that an asyncio event loop is not properly initialized, which causes asyncio.create_task to fail.\n\n### AutoGen version\n\n0.4.2\n\n### Which package was this bug in\n\nExtensions\n\n### Model used\n\n_No response_\n\n### Python version\n\n3.11.6\n\n### Operating system\n\nWindows10\n\n### Any additional info you think would be helpful for fixing this bug\n\n_No response_",
        "base_commit": "226b37d07b9e95e3e4759439758c0954d90e5b4c",
        "repo": "repo/autogen-5124",
        "patch": {
            ".azure/pipelines/build.yaml": {
                "before": [
                    "@@ -1,11 +1,3 @@",
                    "-trigger:",
                    "-  branches:",
                    "-    include:",
                    "-    - main"
                ],
                "after": [
                    "-    - dotnet",
                    "-",
                    " schedules:",
                    " - cron: \"0 0 * * *\"",
                    "   displayName: 'Daily midnight build (including CodeQL)'"
                ]
            },
            ".azure/pipelines/templates/build.yaml": {
                "before": [
                    "@@ -79,6 +79,7 @@ jobs:",
                    "           allowPackageConflicts: true",
                    "   steps:",
                    "   - checkout: self",
                    "+    lfs: true"
                ],
                "after": [
                    "-      script: 'dotnet pack --no-build --no-restore $(build_flags) /bl:${{parameters.build_configuration}}-Pack.binlog /p:Configuration=${{parameters.build_configuration}} $(solution)'",
                    "+      script: 'dotnet pack --no-build --no-restore $(build_flags) /bl:${{parameters.build_configuration}}-Pack.binlog /p:Configuration=${{parameters.build_configuration}} /p:ContinuousIntegrationBuild=true $(solution)'",
                    "       workingDirectory: $(Build.SourcesDirectory)/dotnet",
                    "     env:",
                    "       ${{ if and(eq(parameters.include_suffix, true), eq(parameters.publish_nuget, false)) }}:"
                ]
            },
            ".github/workflows/docs.yml": {
                "before": [
                    "@@ -33,7 +33,7 @@ jobs:",
                    "           [",
                    "             # For main use the workflow target",
                    "             { ref: \"${{github.ref}}\", dest-dir: dev, uv-version: \"0.5.13\", sphinx-release-override: \"dev\" },",
                    "-            { ref: \"v0.4.3\", dest-dir: stable, uv-version: \"0.5.13\", sphinx-release-override: \"stable\" },"
                ],
                "after": [
                    "-    needs: [build-02, build-04, gen-redirects, gen-component-schema]",
                    "+    needs: [build-02, build-04, build-04-dotnet, gen-redirects, gen-component-schema]",
                    "     if: ${{ needs.build-02.result == 'success' && needs.build-04.result == 'success' && needs.gen-redirects.result == 'success' && github.ref == 'refs/heads/main' }}",
                    "     steps:",
                    "       - uses: actions/download-artifact@v4"
                ]
            },
            ".gitignore": {
                "before": [
                    "@@ -195,4 +195,7 @@ samples/apps/autogen-studio/autogenstudio/models/test/",
                    " notebook/coding",
                    " ",
                    " # dotnet artifacts",
                    "-artifacts"
                ],
                "after": [
                    "+artifacts",
                    "+",
                    "+# project data",
                    "+registry.json",
                    "\\ No newline at end of file"
                ]
            },
            "README.md": {
                "before": [
                    "@@ -23,7 +23,7 @@ AutoGen requires **Python 3.10 or later**.",
                    " pip install -U \"autogen-agentchat\" \"autogen-ext[openai]\"",
                    " ```",
                    " ",
                    "-The current stable version is v0.4. If you are upgrading from AutoGen v0.2, please refer to the [Migration Guide](https://microsoft.github.io/autogen/dev/user-guide/agentchat-user-guide/migration-guide.html) for detailed instructions on how to update your code and configurations."
                ],
                "after": [
                    "+| Tutorial      | [![Tutorial](https://img.shields.io/badge/Tutorial-blue)](https://microsoft.github.io/autogen/stable/user-guide/agentchat-user-guide/tutorial/index.html)                                                                                                                                                                                                                                                            | \\*                                                                                             | [![Usage](https://img.shields.io/badge/Quickstart-blue)](https://microsoft.github.io/autogen/stable/user-guide/autogenstudio-user-guide/usage.html#)        |",
                    "+| API Reference | [![API](https://img.shields.io/badge/Docs-blue)](https://microsoft.github.io/autogen/stable/reference/index.html#)                                                                                                                                                                                                                                                                                                    | \\*                                                                                             | [![API](https://img.shields.io/badge/Docs-purple)](https://microsoft.github.io/autogen/stable/user-guide/autogenstudio-user-guide/usage.html)               |",
                    " | Packages      | [![PyPi autogen-core](https://img.shields.io/badge/PyPi-autogen--core-blue?logo=pypi)](https://pypi.org/project/autogen-core/) <br> [![PyPi autogen-agentchat](https://img.shields.io/badge/PyPi-autogen--agentchat-blue?logo=pypi)](https://pypi.org/project/autogen-agentchat/) <br> [![PyPi autogen-ext](https://img.shields.io/badge/PyPi-autogen--ext-blue?logo=pypi)](https://pypi.org/project/autogen-ext/) | \\*                                                                                             | [![PyPi autogenstudio](https://img.shields.io/badge/PyPi-autogenstudio-purple?logo=pypi)](https://pypi.org/project/autogenstudio/)                       |",
                    " ",
                    " </div>"
                ]
            },
            "docs/dotnet/.gitignore": {
                "before": [
                    "@@ -0,0 +1,12 @@",
                    "+###############",
                    "+#    folder   #",
                    "+###############",
                    "+/**/DROP/"
                ],
                "after": [
                    "+/**/obj/",
                    "+",
                    "+# build artifacts for web",
                    "+_site/",
                    "+api/"
                ]
            },
            "docs/dotnet/README.md": {
                "before": [
                    "@@ -0,0 +1,13 @@",
                    "+## How to build and run the website",
                    "+",
                    "+### Prerequisites",
                    "+- dotnet 7.0 or later"
                ],
                "after": [
                    "+dotnet tool run docfx website/docfx.json --serve",
                    "+```",
                    "+",
                    "+After the command is executed, you can open your browser and navigate to `http://localhost:8080` to view the website.",
                    "\\ No newline at end of file"
                ]
            },
            "docs/dotnet/core/differences-from-python.md": {
                "before": [
                    "@@ -0,0 +1,8 @@",
                    "+# Differences from Python",
                    "+",
                    "+## Publishing to a topic that an agent is also subscribed to",
                    "+"
                ],
                "after": [
                    "+",
                    "+> [!NOTE]",
                    "+> TLDR; Default behavior is identical.",
                    "+",
                    "+When an agent publishes a message to a topic to which it also listens, the message will not be received by the agent that sent it. This is also the behavior in the Python runtime. However to support previous usage, in @Microsoft.AutoGen.Core.InProcessRuntime, you can set the @Microsoft.AutoGen.Core.InProcessRuntime.DeliverToSelf property to true in the TopicSubscription attribute to allow an agent to receive messages it sends."
                ]
            },
            "docs/dotnet/core/index.md": {
                "before": [
                    "@@ -0,0 +1,7 @@",
                    "+# AutoGen Core",
                    "+",
                    "+AutoGen Core for .NET follows the same concepts and conventions of its Python counterpart. In fact, in order to understand the concepts in the .NET version, we recommend reading the Python documentation first. Unless otherwise stated, the concepts in the Python version map to .NET.",
                    "+"
                ],
                "after": [
                    "+AutoGen Core for .NET follows the same concepts and conventions of its Python counterpart. In fact, in order to understand the concepts in the .NET version, we recommend reading the Python documentation first. Unless otherwise stated, the concepts in the Python version map to .NET.",
                    "+",
                    "+Any important differences between the language versions are documented in the [Differences from Python](./differences-from-python.md) section. For things that only affect a given language, such as dependency injection or host builder patterns, these will not be specified in the differences document.",
                    "+",
                    "+For .NET we are starting with the core functionality and will be expanding support progressively. So far the core abstractions of Agent and Runtime are available. The InProcessRuntime is the only runtime available at this time. We will be expanding to cross language support in upcoming releases."
                ]
            },
            "docs/dotnet/core/installation.md": {
                "before": [
                    "@@ -0,0 +1,22 @@",
                    "+# Installation",
                    "+",
                    "+Install via `.NET cli`",
                    "+"
                ],
                "after": [
                    "+",
                    "+```xml",
                    "+<PackageReference Include=\"Microsoft.AutoGen.Contracts\" Version=\"0.4.0-dev.1\" />",
                    "+<PackageReference Include=\"Microsoft.AutoGen.Core\" Version=\"0.4.0-dev.1\" />",
                    "+```"
                ]
            },
            "docs/dotnet/core/protobuf-message-types.md": {
                "before": [
                    "@@ -0,0 +1,58 @@",
                    "+# Using Protocol Buffers to Define Message Types",
                    "+",
                    "+For a message to be sent using a runtime other than the @Microsoft.AutoGen.Core.InProcessRuntime, it must be defined as a Protocol Buffers message. This is because the message is serialized and deserialized using Protocol Buffers. This requirement may be relaxed in future by allowing for converters, custom serialization, or other mechanisms.",
                    "+"
                ],
                "after": [
                    "+    {",
                    "+        Console.WriteLine($\"Received message from {item.Source}: {item.Content}\");",
                    "+    }",
                    "+}",
                    "+```"
                ]
            },
            "docs/dotnet/core/toc.yml": {
                "before": [
                    "@@ -0,0 +1,10 @@",
                    "+- name: Overview",
                    "+  href: index.md",
                    "+- name: Installation",
                    "+  href: installation.md"
                ],
                "after": [
                    "+- name: Differences from Python",
                    "+  href: differences-from-python.md",
                    "+- name: Protobuf message types",
                    "+  href: protobuf-message-types.md",
                    "\\ No newline at end of file"
                ]
            },
            "docs/dotnet/core/tutorial.md": {
                "before": [
                    "@@ -0,0 +1,165 @@",
                    "+# Tutorial",
                    "+",
                    "+> [!TIP]",
                    "+> If you'd prefer to just see the code the entire sample is available as a [project here](https://github.com/microsoft/autogen/tree/main/dotnet/samples/GettingStarted)."
                ],
                "after": [
                    "+Here are some ideas to try with this sample:",
                    "+",
                    "+- Change the initial count",
                    "+- Create a new modifier function that counts up instead. (Don't forget to change the checker too!)",
                    "+- Create an agent that outputs to the console instead of the modifier or checker agent doing it themselves (hint: use a new message type)"
                ]
            },
            "docs/dotnet/docfx.json": {
                "before": [
                    "@@ -0,0 +1,72 @@",
                    "+{",
                    "+  \"metadata\": [",
                    "+    {",
                    "+      \"src\": ["
                ],
                "after": [
                    "+    \"keepFileLink\": false,",
                    "+    \"disableGitFeatures\": false",
                    "+  }",
                    "+}",
                    "\\ No newline at end of file"
                ]
            },
            "docs/dotnet/images/logo.svg": {
                "before": [
                    "@@ -0,0 +1,4 @@",
                    "+<svg width=\"96\" height=\"85\" viewBox=\"0 0 96 85\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">",
                    "+<rect width=\"96\" height=\"85\" rx=\"6\" fill=\"#2D2D2F\"/>",
                    "+<path d=\"M32.6484 28.7109L23.3672 57H15.8906L28.5703 22.875H33.3281L32.6484 28.7109ZM40.3594 57L31.0547 28.7109L30.3047 22.875H35.1094L47.8594 57H40.3594ZM39.9375 44.2969V49.8047H21.9141V44.2969H39.9375ZM77.6484 39.1641V52.6875C77.1172 53.3281 76.2969 54.0234 75.1875 54.7734C74.0781 55.5078 72.6484 56.1406 70.8984 56.6719C69.1484 57.2031 67.0312 57.4688 64.5469 57.4688C62.3438 57.4688 60.3359 57.1094 58.5234 56.3906C56.7109 55.6562 55.1484 54.5859 53.8359 53.1797C52.5391 51.7734 51.5391 50.0547 50.8359 48.0234C50.1328 45.9766 49.7812 43.6406 49.7812 41.0156V38.8828C49.7812 36.2578 50.1172 33.9219 50.7891 31.875C51.4766 29.8281 52.4531 28.1016 53.7188 26.6953C54.9844 25.2891 56.4922 24.2188 58.2422 23.4844C59.9922 22.75 61.9375 22.3828 64.0781 22.3828C67.0469 22.3828 69.4844 22.8672 71.3906 23.8359C73.2969 24.7891 74.75 26.1172 75.75 27.8203C76.7656 29.5078 77.3906 31.4453 77.625 33.6328H70.8047C70.6328 32.4766 70.3047 31.4688 69.8203 30.6094C69.3359 29.75 68.6406 29.0781 67.7344 28.5938C66.8438 28.1094 65.6875 27.8672 64.2656 27.8672C63.0938 27.8672 62.0469 28.1094 61.125 28.5938C60.2188 29.0625 59.4531 29.7578 58.8281 30.6797C58.2031 31.6016 57.7266 32.7422 57.3984 34.1016C57.0703 35.4609 56.9062 37.0391 56.9062 38.8359V41.0156C56.9062 42.7969 57.0781 44.375 57.4219 45.75C57.7656 47.1094 58.2734 48.2578 58.9453 49.1953C59.6328 50.1172 60.4766 50.8125 61.4766 51.2812C62.4766 51.75 63.6406 51.9844 64.9688 51.9844C66.0781 51.9844 67 51.8906 67.7344 51.7031C68.4844 51.5156 69.0859 51.2891 69.5391 51.0234C70.0078 50.7422 70.3672 50.4766 70.6172 50.2266V44.1797H64.1953V39.1641H77.6484Z\" fill=\"white\"/>",
                    "+</svg>"
                ],
                "after": [
                    "@@ -0,0 +1,4 @@",
                    "+<svg width=\"96\" height=\"85\" viewBox=\"0 0 96 85\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">",
                    "+<rect width=\"96\" height=\"85\" rx=\"6\" fill=\"#2D2D2F\"/>",
                    "+<path d=\"M32.6484 28.7109L23.3672 57H15.8906L28.5703 22.875H33.3281L32.6484 28.7109ZM40.3594 57L31.0547 28.7109L30.3047 22.875H35.1094L47.8594 57H40.3594ZM39.9375 44.2969V49.8047H21.9141V44.2969H39.9375ZM77.6484 39.1641V52.6875C77.1172 53.3281 76.2969 54.0234 75.1875 54.7734C74.0781 55.5078 72.6484 56.1406 70.8984 56.6719C69.1484 57.2031 67.0312 57.4688 64.5469 57.4688C62.3438 57.4688 60.3359 57.1094 58.5234 56.3906C56.7109 55.6562 55.1484 54.5859 53.8359 53.1797C52.5391 51.7734 51.5391 50.0547 50.8359 48.0234C50.1328 45.9766 49.7812 43.6406 49.7812 41.0156V38.8828C49.7812 36.2578 50.1172 33.9219 50.7891 31.875C51.4766 29.8281 52.4531 28.1016 53.7188 26.6953C54.9844 25.2891 56.4922 24.2188 58.2422 23.4844C59.9922 22.75 61.9375 22.3828 64.0781 22.3828C67.0469 22.3828 69.4844 22.8672 71.3906 23.8359C73.2969 24.7891 74.75 26.1172 75.75 27.8203C76.7656 29.5078 77.3906 31.4453 77.625 33.6328H70.8047C70.6328 32.4766 70.3047 31.4688 69.8203 30.6094C69.3359 29.75 68.6406 29.0781 67.7344 28.5938C66.8438 28.1094 65.6875 27.8672 64.2656 27.8672C63.0938 27.8672 62.0469 28.1094 61.125 28.5938C60.2188 29.0625 59.4531 29.7578 58.8281 30.6797C58.2031 31.6016 57.7266 32.7422 57.3984 34.1016C57.0703 35.4609 56.9062 37.0391 56.9062 38.8359V41.0156C56.9062 42.7969 57.0781 44.375 57.4219 45.75C57.7656 47.1094 58.2734 48.2578 58.9453 49.1953C59.6328 50.1172 60.4766 50.8125 61.4766 51.2812C62.4766 51.75 63.6406 51.9844 64.9688 51.9844C66.0781 51.9844 67 51.8906 67.7344 51.7031C68.4844 51.5156 69.0859 51.2891 69.5391 51.0234C70.0078 50.7422 70.3672 50.4766 70.6172 50.2266V44.1797H64.1953V39.1641H77.6484Z\" fill=\"white\"/>",
                    "+</svg>"
                ]
            },
            "docs/dotnet/index.md": {
                "before": [
                    "@@ -0,0 +1,40 @@",
                    "+---",
                    "+_disableAffix: true",
                    "+---",
                    "+<style>"
                ],
                "after": [
                    "+        <a href=\"#\" class=\"btn btn-primary disabled\">Coming soon</a>",
                    "+      </div>",
                    "+    </div>",
                    "+  </div>",
                    "+</div>"
                ]
            },
            "docs/dotnet/template/public/main.css": {
                "before": [
                    "@@ -0,0 +1,4 @@",
                    "+.navbar-brand img {",
                    "+    height: 50px;",
                    "+    margin-right: 0.5rem;",
                    "+}"
                ],
                "after": [
                    "@@ -0,0 +1,4 @@",
                    "+.navbar-brand img {",
                    "+    height: 50px;",
                    "+    margin-right: 0.5rem;",
                    "+}"
                ]
            },
            "docs/dotnet/template/public/main.js": {
                "before": [
                    "@@ -0,0 +1,9 @@",
                    "+export default {",
                    "+    iconLinks: [",
                    "+      {",
                    "+        icon: 'github',"
                ],
                "after": [
                    "+        title: 'GitHub'",
                    "+      }",
                    "+    ]",
                    "+  }",
                    "\\ No newline at end of file"
                ]
            },
            "docs/dotnet/toc.yml": {
                "before": [
                    "@@ -0,0 +1,8 @@",
                    "+- name: Core",
                    "+  href: core/",
                    "+",
                    "+- name: API Reference"
                ],
                "after": [
                    "+- name: API Reference",
                    "+  href: api/",
                    "+",
                    "+- name: Python\u2934",
                    "+  href: https://microsoft.github.io/autogen/"
                ]
            },
            "docs/dotnet/user-guide/core-user-guide/defining-message-types.md": {
                "before": [
                    "@@ -1,30 +0,0 @@",
                    "-# Defining Message Types",
                    "-",
                    "-Messages are currently required to be Protocol Buffers. To define them, it is necessary to include the Protocol Buffers compiler, through the `Grpc.Tools` package. In your `.csproj` file, add/edit:",
                    "-"
                ],
                "after": [
                    "-    string Source = 1;",
                    "-    string Content = 2;",
                    "-}",
                    "-```",
                    "\\ No newline at end of file"
                ]
            },
            "docs/dotnet/user-guide/core-user-guide/differences-python.md": {
                "before": [
                    "@@ -1,46 +0,0 @@",
                    "-# Differences from Python",
                    "-",
                    "-## Agents Self-Interact",
                    "-"
                ],
                "after": [
                    "-",
                    "-See (linkto: defining-message-types.md) for instructions on defining messages",
                    "-",
                    "-Tracked by [#4695](https://github.com/microsoft/autogen/issues/4695)",
                    "\\ No newline at end of file"
                ]
            },
            "docs/dotnet/user-guide/core-user-guide/getting-started.md": {
                "before": [
                    "@@ -1,143 +0,0 @@",
                    "-# Quick Start",
                    "-",
                    "-Before diving into the core APIs, let\u2019s start with a simple example of two agents that count down from 10 to 1.",
                    "-"
                ],
                "after": [
                    "-",
                    "-// Run until application shutdown",
                    "-await app.WaitForShutdownAsync();",
                    "-```",
                    "\\ No newline at end of file"
                ]
            },
            "docs/dotnet/user-guide/core-user-guide/installation.md": {
                "before": [
                    "@@ -1,33 +0,0 @@",
                    "-# Installation",
                    "-",
                    "-## Add via `<ProjectReference>`",
                    "-"
                ],
                "after": [
                    "-",
                    "-```",
                    "-  <PackageReference Include=\"Microsoft.AutoGen.Contracts\" Version=\"0.2.1\" />",
                    "-  <PackageReference Include=\"Microsoft.AutoGen.Core\" Version=\"0.2.1\" />",
                    "-```"
                ]
            },
            "docs/switcher.json": {
                "before": [
                    "@@ -1,6 +1,6 @@",
                    " [",
                    "     {",
                    "-        \"name\": \"0.4.3 (stable)\",",
                    "+        \"name\": \"0.4.4 (stable)\","
                ],
                "after": [
                    "         \"url\": \"/autogen/0.2/\"",
                    "     }",
                    "-]",
                    "+]",
                    "\\ No newline at end of file"
                ]
            },
            "dotnet/.editorconfig": {
                "before": [
                    "@@ -701,3 +701,7 @@ generated_code = true",
                    " ",
                    " # IDE1591 Missing XML comment for publicly visible type or member",
                    " dotnet_diagnostic.CS1591.severity = none",
                    "+"
                ],
                "after": [
                    "+",
                    "+[I*.cs]",
                    "+# dont warn on missing accessibility modifiers for interfaces",
                    "+dotnet_diagnostic.IDE0040.severity = none",
                    "\\ No newline at end of file"
                ]
            },
            "dotnet/AutoGen.sln": {
                "before": [
                    "@@ -84,63 +84,39 @@ Project(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"Microsoft.AutoGen.Extension",
                    " EndProject",
                    " Project(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"AgentChat\", \"AgentChat\", \"{668726B9-77BC-45CF-B576-0F0773BF1615}\"",
                    " EndProject",
                    "-Project(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"AutoGen.Anthropic.Samples\", \"samples\\AutoGen.Anthropic.Samples\\AutoGen.Anthropic.Samples.csproj\", \"{84020C4A-933A-4693-9889-1B99304A7D76}\""
                ],
                "after": [
                    "+\t\t{AAD593FE-A49B-425E-A9FE-A0022CD25E3D} = {F42F9C8E-7BD9-4687-9B63-AFFA461AF5C1}",
                    "+\t\t{F42F9C8E-7BD9-4687-9B63-AFFA461AF5C1} = {CE0AA8D5-12B8-4628-9589-DAD8CB0DDCF6}",
                    " \tEndGlobalSection",
                    " \tGlobalSection(ExtensibilityGlobals) = postSolution",
                    " \t\tSolutionGuid = {93384647-528D-46C8-922C-8DB36A382F0B}"
                ]
            },
            "dotnet/Directory.Build.props": {
                "before": [
                    "@@ -8,6 +8,7 @@",
                    "     <TestTargetFrameworks>net8.0</TestTargetFrameworks>",
                    "     <LangVersion>preview</LangVersion>",
                    " \t  <Nullable>enable</Nullable>",
                    "+    <Deterministic>true</Deterministic>"
                ],
                "after": [
                    "-    <DebugType>embedded</DebugType>",
                    "-    <DebugSymbols>true</DebugSymbols>",
                    "   </PropertyGroup>",
                    " ",
                    "   <PropertyGroup>"
                ]
            },
            "dotnet/Directory.Packages.props": {
                "before": [
                    "@@ -7,16 +7,17 @@",
                    "     <MicrosoftExtensionConfiguration>9.0.0</MicrosoftExtensionConfiguration>",
                    "     <MicrosoftExtensionDependencyInjection>9.0.0</MicrosoftExtensionDependencyInjection>",
                    "     <MicrosoftExtensionLogging>9.0.0</MicrosoftExtensionLogging>",
                    "+    <MicrosoftExtensionOptions>9.0.0</MicrosoftExtensionOptions>"
                ],
                "after": [
                    "-    <PackageVersion Include=\"Microsoft.AspNetCore.TestHost\" Version=\"8.0.11\" />",
                    "-    <PackageVersion Include=\"coverlet.collector\" Version=\"6.0.2\" />",
                    "   </ItemGroup>",
                    " </Project>",
                    "\\ No newline at end of file"
                ]
            },
            "dotnet/README.md": {
                "before": [
                    "@@ -52,7 +52,7 @@ await userProxyAgent.InitiateChatAsync(",
                    " ",
                    " ## Samples",
                    " ",
                    "-You can find more examples under the [sample project](https://github.com/microsoft/autogen/tree/dotnet/samples/AutoGen.BasicSamples)."
                ],
                "after": [
                    "-You can find more examples under the [sample project](https://github.com/microsoft/autogen/tree/dotnet/samples/AutoGen.BasicSamples).",
                    "+You can find more examples under the [sample project](https://github.com/microsoft/autogen/tree/dotnet/samples/AgentChat/Autogen.Basic.Sample).",
                    " ",
                    " ## Functionality",
                    " "
                ]
            },
            "dotnet/eng/MetaInfo.props": {
                "before": [
                    "@@ -3,7 +3,7 @@",
                    "     <PropertyGroup>",
                    "         <VersionPrefix>0.4.0</VersionPrefix>",
                    "         <VersionPrefixForAutoGen0_2>0.2.2</VersionPrefixForAutoGen0_2>",
                    "-        <Authors>AutoGen</Authors>"
                ],
                "after": [
                    "-        <Authors>AutoGen</Authors>",
                    "+        <Authors>Microsoft</Authors>",
                    "         <PackageProjectUrl>https://microsoft.github.io/autogen-for-net/</PackageProjectUrl>",
                    "         <RepositoryUrl>https://github.com/microsoft/autogen</RepositoryUrl>",
                    "         <RepositoryType>git</RepositoryType>"
                ]
            },
            "dotnet/nuget/nuget-package.props": {
                "before": [
                    "@@ -3,8 +3,7 @@",
                    "     <IsPackable>true</IsPackable>",
                    " ",
                    "     <!-- Default description and tags. Packages can override. -->",
                    "-    <Authors>AutoGen</Authors>"
                ],
                "after": [
                    "+    <None Include=\"$(RepoRoot)nuget/icon.png\" Link=\"icon.png\" Pack=\"true\" PackagePath=\".\" />",
                    "+    <None Include=\"$(RepoRoot)nuget/NUGET.md\" Link=\"NUGET.md\" Pack=\"true\" PackagePath=\".\" />",
                    "   </ItemGroup>",
                    " ",
                    "   <PropertyGroup Condition=\" '$(Configuration)' == 'Release' \">"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Anthropic.Sample/Anthropic_Agent_With_Prompt_Caching.cs": {
                "before": [
                    "@@ -6,7 +6,7 @@",
                    " using AutoGen.Anthropic.Utils;",
                    " using AutoGen.Core;",
                    " ",
                    "-namespace AutoGen.Anthropic.Samples;"
                ],
                "after": [
                    "-namespace AutoGen.Anthropic.Samples;",
                    "+namespace AutoGen.Anthropic.Sample;",
                    " ",
                    " public class Anthropic_Agent_With_Prompt_Caching",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Anthropic.Sample/AutoGen.Anthropic.Sample.csproj": {
                "before": [
                    "@@ -0,0 +1,19 @@",
                    "+<Project Sdk=\"Microsoft.NET.Sdk\">",
                    "+",
                    "+    <PropertyGroup>",
                    "+      <OutputType>Exe</OutputType>"
                ],
                "after": [
                    "+      <ProjectReference Include=\"..\\..\\..\\src\\AutoGen\\AutoGen.csproj\" />",
                    "+      <PackageReference Include=\"FluentAssertions\" />",
                    "+    </ItemGroup>",
                    "+",
                    "+</Project>"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Anthropic.Sample/Create_Anthropic_Agent.cs": {
                "before": [
                    "@@ -5,7 +5,7 @@",
                    " using AutoGen.Anthropic.Utils;",
                    " using AutoGen.Core;",
                    " ",
                    "-namespace AutoGen.Anthropic.Samples;"
                ],
                "after": [
                    "-namespace AutoGen.Anthropic.Samples;",
                    "+namespace AutoGen.Anthropic.Sample;",
                    " ",
                    " public static class Create_Anthropic_Agent",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Anthropic.Sample/Create_Anthropic_Agent_With_Tool.cs": {
                "before": [
                    "@@ -7,7 +7,7 @@",
                    " using AutoGen.Core;",
                    " using FluentAssertions;",
                    " ",
                    "-namespace AutoGen.Anthropic.Samples;"
                ],
                "after": [
                    "-namespace AutoGen.Anthropic.Samples;",
                    "+namespace AutoGen.Anthropic.Sample;",
                    " ",
                    " #region WeatherFunction",
                    " "
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Anthropic.Sample/Program.cs": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // Program.cs",
                    " ",
                    "-namespace AutoGen.Anthropic.Samples;"
                ],
                "after": [
                    "-namespace AutoGen.Anthropic.Samples;",
                    "+namespace AutoGen.Anthropic.Sample;",
                    " ",
                    " internal static class Program",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/AutoGen.Basic.Sample.csproj": {
                "before": [
                    "@@ -10,9 +10,9 @@",
                    "   </PropertyGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\src\\AutoGen.DotnetInteractive\\AutoGen.DotnetInteractive.csproj\" />"
                ],
                "after": [
                    "+    <ProjectReference Include=\"..\\..\\..\\src\\AutoGen.SourceGenerator\\AutoGen.SourceGenerator.csproj\" OutputItemType=\"Analyzer\" ReferenceOutputAssembly=\"false\" />",
                    "+    <ProjectReference Include=\"..\\..\\..\\src\\AutoGen\\AutoGen.csproj\" />",
                    "     <PackageReference Include=\"FluentAssertions\" />",
                    "     <PackageReference Include=\"Microsoft.SemanticKernel.Plugins.Web\" />",
                    "     <PackageReference Include=\"Microsoft.Extensions.AI\" />"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/CodeSnippet/AgentCodeSnippet.cs": {
                "before": [
                    "@@ -3,7 +3,7 @@",
                    " ",
                    " using AutoGen.Core;",
                    " ",
                    "-namespace AutoGen.BasicSample.CodeSnippet;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample.CodeSnippet;",
                    "+namespace AutoGen.Basic.Sample.CodeSnippet;",
                    " ",
                    " internal class AgentCodeSnippet",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/CodeSnippet/BuildInMessageCodeSnippet.cs": {
                "before": [
                    "@@ -2,7 +2,7 @@",
                    " // BuildInMessageCodeSnippet.cs",
                    " ",
                    " using AutoGen.Core;",
                    "-namespace AutoGen.BasicSample.CodeSnippet;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample.CodeSnippet;",
                    "+namespace AutoGen.Basic.Sample.CodeSnippet;",
                    " ",
                    " internal class BuildInMessageCodeSnippet",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/CodeSnippet/MiddlewareAgentCodeSnippet.cs": {
                "before": [
                    "@@ -6,7 +6,7 @@",
                    " using AutoGen.OpenAI;",
                    " using FluentAssertions;",
                    " ",
                    "-namespace AutoGen.BasicSample.CodeSnippet;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample.CodeSnippet;",
                    "+namespace AutoGen.Basic.Sample.CodeSnippet;",
                    " ",
                    " public class MiddlewareAgentCodeSnippet",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/CodeSnippet/MistralAICodeSnippet.cs": {
                "before": [
                    "@@ -8,7 +8,7 @@",
                    " using FluentAssertions;",
                    " #endregion using_statement",
                    " ",
                    "-namespace AutoGen.BasicSample.CodeSnippet;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample.CodeSnippet;",
                    "+namespace AutoGen.Basic.Sample.CodeSnippet;",
                    " ",
                    " #region weather_function",
                    " public partial class MistralAgentFunction"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/CodeSnippet/OpenAICodeSnippet.cs": {
                "before": [
                    "@@ -10,7 +10,7 @@",
                    " using OpenAI;",
                    " using OpenAI.Chat;",
                    " ",
                    "-namespace AutoGen.BasicSample.CodeSnippet;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample.CodeSnippet;",
                    "+namespace AutoGen.Basic.Sample.CodeSnippet;",
                    " #region weather_function",
                    " public partial class Functions",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/CodeSnippet/PrintMessageMiddlewareCodeSnippet.cs": {
                "before": [
                    "@@ -5,7 +5,7 @@",
                    " using AutoGen.OpenAI;",
                    " using AutoGen.OpenAI.Extension;",
                    " ",
                    "-namespace AutoGen.BasicSample.CodeSnippet;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample.CodeSnippet;",
                    "+namespace AutoGen.Basic.Sample.CodeSnippet;",
                    " ",
                    " internal class PrintMessageMiddlewareCodeSnippet",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/CodeSnippet/RunCodeSnippetCodeSnippet.cs": {
                "before": [
                    "@@ -7,7 +7,7 @@",
                    " using AutoGen.DotnetInteractive.Extension;",
                    " #endregion code_snippet_0_1",
                    " ",
                    "-namespace AutoGen.BasicSample.CodeSnippet;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample.CodeSnippet;",
                    "+namespace AutoGen.Basic.Sample.CodeSnippet;",
                    " public class RunCodeSnippetCodeSnippet",
                    " {",
                    "     public async Task CodeSnippet1()"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/CodeSnippet/SemanticKernelCodeSnippet.cs": {
                "before": [
                    "@@ -8,7 +8,7 @@",
                    " using Microsoft.SemanticKernel;",
                    " using Microsoft.SemanticKernel.ChatCompletion;",
                    " ",
                    "-namespace AutoGen.BasicSample.CodeSnippet;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample.CodeSnippet;",
                    "+namespace AutoGen.Basic.Sample.CodeSnippet;",
                    " ",
                    " public class SemanticKernelCodeSnippet",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/CodeSnippet/UserProxyAgentCodeSnippet.cs": {
                "before": [
                    "@@ -3,7 +3,7 @@",
                    " ",
                    " using AutoGen.Core;",
                    " ",
                    "-namespace AutoGen.BasicSample.CodeSnippet;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample.CodeSnippet;",
                    "+namespace AutoGen.Basic.Sample.CodeSnippet;",
                    " ",
                    " public class UserProxyAgentCodeSnippet",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/Example01_AssistantAgent.cs": {
                "before": [
                    "@@ -2,7 +2,7 @@",
                    " // Example01_AssistantAgent.cs",
                    " ",
                    " using AutoGen;",
                    "-using AutoGen.BasicSample;"
                ],
                "after": [
                    "-using AutoGen.BasicSample;",
                    "+using AutoGen.Basic.Sample;",
                    " using AutoGen.Core;",
                    " using AutoGen.OpenAI;",
                    " using AutoGen.OpenAI.Extension;"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/Example02_TwoAgent_MathChat.cs": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // Example02_TwoAgent_MathChat.cs",
                    " ",
                    "-using AutoGen.BasicSample;"
                ],
                "after": [
                    "-using AutoGen.BasicSample;",
                    "+using AutoGen.Basic.Sample;",
                    " using AutoGen.Core;",
                    " using AutoGen.OpenAI;",
                    " using AutoGen.OpenAI.Extension;"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/Example03_Agent_FunctionCall.cs": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // Example03_Agent_FunctionCall.cs",
                    " ",
                    "-using AutoGen.BasicSample;"
                ],
                "after": [
                    "-using AutoGen.BasicSample;",
                    "+using AutoGen.Basic.Sample;",
                    " using AutoGen.Core;",
                    " using AutoGen.OpenAI;",
                    " using AutoGen.OpenAI.Extension;"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/Example04_Dynamic_GroupChat_Coding_Task.cs": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // Example04_Dynamic_GroupChat_Coding_Task.cs",
                    " ",
                    "-using AutoGen.BasicSample;"
                ],
                "after": [
                    "-using AutoGen.BasicSample;",
                    "+using AutoGen.Basic.Sample;",
                    " using AutoGen.Core;",
                    " using AutoGen.DotnetInteractive;",
                    " using AutoGen.DotnetInteractive.Extension;"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/Example06_UserProxyAgent.cs": {
                "before": [
                    "@@ -5,7 +5,7 @@",
                    " using AutoGen.OpenAI;",
                    " using AutoGen.OpenAI.Extension;",
                    " ",
                    "-namespace AutoGen.BasicSample;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample;",
                    "+namespace AutoGen.Basic.Sample;",
                    " ",
                    " public static class Example06_UserProxyAgent",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/Example07_Dynamic_GroupChat_Calculate_Fibonacci.cs": {
                "before": [
                    "@@ -3,7 +3,7 @@",
                    " ",
                    " using System.Text;",
                    " using System.Text.Json;",
                    "-using AutoGen.BasicSample;"
                ],
                "after": [
                    "-using AutoGen.BasicSample;",
                    "+using AutoGen.Basic.Sample;",
                    " using AutoGen.Core;",
                    " using AutoGen.DotnetInteractive;",
                    " using AutoGen.DotnetInteractive.Extension;"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/Example08_LMStudio.cs": {
                "before": [
                    "@@ -9,7 +9,7 @@",
                    " using OpenAI;",
                    " #endregion lmstudio_using_statements",
                    " ",
                    "-namespace AutoGen.BasicSample;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample;",
                    "+namespace AutoGen.Basic.Sample;",
                    " ",
                    " public class Example08_LMStudio",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/Example10_SemanticKernel.cs": {
                "before": [
                    "@@ -8,7 +8,7 @@",
                    " using Microsoft.SemanticKernel;",
                    " using Microsoft.SemanticKernel.ChatCompletion;",
                    " using Microsoft.SemanticKernel.Connectors.OpenAI;",
                    "-namespace AutoGen.BasicSample;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample;",
                    "+namespace AutoGen.Basic.Sample;",
                    " ",
                    " public class LightPlugin",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/Example11_Sequential_GroupChat_Example.cs": {
                "before": [
                    "@@ -12,7 +12,7 @@",
                    " using Microsoft.SemanticKernel.Plugins.Web.Bing;",
                    " #endregion using_statement",
                    " ",
                    "-namespace AutoGen.BasicSample;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample;",
                    "+namespace AutoGen.Basic.Sample;",
                    " ",
                    " public partial class Sequential_GroupChat_Example",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/Example12_TwoAgent_Fill_Application.cs": {
                "before": [
                    "@@ -6,7 +6,7 @@",
                    " using AutoGen.OpenAI;",
                    " using AutoGen.OpenAI.Extension;",
                    " ",
                    "-namespace AutoGen.BasicSample;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample;",
                    "+namespace AutoGen.Basic.Sample;",
                    " ",
                    " public partial class TwoAgent_Fill_Application",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/Example14_MistralClientAgent_TokenCount.cs": {
                "before": [
                    "@@ -7,7 +7,7 @@",
                    " #endregion using_statements",
                    " using FluentAssertions;",
                    " ",
                    "-namespace AutoGen.BasicSample;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample;",
                    "+namespace AutoGen.Basic.Sample;",
                    " ",
                    " public class Example14_MistralClientAgent_TokenCount",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/Example15_GPT4V_BinaryDataImageMessage.cs": {
                "before": [
                    "@@ -5,7 +5,7 @@",
                    " using AutoGen.OpenAI;",
                    " using AutoGen.OpenAI.Extension;",
                    " ",
                    "-namespace AutoGen.BasicSample;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample;",
                    "+namespace AutoGen.Basic.Sample;",
                    " ",
                    " /// <summary>",
                    " /// This example shows usage of ImageMessage. The image is loaded as BinaryData and sent to GPT-4V "
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/Example17_ReActAgent.cs": {
                "before": [
                    "@@ -7,7 +7,7 @@",
                    " using OpenAI;",
                    " using OpenAI.Chat;",
                    " ",
                    "-namespace AutoGen.BasicSample;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample;",
                    "+namespace AutoGen.Basic.Sample;",
                    " ",
                    " public class OpenAIReActAgent : IAgent",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/GettingStart/Agent_Middleware.cs": {
                "before": [
                    "@@ -9,7 +9,7 @@",
                    " using FluentAssertions;",
                    " using OpenAI.Chat;",
                    " ",
                    "-namespace AutoGen.BasicSample;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample;",
                    "+namespace AutoGen.Basic.Sample;",
                    " ",
                    " public class Agent_Middleware",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/GettingStart/Chat_With_Agent.cs": {
                "before": [
                    "@@ -9,7 +9,7 @@",
                    " ",
                    " using FluentAssertions;",
                    " ",
                    "-namespace AutoGen.BasicSample;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample;",
                    "+namespace AutoGen.Basic.Sample;",
                    " ",
                    " public class Chat_With_Agent",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/GettingStart/Dynamic_Group_Chat.cs": {
                "before": [
                    "@@ -9,7 +9,7 @@",
                    " using Microsoft.SemanticKernel;",
                    " using OpenAI;",
                    " ",
                    "-namespace AutoGen.BasicSample;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample;",
                    "+namespace AutoGen.Basic.Sample;",
                    " ",
                    " public class Dynamic_Group_Chat",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/GettingStart/FSM_Group_Chat.cs": {
                "before": [
                    "@@ -10,7 +10,7 @@",
                    " using OpenAI.Chat;",
                    " #endregion Using",
                    " ",
                    "-namespace AutoGen.BasicSample;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample;",
                    "+namespace AutoGen.Basic.Sample;",
                    " ",
                    " #region FillFormTool",
                    " public partial class FillFormTool"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/GettingStart/Image_Chat_With_Agent.cs": {
                "before": [
                    "@@ -8,7 +8,7 @@",
                    " #endregion Using",
                    " using FluentAssertions;",
                    " ",
                    "-namespace AutoGen.BasicSample;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample;",
                    "+namespace AutoGen.Basic.Sample;",
                    " ",
                    " public class Image_Chat_With_Agent",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/GettingStart/Streaming_Tool_Call.cs": {
                "before": [
                    "@@ -7,7 +7,7 @@",
                    " using FluentAssertions;",
                    " using OpenAI;",
                    " ",
                    "-namespace AutoGen.BasicSample.GettingStart;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample.GettingStart;",
                    "+namespace AutoGen.Basic.Sample.GettingStart;",
                    " ",
                    " internal class Streaming_Tool_Call",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/GettingStart/Use_Tools_With_Agent.cs": {
                "before": [
                    "@@ -9,7 +9,7 @@",
                    " using FluentAssertions;",
                    " using OpenAI;",
                    " ",
                    "-namespace AutoGen.BasicSample;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample;",
                    "+namespace AutoGen.Basic.Sample;",
                    " ",
                    " #region Tools",
                    " public partial class Tools"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/LLMConfiguration.cs": {
                "before": [
                    "@@ -4,7 +4,7 @@",
                    " using OpenAI;",
                    " using OpenAI.Chat;",
                    " ",
                    "-namespace AutoGen.BasicSample;"
                ],
                "after": [
                    "-namespace AutoGen.BasicSample;",
                    "+namespace AutoGen.Basic.Sample;",
                    " ",
                    " internal static class LLMConfiguration",
                    " {"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Basic.Sample/Program.cs": {
                "before": [
                    "@@ -3,7 +3,7 @@",
                    " ",
                    " //await Example07_Dynamic_GroupChat_Calculate_Fibonacci.RunAsync();",
                    " ",
                    "-using AutoGen.BasicSample;"
                ],
                "after": [
                    "-using AutoGen.BasicSample;",
                    "+using AutoGen.Basic.Sample;",
                    " ",
                    " //Define allSamples collection for all examples",
                    " var allSamples = new List<(string, Func<Task>)>"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Gemini.Sample/AutoGen.Gemini.Sample.csproj": {
                "before": [
                    "@@ -10,9 +10,9 @@",
                    "   </PropertyGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\src\\AutoGen\\AutoGen.csproj\" />"
                ],
                "after": [
                    "+    <ProjectReference Include=\"..\\..\\..\\src\\AutoGen.Gemini\\AutoGen.Gemini.csproj\" />",
                    "+    <ProjectReference Include=\"..\\..\\..\\src\\AutoGen.SourceGenerator\\AutoGen.SourceGenerator.csproj\" OutputItemType=\"Analyzer\" ReferenceOutputAssembly=\"false\" />",
                    "     <PackageReference Include=\"FluentAssertions\" />",
                    "   </ItemGroup>",
                    " "
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.Ollama.Sample/AutoGen.Ollama.Sample.csproj": {
                "before": [
                    "@@ -9,10 +9,10 @@",
                    "   </PropertyGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\src\\AutoGen.DotnetInteractive\\AutoGen.DotnetInteractive.csproj\" />"
                ],
                "after": [
                    "+    <ProjectReference Include=\"..\\..\\..\\src\\AutoGen.SourceGenerator\\AutoGen.SourceGenerator.csproj\" OutputItemType=\"Analyzer\" ReferenceOutputAssembly=\"false\" />",
                    "+    <ProjectReference Include=\"..\\..\\..\\src\\AutoGen\\AutoGen.csproj\" />",
                    "     <PackageReference Include=\"FluentAssertions\" />",
                    "   </ItemGroup>",
                    " "
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.OpenAI.Sample/AutoGen.OpenAI.Sample.csproj": {
                "before": [
                    "@@ -11,10 +11,10 @@",
                    "   </PropertyGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\src\\AutoGen.DotnetInteractive\\AutoGen.DotnetInteractive.csproj\" />"
                ],
                "after": [
                    "+    <ProjectReference Include=\"..\\..\\..\\src\\AutoGen.SourceGenerator\\AutoGen.SourceGenerator.csproj\" OutputItemType=\"Analyzer\" ReferenceOutputAssembly=\"false\" />",
                    "+    <ProjectReference Include=\"..\\..\\..\\src\\AutoGen.OpenAI\\AutoGen.OpenAI.csproj\" />",
                    "     <PackageReference Include=\"FluentAssertions\" />",
                    "     <PackageReference Include=\"Azure.AI.OpenAI\" />",
                    "   </ItemGroup>"
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.SemanticKernel.Sample/AutoGen.SemanticKernel.Sample.csproj": {
                "before": [
                    "@@ -9,9 +9,9 @@",
                    "   </PropertyGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\src\\AutoGen.OpenAI\\AutoGen.OpenAI.csproj\" />"
                ],
                "after": [
                    "+    <ProjectReference Include=\"..\\..\\..\\src\\AutoGen.SemanticKernel\\AutoGen.SemanticKernel.csproj\" />",
                    "+    <ProjectReference Include=\"..\\..\\..\\src\\AutoGen.SourceGenerator\\AutoGen.SourceGenerator.csproj\" OutputItemType=\"Analyzer\" ReferenceOutputAssembly=\"false\" />",
                    "     <PackageReference Include=\"Microsoft.SemanticKernel.Plugins.Web\" />",
                    "   </ItemGroup>",
                    " "
                ]
            },
            "dotnet/samples/AgentChat/AutoGen.WebAPI.Sample/AutoGen.WebAPI.Sample.csproj": {
                "before": [
                    "@@ -7,7 +7,7 @@",
                    "   </PropertyGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\src\\AutoGen.WebAPI\\AutoGen.WebAPI.csproj\" />"
                ],
                "after": [
                    "-    <ProjectReference Include=\"..\\..\\src\\AutoGen.WebAPI\\AutoGen.WebAPI.csproj\" />",
                    "+    <ProjectReference Include=\"..\\..\\..\\src\\AutoGen.WebAPI\\AutoGen.WebAPI.csproj\" />",
                    "   </ItemGroup>",
                    " ",
                    " </Project>"
                ]
            },
            "dotnet/samples/AutoGen.Anthropic.Samples/AutoGen.Anthropic.Samples.csproj": {
                "before": [
                    "@@ -1,19 +0,0 @@",
                    "-<Project Sdk=\"Microsoft.NET.Sdk\">",
                    "-",
                    "-    <PropertyGroup>",
                    "-      <OutputType>Exe</OutputType>"
                ],
                "after": [
                    "-      <ProjectReference Include=\"..\\..\\src\\AutoGen\\AutoGen.csproj\" />",
                    "-      <PackageReference Include=\"FluentAssertions\" />",
                    "-    </ItemGroup>",
                    "-",
                    "-</Project>"
                ]
            },
            "dotnet/samples/GettingStarted/Checker.cs": {
                "before": [
                    "@@ -0,0 +1,36 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// Checker.cs",
                    "+",
                    "+#region snippet_Checker"
                ],
                "after": [
                    "+            hostApplicationLifetime.StopApplication();",
                    "+        }",
                    "+    }",
                    "+}",
                    "+#endregion snippet_Checker"
                ]
            },
            "dotnet/samples/GettingStarted/CountMessage.cs": {
                "before": [
                    "@@ -0,0 +1,11 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// CountMessage.cs",
                    "+",
                    "+#region snippet_CountMessage"
                ],
                "after": [
                    "+public class CountMessage",
                    "+{",
                    "+    public int Content { get; set; }",
                    "+}",
                    "+#endregion"
                ]
            },
            "dotnet/samples/GettingStarted/CountUpdate.cs": {
                "before": [
                    "@@ -0,0 +1,11 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// CountUpdate.cs",
                    "+",
                    "+#region snippet_CountUpdate"
                ],
                "after": [
                    "+public class CountUpdate",
                    "+{",
                    "+    public int NewCount { get; set; }",
                    "+}",
                    "+#endregion"
                ]
            },
            "dotnet/samples/GettingStarted/GettingStarted.csproj": {
                "before": [
                    "@@ -0,0 +1,15 @@",
                    "+\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">",
                    "+",
                    "+  <PropertyGroup>",
                    "+    <OutputType>Exe</OutputType>"
                ],
                "after": [
                    "+  <ItemGroup>",
                    "+    <ProjectReference Include=\"..\\..\\src\\Microsoft.AutoGen\\Contracts\\Microsoft.AutoGen.Contracts.csproj\" />",
                    "+    <ProjectReference Include=\"..\\..\\src\\Microsoft.AutoGen\\Core\\Microsoft.AutoGen.Core.csproj\" />",
                    "+  </ItemGroup>",
                    "+</Project>"
                ]
            },
            "dotnet/samples/GettingStarted/Modifier.cs": {
                "before": [
                    "@@ -0,0 +1,30 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// Modifier.cs",
                    "+#region snippet_Modifier",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+        CountUpdate updateMessage = new CountUpdate { NewCount = newValue };",
                    "+        await this.PublishMessageAsync(updateMessage, topic: new TopicId(\"default\"));",
                    "+    }",
                    "+}",
                    "+#endregion snippet_Modifier"
                ]
            },
            "dotnet/samples/GettingStarted/Program.cs": {
                "before": [
                    "@@ -0,0 +1,43 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// Program.cs",
                    "+#region snippet_Program",
                    "+#region snippet_Program_funcs"
                ],
                "after": [
                    "+",
                    "+// Run until application shutdown",
                    "+await app.WaitForShutdownAsync();",
                    "+#endregion snippet_Program_publish",
                    "+#endregion snippet_Program"
                ]
            },
            "dotnet/samples/Hello/Hello.AppHost/Hello.AppHost.csproj": {
                "before": [
                    "@@ -18,7 +18,7 @@",
                    "   </ItemGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/AgentHost/Microsoft.Autogen.AgentHost.csproj\" />"
                ],
                "after": [
                    "-    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/AgentHost/Microsoft.Autogen.AgentHost.csproj\" />",
                    "+    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/AgentHost/Microsoft.AutoGen.AgentHost.csproj\" />",
                    "     <ProjectReference Include=\"..\\HelloAgent\\HelloAgent.csproj\" />",
                    "   </ItemGroup>",
                    " </Project>"
                ]
            },
            "dotnet/samples/Hello/Hello.AppHost/Program.cs": {
                "before": [
                    "@@ -4,15 +4,16 @@",
                    " using Microsoft.Extensions.Hosting;",
                    " ",
                    " var builder = DistributedApplication.CreateBuilder(args);",
                    "-var backend = builder.AddProject<Projects.Microsoft_Autogen_AgentHost>(\"backend\").WithExternalHttpEndpoints();"
                ],
                "after": [
                    "+builder.AddPythonApp(\"HelloAgentsPython\", \"../../../../python/samples/core_xlang_hello_python_agent\", \"hello_python_agent.py\", \"../../.venv\")",
                    "+    .WithReference(backend)",
                    "     .WithEnvironment(\"AGENT_HOST\", backend.GetEndpoint(\"http\"))",
                    "     .WithEnvironment(\"STAY_ALIVE_ON_GOODBYE\", \"true\")",
                    "     .WithEnvironment(\"GRPC_DNS_RESOLVER\", \"native\")"
                ]
            },
            "dotnet/samples/Hello/HelloAIAgents/HelloAIAgent.cs": {
                "before": [
                    "@@ -8,17 +8,15 @@",
                    " namespace Hello;",
                    " [TopicSubscription(\"agents\")]",
                    " public class HelloAIAgent(",
                    "-    IAgentWorker worker,"
                ],
                "after": [
                    "-    public new async Task Handle(NewMessageReceived item)",
                    "+    public new async Task Handle(NewMessageReceived item, CancellationToken cancellationToken = default)",
                    "     {",
                    "         var prompt = \"Please write a limerick greeting someone with the name \" + item.Message;",
                    "         var response = await client.CompleteAsync(prompt);"
                ]
            },
            "dotnet/samples/Hello/HelloAIAgents/HelloAIAgents.csproj": {
                "before": [
                    "@@ -11,7 +11,6 @@",
                    "   </ItemGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Agents\\Microsoft.AutoGen.Agents.csproj\" />"
                ],
                "after": [
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Agents\\Microsoft.AutoGen.Agents.csproj\" />",
                    "     <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Contracts\\Microsoft.AutoGen.Contracts.csproj\" />",
                    "     <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Core\\Microsoft.AutoGen.Core.csproj\" />",
                    "     <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Extensions\\MEAI\\Microsoft.AutoGen.Extensions.MEAI.csproj\" />"
                ]
            },
            "dotnet/samples/Hello/HelloAIAgents/Program.cs": {
                "before": [
                    "@@ -16,33 +16,32 @@",
                    " {",
                    "     throw new InvalidOperationException(\"AZURE_OPENAI_CONNECTION_STRING not set, try something like AZURE_OPENAI_CONNECTION_STRING = \\\"Endpoint=https://TODO.openai.azure.com/;Key=TODO;Deployment=TODO\\\"\");",
                    " }",
                    "-builder.Configuration[\"ConectionStrings:HelloAIAgents\"] = Environment.GetEnvironmentVariable(\"AZURE_OPENAI_CONNECTION_STRING\");"
                ],
                "after": [
                    "-        public async Task Handle(ConversationClosed item)",
                    "+        public async Task Handle(ConversationClosed item, CancellationToken cancellationToken = default)",
                    "         {",
                    "             var goodbye = $\"*********************  {item.UserId} said {item.UserMessage}  ************************\";",
                    "             var evt = new Output"
                ]
            },
            "dotnet/samples/Hello/HelloAgent/HelloAgent.cs": {
                "before": [
                    "@@ -0,0 +1,49 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// HelloAgent.cs",
                    "+",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+    {",
                    "+        Console.WriteLine(\"Shutting down...\");",
                    "+        hostApplicationLifetime.StopApplication(); // Shuts down application",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/samples/Hello/HelloAgent/HelloAgent.csproj": {
                "before": [
                    "@@ -15,9 +15,16 @@",
                    "   </ItemGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/Core.Grpc/Microsoft.AutoGen.Core.Grpc.csproj\" />"
                ],
                "after": [
                    "+",
                    "+  <ItemGroup>",
                    "+    <Protobuf Include=\"..\\protos\\agent_events.proto\" Link=\"protos\\agent_events.proto\" />",
                    "+  </ItemGroup>",
                    " </Project>"
                ]
            },
            "dotnet/samples/Hello/HelloAgent/Program.cs": {
                "before": [
                    "@@ -1,70 +1,16 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // Program.cs",
                    "-using Microsoft.AutoGen.Agents;",
                    "+"
                ],
                "after": [
                    "+var app = await appBuilder.BuildAsync(); // Build the app",
                    "+// Create a custom message type from proto and define message",
                    "+NewMessageReceived message = new NewMessageReceived { Message = \"Hello World!\" };",
                    "+await app.PublishMessageAsync(message, new TopicId(\"HelloTopic\")); // Publish custom message (handler has been set in HelloAgent)",
                    "+await app.WaitForShutdownAsync(); // Wait for shutdown from agent"
                ]
            },
            "dotnet/samples/Hello/HelloAgent/README.md": {
                "before": [
                    "@@ -25,10 +25,10 @@ Flow Diagram:",
                    " ```mermaid",
                    " %%{init: {'theme':'forest'}}%%",
                    " graph LR;",
                    "-    A[Main] --> |\"PublishEventAsync(NewMessage('World'))\"| B{\"Handle(NewMessageReceived item)\"}"
                ],
                "after": [
                    "-    public async Task Handle(NewMessageReceived item)",
                    "+    public async Task Handle(NewMessageReceived item, CancellationToken cancellationToken = default)",
                    "     {",
                    "         var response = await SayHello(item.Message).ConfigureAwait(false);",
                    "         var evt = new Output"
                ]
            },
            "dotnet/samples/Hello/HelloAgentState/HelloAgentState.csproj": {
                "before": [
                    "@@ -12,7 +12,7 @@",
                    "   </ItemGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Agents\\Microsoft.AutoGen.Agents.csproj\" />"
                ],
                "after": [
                    "-    <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Agents\\Microsoft.AutoGen.Agents.csproj\" />",
                    "+    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/Core.Grpc/Microsoft.AutoGen.Core.Grpc.csproj\" />",
                    "     <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Contracts\\Microsoft.AutoGen.Contracts.csproj\" />",
                    "     <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Core\\Microsoft.AutoGen.Core.csproj\" />",
                    "   </ItemGroup>"
                ]
            },
            "dotnet/samples/Hello/HelloAgentState/Program.cs": {
                "before": [
                    "@@ -7,29 +7,29 @@",
                    " using Microsoft.AutoGen.Core;",
                    " ",
                    " // send a message to the agent",
                    "-var app = await AgentsApp.PublishMessageAsync(\"HelloAgents\", new NewMessageReceived"
                ],
                "after": [
                    "-        public async Task Handle(Shutdown item)",
                    "+        public async Task Handle(Shutdown item, CancellationToken cancellationToken = default)",
                    "         {",
                    "             string? workflow = null;",
                    "             // make sure the workflow is finished"
                ]
            },
            "dotnet/samples/Hello/HelloAgentState/README.md": {
                "before": [
                    "@@ -25,10 +25,10 @@ Flow Diagram:",
                    " ```mermaid",
                    " %%{init: {'theme':'forest'}}%%",
                    " graph LR;",
                    "-    A[Main] --> |\"PublishEventAsync(NewMessage('World'))\"| B{\"Handle(NewMessageReceived item)\"}"
                ],
                "after": [
                    "-    public async Task Handle(NewMessageReceived item)",
                    "+    public async Task Handle(NewMessageReceived item, CancellationToken cancellationToken = default)",
                    "     {",
                    "         var response = await SayHello(item.Message).ConfigureAwait(false);",
                    "         var evt = new Output"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.AgentHost/DevTeam.AgentHost.csproj": {
                "before": [
                    "@@ -1,17 +0,0 @@",
                    "-<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
                    "-",
                    "-  <PropertyGroup>",
                    "-        <TargetFramework>net8.0</TargetFramework>"
                ],
                "after": [
                    "-    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/Runtime.Grpc/Microsoft.AutoGen.Runtime.Grpc.csproj\" />",
                    "-    <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Extensions\\Aspire\\Microsoft.AutoGen.Extensions.Aspire.csproj\" />",
                    "-  </ItemGroup>",
                    "-",
                    "-</Project>"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.AgentHost/Program.cs": {
                "before": [
                    "@@ -1,15 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// Program.cs",
                    "-using Microsoft.AutoGen.Runtime.Grpc;",
                    "-"
                ],
                "after": [
                    "-",
                    "-app.MapDefaultEndpoints();",
                    "-app.MapAgentService();",
                    "-",
                    "-app.Run();"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.AgentHost/appsettings.Development.json": {
                "before": [
                    "@@ -1,8 +0,0 @@",
                    "-{",
                    "-  \"Logging\": {",
                    "-    \"LogLevel\": {",
                    "-      \"Default\": \"Information\","
                ],
                "after": [
                    "-      \"Default\": \"Information\",",
                    "-      \"Microsoft.AspNetCore\": \"Warning\"",
                    "-    }",
                    "-  }",
                    "-}"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Agents/DevTeam.Agents.csproj": {
                "before": [
                    "@@ -1,18 +0,0 @@",
                    "-<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
                    "-",
                    "-  <PropertyGroup>",
                    "-        <TargetFramework>net8.0</TargetFramework>"
                ],
                "after": [
                    "-    <ProjectReference Include=\"..\\DevTeam.Shared\\DevTeam.Shared.csproj\" />",
                    "-    <ProjectReference Include=\"..\\..\\..\\src\\Microsoft.AutoGen\\Extensions\\SemanticKernel\\Microsoft.AutoGen.Extensions.SemanticKernel.csproj\" />",
                    "-  </ItemGroup>",
                    "-",
                    "-</Project>"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Agents/Developer/Developer.cs": {
                "before": [
                    "@@ -1,63 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// Developer.cs",
                    "-",
                    "-using DevTeam.Shared;"
                ],
                "after": [
                    "-",
                    "-public interface IDevelopApps",
                    "-{",
                    "-    public Task<string> GenerateCode(string ask);",
                    "-}"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Agents/DeveloperLead/DeveloperLead.cs": {
                "before": [
                    "@@ -1,70 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// DeveloperLead.cs",
                    "-",
                    "-using DevTeam.Shared;"
                ],
                "after": [
                    "-",
                    "-public interface ILeadDevelopers",
                    "-{",
                    "-    public Task<string> CreatePlan(string ask);",
                    "-}"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Agents/ProductManager/ProductManager.cs": {
                "before": [
                    "@@ -1,63 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// ProductManager.cs",
                    "-",
                    "-using DevTeam.Shared;"
                ],
                "after": [
                    "-",
                    "-public interface IManageProducts",
                    "-{",
                    "-    public Task<string> CreateReadme(string ask);",
                    "-}"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Agents/Program.cs": {
                "before": [
                    "@@ -1,23 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// Program.cs",
                    "-",
                    "-using DevTeam.Agents;"
                ],
                "after": [
                    "-var app = builder.Build();",
                    "-",
                    "-app.MapDefaultEndpoints();",
                    "-",
                    "-app.Run();"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Agents/Properties/launchSettings.json": {
                "before": [
                    "@@ -1,12 +0,0 @@",
                    "-{",
                    "-  \"profiles\": {",
                    "-    \"DevTeam.Agents\": {",
                    "-      \"commandName\": \"Project\","
                ],
                "after": [
                    "-      \"applicationUrl\": \"https://localhost:50669;http://localhost:50671\"",
                    "-    }",
                    "-  }",
                    "-}",
                    "\\ No newline at end of file"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Agents/appsettings.Development.json": {
                "before": [
                    "@@ -1,8 +0,0 @@",
                    "-{",
                    "-  \"Logging\": {",
                    "-    \"LogLevel\": {",
                    "-      \"Default\": \"Information\","
                ],
                "after": [
                    "-      \"Default\": \"Information\",",
                    "-      \"Microsoft.AspNetCore\": \"Warning\"",
                    "-    }",
                    "-  }",
                    "-}"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.AppHost/DevTeam.AppHost.csproj": {
                "before": [
                    "@@ -21,8 +21,6 @@",
                    " ",
                    "    <ItemGroup>",
                    "     <ProjectReference Include=\"..\\DevTeam.Backend\\DevTeam.Backend.csproj\" />",
                    "-    <ProjectReference Include=\"..\\DevTeam.AgentHost\\DevTeam.AgentHost.csproj\" />"
                ],
                "after": [
                    "-    <ProjectReference Include=\"..\\DevTeam.AgentHost\\DevTeam.AgentHost.csproj\" />",
                    "-    <ProjectReference Include=\"..\\DevTeam.Agents\\DevTeam.Agents.csproj\" />",
                    "   </ItemGroup>",
                    " ",
                    " </Project>"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.AppHost/Program.cs": {
                "before": [
                    "@@ -7,22 +7,16 @@",
                    " ",
                    " var qdrant = builder.AddQdrant(\"qdrant\");",
                    " ",
                    "-var orleans = builder.AddOrleans(\"orleans\")"
                ],
                "after": [
                    "-    .WithEnvironment(\"Qdrant__VectorSize\", \"1536\")",
                    "-    .WithEnvironment(\"OpenAI__Key\", builder.Configuration[\"OpenAI:Key\"])",
                    "-    .WithEnvironment(\"OpenAI__Endpoint\", builder.Configuration[\"OpenAI:Endpoint\"]);",
                    "-",
                    " builder.Build().Run();"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.AppHost/Properties/launchSettings.json": {
                "before": [
                    "@@ -0,0 +1,29 @@",
                    "+{",
                    "+    \"$schema\": \"https://json.schemastore.org/launchsettings.json\",",
                    "+    \"profiles\": {",
                    "+      \"https\": {"
                ],
                "after": [
                    "+        }",
                    "+      }",
                    "+    }",
                    "+  }",
                    "\\ No newline at end of file"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Agents/AzureGenie.cs": {
                "before": [
                    "@@ -1,21 +1,19 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // AzureGenie.cs",
                    " ",
                    "-using DevTeam.Backend;"
                ],
                "after": [
                    "-    public async Task Handle(CodeCreated item)",
                    "+    public async Task Handle(CodeCreated item, CancellationToken cancellationToken = default)",
                    "     {",
                    "         // TODO: Not sure we need to store the files if we use ACA Sessions",
                    "         //                //var data = item.ToData();"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Agents/Developer/Developer.cs": {
                "before": [
                    "@@ -0,0 +1,61 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// Developer.cs",
                    "+",
                    "+using DevTeam.Agents;"
                ],
                "after": [
                    "+",
                    "+public interface IDevelopApps",
                    "+{",
                    "+    public Task<string> GenerateCode(string ask);",
                    "+}"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Agents/Developer/DeveloperPrompts.cs": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // DeveloperPrompts.cs",
                    " ",
                    "-namespace DevTeam.Agents;"
                ],
                "after": [
                    "-namespace DevTeam.Agents;",
                    "+namespace DevTeam.Backend.Agents.Developer;",
                    " public static class DeveloperSkills",
                    " {",
                    "     public const string Implement = \"\"\""
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Agents/DeveloperLead/DeveloperLead.cs": {
                "before": [
                    "@@ -0,0 +1,66 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// DeveloperLead.cs",
                    "+",
                    "+using DevTeam.Agents;"
                ],
                "after": [
                    "+",
                    "+public interface ILeadDevelopers",
                    "+{",
                    "+    public Task<string> CreatePlan(string ask);",
                    "+}"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Agents/DeveloperLead/DeveloperLeadPrompts.cs": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // DeveloperLeadPrompts.cs",
                    " ",
                    "-namespace DevTeam.Agents;"
                ],
                "after": [
                    "-namespace DevTeam.Agents;",
                    "+namespace DevTeam.Backend.Agents.DeveloperLead;",
                    " public static class DevLeadSkills",
                    " {",
                    "     public const string Plan = \"\"\""
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Agents/Hubber.cs": {
                "before": [
                    "@@ -2,26 +2,23 @@",
                    " // Hubber.cs",
                    " ",
                    " using System.Text.Json;",
                    "-using DevTeam;"
                ],
                "after": [
                    "-    public async Task Handle(ReadmeStored item)",
                    "+    public async Task Handle(ReadmeStored item, CancellationToken cancellationToken = default)",
                    "     {",
                    "         var branch = $\"sk-{item.ParentNumber}\";",
                    "         await CommitToBranch(item.Org, item.Repo, item.ParentNumber, item.IssueNumber, \"output\", branch);"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Agents/ProductManager/PMPrompts.cs": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // PMPrompts.cs",
                    " ",
                    "-namespace DevTeam.Agents;"
                ],
                "after": [
                    "-namespace DevTeam.Agents;",
                    "+namespace DevTeam.Backend.Agents.ProductManager;",
                    " public static class PMSkills",
                    " {",
                    "     public const string BootstrapProject = \"\"\""
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Agents/ProductManager/ProductManager.cs": {
                "before": [
                    "@@ -0,0 +1,60 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// ProductManager.cs",
                    "+",
                    "+using DevTeam.Agents;"
                ],
                "after": [
                    "+",
                    "+public interface IManageProducts",
                    "+{",
                    "+    public Task<string> CreateReadme(string ask);",
                    "+}"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Agents/Sandbox.cs": {
                "before": [
                    "@@ -3,7 +3,7 @@",
                    " ",
                    " // namespace DevTeam.Backend;",
                    " ",
                    "-// public sealed class Sandbox : Agent"
                ],
                "after": [
                    "-// public sealed class Sandbox : Agent",
                    "+// public sealed class Sandbox : AgentBase",
                    " // {",
                    " //     private const string ReminderName = \"SandboxRunReminder\";",
                    " //     private readonly IManageAzure _azService;"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/AiAgent.cs": {
                "before": [
                    "@@ -0,0 +1,23 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// AiAgent.cs",
                    "+",
                    "+using Microsoft.AutoGen.Core;"
                ],
                "after": [
                    "+    protected async Task<string> CallFunction(string prompt)",
                    "+    {",
                    "+        throw new NotImplementedException();",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Consts.cs": {
                "before": [
                    "@@ -0,0 +1,9 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// Consts.cs",
                    "+",
                    "+namespace DevTeam.Backend;"
                ],
                "after": [
                    "+",
                    "+public class Consts",
                    "+{",
                    "+    public const string TopicName = \"devteam\";",
                    "+}"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/DevTeam.Backend.csproj": {
                "before": [
                    "@@ -1,8 +1,4 @@",
                    "-<Project Sdk=\"Microsoft.NET.Sdk.Web\">",
                    "-",
                    "-  <ItemGroup>",
                    "-    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/Core/Microsoft.AutoGen.Core.csproj\" />"
                ],
                "after": [
                    "+    <Protobuf Include=\"..\\Protos\\messages.proto\" Link=\"Protos\\messages.proto\" />",
                    "+    <Protobuf Include=\"..\\Protos\\states.proto\" Link=\"Protos\\states.proto\" />",
                    "   </ItemGroup>",
                    " ",
                    " </Project>"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Program.cs": {
                "before": [
                    "@@ -2,11 +2,14 @@",
                    " // Program.cs",
                    " ",
                    " using Azure.Identity;",
                    "-using DevTeam.Backend;"
                ],
                "after": [
                    "-app.MapDefaultEndpoints();",
                    "+Microsoft.Extensions.Hosting.AspireHostingExtensions.MapDefaultEndpoints(app);",
                    " app.UseRouting()",
                    " .UseEndpoints(endpoints =>",
                    " {"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Services/AzureService.cs": {
                "before": [
                    "@@ -12,7 +12,7 @@",
                    " using DevTeam.Options;",
                    " using Microsoft.Extensions.Options;",
                    " ",
                    "-namespace DevTeam.Backend;"
                ],
                "after": [
                    "-namespace DevTeam.Backend;",
                    "+namespace DevTeam.Backend.Services;",
                    " ",
                    " public class AzureService : IManageAzure",
                    " {"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Services/GithubAuthService.cs": {
                "before": [
                    "@@ -9,7 +9,7 @@",
                    " using Microsoft.IdentityModel.Tokens;",
                    " using Octokit;",
                    " ",
                    "-namespace DevTeam.Backend;"
                ],
                "after": [
                    "-namespace DevTeam.Backend;",
                    "+namespace DevTeam.Backend.Services;",
                    " public class GithubAuthService",
                    " {",
                    "     private readonly GithubOptions _githubSettings;"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Services/GithubService.cs": {
                "before": [
                    "@@ -8,7 +8,7 @@",
                    " using Octokit;",
                    " using Octokit.Helpers;",
                    " ",
                    "-namespace DevTeam.Backend;"
                ],
                "after": [
                    "-namespace DevTeam.Backend;",
                    "+namespace DevTeam.Backend.Services;",
                    " ",
                    " public class GithubService : IManageGithub",
                    " {"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Backend/Services/GithubWebHookProcessor.cs": {
                "before": [
                    "@@ -2,7 +2,7 @@",
                    " // GithubWebHookProcessor.cs",
                    " ",
                    " using System.Globalization;",
                    "-using DevTeam.Shared;"
                ],
                "after": [
                    "-            await _client.PublishEventAsync(evt);",
                    "+            await _client.PublishMessageAsync(evt, Consts.TopicName, subject);",
                    "         }",
                    "         catch (Exception ex)",
                    "         {"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.ServiceDefaults/DevTeam.ServiceDefaults.csproj": {
                "before": [
                    "@@ -0,0 +1,22 @@",
                    "+<Project Sdk=\"Microsoft.NET.Sdk\">",
                    "+",
                    "+  <PropertyGroup>",
                    "+    <TargetFramework>net8.0</TargetFramework>"
                ],
                "after": [
                    "+    <PackageReference Include=\"OpenTelemetry.Instrumentation.Http\" />",
                    "+    <PackageReference Include=\"OpenTelemetry.Instrumentation.Runtime\" />",
                    "+  </ItemGroup>",
                    "+",
                    "+</Project>"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.ServiceDefaults/Extensions.cs": {
                "before": [
                    "@@ -0,0 +1,120 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// Extensions.cs",
                    "+",
                    "+using Microsoft.AspNetCore.Builder;"
                ],
                "after": [
                    "+        }",
                    "+",
                    "+        return app;",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Shared/DevTeam.Shared.csproj": {
                "before": [
                    "@@ -1,27 +0,0 @@",
                    "-<Project Sdk=\"Microsoft.NET.Sdk\">",
                    "-",
                    "-  <ItemGroup>",
                    "-    <ProjectReference Include=\"../../../src/Microsoft.AutoGen/Core/Microsoft.AutoGen.Core.csproj\" />"
                ],
                "after": [
                    "-    <Protobuf Include=\"..\\Protos\\messages.proto\" Link=\"Protos\\messages.proto\" />",
                    "-    <Protobuf Include=\"..\\Protos\\states.proto\" Link=\"Protos\\states.proto\" />",
                    "-  </ItemGroup>",
                    "-",
                    "-</Project>"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Shared/EventExtensions.cs": {
                "before": [
                    "@@ -1,51 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// EventExtensions.cs",
                    "-",
                    "-using System.Globalization;"
                ],
                "after": [
                    "-    public long IssueNumber { get; set; }",
                    "-    public long? ParentNumber { get; set; }",
                    "-",
                    "-    public string Subject => $\"{Org}/{Repo}/{IssueNumber}\";",
                    "-}"
                ]
            },
            "dotnet/samples/dev-team/DevTeam.Shared/ParseExtensions.cs": {
                "before": [
                    "@@ -1,18 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// ParseExtensions.cs",
                    "-",
                    "-namespace DevTeam;"
                ],
                "after": [
                    "-            return result;",
                    "-        }",
                    "-        return default;",
                    "-    }",
                    "-}"
                ]
            },
            "dotnet/samples/dev-team/Protos/messages.proto": {
                "before": [
                    "@@ -2,7 +2,7 @@ syntax = \"proto3\";",
                    " ",
                    " package devteam;",
                    " ",
                    "-option csharp_namespace = \"DevTeam.Shared\";"
                ],
                "after": [
                    "-option csharp_namespace = \"DevTeam.Shared\";",
                    "+option csharp_namespace = \"DevTeam\";",
                    " ",
                    " message NewAsk {",
                    "   string org = 1;"
                ]
            },
            "dotnet/samples/dev-team/Protos/states.proto": {
                "before": [
                    "@@ -2,7 +2,7 @@ syntax = \"proto3\";",
                    " ",
                    " package devteam;",
                    " ",
                    "-option csharp_namespace = \"DevTeam.Shared\";"
                ],
                "after": [
                    "-option csharp_namespace = \"DevTeam.Shared\";",
                    "+option csharp_namespace = \"DevTeam\";",
                    " ",
                    " ",
                    " message DeveloperState {"
                ]
            },
            "dotnet/samples/dev-team/dev team.sln": {
                "before": [
                    "@@ -1,49 +0,0 @@",
                    "-\ufeff",
                    "-Microsoft Visual Studio Solution File, Format Version 12.00",
                    "-# Visual Studio Version 17",
                    "-VisualStudioVersion = 17.11.35327.3"
                ],
                "after": [
                    "-\tEndGlobalSection",
                    "-\tGlobalSection(ExtensibilityGlobals) = postSolution",
                    "-\t\tSolutionGuid = {DE04DB59-B8CD-4305-875B-E71442345CCF}",
                    "-\tEndGlobalSection",
                    "-EndGlobal"
                ]
            },
            "dotnet/src/AutoGen.DotnetInteractive/Extension/AgentExtension.cs": {
                "before": [
                    "@@ -18,7 +18,7 @@ public static class AgentExtension",
                    "     /// <param name=\"maximumOutputToKeep\">maximum output to keep</param>",
                    "     /// <example>",
                    "     /// <![CDATA[",
                    "-    /// [!code-csharp[Example04_Dynamic_GroupChat_Coding_Task](~/../samples/AutoGen.BasicSamples/Example04_Dynamic_GroupChat_Coding_Task.cs)]"
                ],
                "after": [
                    "-    /// [!code-csharp[Example04_Dynamic_GroupChat_Coding_Task](~/../samples/AutoGen.BasicSamples/Example04_Dynamic_GroupChat_Coding_Task.cs)]",
                    "+    /// [!code-csharp[Example04_Dynamic_GroupChat_Coding_Task](~/../samples/AgentChat/Autogen.Basic.Sample/Example04_Dynamic_GroupChat_Coding_Task.cs)]",
                    "     /// ]]>",
                    "     /// </example>",
                    "     [Obsolete]"
                ]
            },
            "dotnet/src/AutoGen.DotnetInteractive/InProccessDotnetInteractiveKernelBuilder.cs": {
                "before": [
                    "@@ -25,8 +25,8 @@ internal InProccessDotnetInteractiveKernelBuilder()",
                    "         this.compositeKernel = new CompositeKernel();",
                    " ",
                    "         // add jupyter connector",
                    "-        this.compositeKernel.AddKernelConnector("
                ],
                "after": [
                    "-            .UseMathAndLaTeX()",
                    "+            //.UseMathAndLaTeX() // Latex is now formatted using TypeFormatters",
                    "             .UseValueSharing();",
                    " ",
                    "         this.AddKernel(fsharpKernel, aliases);"
                ]
            },
            "dotnet/src/AutoGen.LMStudio/LMStudioAgent.cs": {
                "before": [
                    "@@ -16,7 +16,7 @@ namespace AutoGen.LMStudio;",
                    " /// agent that consumes local server from LM Studio",
                    " /// </summary>",
                    " /// <example>",
                    "-/// [!code-csharp[LMStudioAgent](../../samples/AutoGen.BasicSamples/Example08_LMStudio.cs?name=lmstudio_example_1)]"
                ],
                "after": [
                    "-/// [!code-csharp[LMStudioAgent](../../samples/AutoGen.BasicSamples/Example08_LMStudio.cs?name=lmstudio_example_1)]",
                    "+/// [!code-csharp[LMStudioAgent](../../samples/AgentChat/Autogen.Basic.Sample/Example08_LMStudio.cs?name=lmstudio_example_1)]",
                    " /// </example>",
                    " [Obsolete(\"Use OpenAIChatAgent to connect to LM Studio\")]",
                    " public class LMStudioAgent : IAgent"
                ]
            },
            "dotnet/src/AutoGen.SourceGenerator/README.md": {
                "before": [
                    "@@ -109,5 +109,5 @@ Add two numbers.",
                    " ```",
                    " ",
                    " For more examples, please check out the following project",
                    "-- [AutoGen.BasicSamples](../samples/AutoGen.BasicSamples/)"
                ],
                "after": [
                    " ",
                    " For more examples, please check out the following project",
                    "-- [AutoGen.BasicSamples](../samples/AutoGen.BasicSamples/)",
                    "+- [AutoGen.Basic.Sample](../samples/AgentChat/Autogen.Basic.Sample/)",
                    " - [AutoGen.SourceGenerator.Tests](../../test/AutoGen.SourceGenerator.Tests/)"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/AgentHost/Properties/launchSettings.json": {
                "before": [
                    "@@ -4,7 +4,7 @@",
                    "       \"commandName\": \"Project\",",
                    "       \"dotnetRunMessages\": true,",
                    "       \"launchBrowser\": true,",
                    "-      \"applicationUrl\": \"https://localhost:50670;http://localhost:50673\","
                ],
                "after": [
                    "-      \"applicationUrl\": \"https://localhost:50670;http://localhost:50673\",",
                    "+      \"applicationUrl\": \"https://localhost:53071;http://localhost:50673\",",
                    "       \"environmentVariables\": {",
                    "         \"ASPNETCORE_ENVIRONMENT\": \"Development\"",
                    "       }"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/AgentHost/appsettings.json": {
                "before": [
                    "@@ -2,9 +2,12 @@",
                    "   \"Logging\": {",
                    "     \"LogLevel\": {",
                    "       \"Default\": \"Warning\",",
                    "+      \"Microsoft.Hosting.Lifetime\": \"Information\","
                ],
                "after": [
                    "+      \"Orleans.Runtime\": \"Error\",",
                    "+      \"Grpc\": \"Information\"",
                    "     }",
                    "   },",
                    "   \"AllowedHosts\": \"*\","
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Agents/AIAgent/InferenceAgent.cs": {
                "before": [
                    "@@ -1,32 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// InferenceAgent.cs",
                    "-using Google.Protobuf;",
                    "-using Microsoft.AutoGen.Core;"
                ],
                "after": [
                    "-    {",
                    "-        return ChatClient.CompleteStreamingAsync(chatMessages, options, cancellationToken);",
                    "-    }",
                    "-",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Agents/AIAgent/SKAiAgent.cs": {
                "before": [
                    "@@ -1,85 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// SKAiAgent.cs",
                    "-using System.Globalization;",
                    "-using System.Text;"
                ],
                "after": [
                    "-{",
                    "-    System,",
                    "-    User,",
                    "-    Agent",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Agents/IOAgent/ConsoleAgent/ConsoleAgent.cs": {
                "before": [
                    "@@ -1,63 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// ConsoleAgent.cs",
                    "-using Microsoft.AutoGen.Contracts;",
                    "-using Microsoft.AutoGen.Core;"
                ],
                "after": [
                    "-",
                    "-public interface IUseConsole",
                    "-{",
                    "-    public Task ProcessOutput(string message);",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Agents/IOAgent/ConsoleAgent/IHandleConsole.cs": {
                "before": [
                    "@@ -1,50 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// IHandleConsole.cs",
                    "-",
                    "-using Google.Protobuf;"
                ],
                "after": [
                    "-    {",
                    "-        // Implement your input processing logic here",
                    "-        return Task.FromResult(message);",
                    "-    }",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Agents/IOAgent/FileAgent/FileAgent.cs": {
                "before": [
                    "@@ -1,78 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// FileAgent.cs",
                    "-using Microsoft.AutoGen.Contracts;",
                    "-using Microsoft.AutoGen.Core;"
                ],
                "after": [
                    "-    }",
                    "-}",
                    "-public interface IUseFiles",
                    "-{",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Agents/IOAgent/IOAgent.cs": {
                "before": [
                    "@@ -1,34 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// IOAgent.cs",
                    "-",
                    "-using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "-",
                    "-    public abstract Task ProcessInput(string message);",
                    "-    public abstract Task ProcessOutput(string message);",
                    "-",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Agents/IOAgent/WebAPIAgent/WebAPIAgent.cs": {
                "before": [
                    "@@ -1,93 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// WebAPIAgent.cs",
                    "-using Microsoft.AspNetCore.Builder;",
                    "-using Microsoft.AspNetCore.Http;"
                ],
                "after": [
                    "-}",
                    "-",
                    "-public interface IUseWebAPI",
                    "-{",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Agents/Microsoft.AutoGen.Agents.csproj": {
                "before": [
                    "@@ -1,21 +0,0 @@",
                    "-<Project Sdk=\"Microsoft.NET.Sdk\">",
                    "-",
                    "-  <PropertyGroup>",
                    "-    <TargetFramework>net8.0</TargetFramework>"
                ],
                "after": [
                    "-  <ItemGroup>",
                    "-\t  <PackageReference Include=\"Microsoft.SemanticKernel\" />",
                    "-   \t  <PackageReference Include=\"Microsoft.Extensions.AI.Abstractions\" />",
                    "-  </ItemGroup>",
                    "-</Project>"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/AgentExceptions.cs": {
                "before": [
                    "@@ -0,0 +1,100 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// AgentExceptions.cs",
                    "+",
                    "+namespace Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+    /// </summary>",
                    "+    /// <param name=\"message\">The custom error message.</param>",
                    "+    /// <param name=\"innerException\">The inner exception that caused this error.</param>",
                    "+    public NotAccessibleError(string message, Exception innerException) : base(message, innerException) { }",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/AgentId.cs": {
                "before": [
                    "@@ -1,13 +1,120 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // AgentId.cs",
                    " ",
                    "+using System.Diagnostics;"
                ],
                "after": [
                    "+",
                    "+    public static bool operator ==(AgentId left, AgentId right) => left.Equals(right);",
                    "+    public static bool operator !=(AgentId left, AgentId right) => !left.Equals(right);",
                    " }",
                    "+"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/AgentMetadata.cs": {
                "before": [
                    "@@ -0,0 +1,28 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// AgentMetadata.cs",
                    "+",
                    "+namespace Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+    /// A brief description of the agent's purpose or functionality.",
                    "+    /// </summary>",
                    "+    public string Description { get; set; } = description;",
                    "+}",
                    "+"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/AgentProxy.cs": {
                "before": [
                    "@@ -0,0 +1,71 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// AgentProxy.cs",
                    "+",
                    "+namespace Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+    public ValueTask<IDictionary<string, object>> SaveStateAsync()",
                    "+    {",
                    "+        return this.runtime.SaveAgentStateAsync(this.Id);",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/AgentType.cs": {
                "before": [
                    "@@ -0,0 +1,41 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// AgentType.cs",
                    "+",
                    "+namespace Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+    /// <param name=\"type\">The <see cref=\"AgentType\"/> instance.</param>",
                    "+    /// <returns>The string representation of the agent type.</returns>",
                    "+    public static implicit operator string(AgentType type) => type.Name;",
                    "+}",
                    "+"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/ChatHistoryItem.cs": {
                "before": [
                    "@@ -1,12 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// ChatHistoryItem.cs",
                    "-",
                    "-namespace Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "-{",
                    "-    public required string Message { get; set; }",
                    "-    public ChatUserType UserType { get; set; }",
                    "-    public int Order { get; set; }",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/ChatState.cs": {
                "before": [
                    "@@ -1,13 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// ChatState.cs",
                    "-",
                    "-using Google.Protobuf;"
                ],
                "after": [
                    "-    <T> where T : IMessage, new()",
                    "-{",
                    "-    public List<ChatHistoryItem> History { get; set; } = new();",
                    "-    public T Data { get; set; } = new();",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/ChatUserType.cs": {
                "before": [
                    "@@ -1,11 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// ChatUserType.cs",
                    "-",
                    "-namespace Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "-{",
                    "-    System,",
                    "-    User,",
                    "-    Agent",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/IAgent.cs": {
                "before": [
                    "@@ -0,0 +1,47 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// IAgent.cs",
                    "+",
                    "+namespace Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+    /// </summary>",
                    "+    /// <returns>A task representing the asynchronous operation.</returns>",
                    "+    public ValueTask CloseAsync() => ValueTask.CompletedTask;",
                    "+}",
                    "+"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/IAgentRuntime.cs": {
                "before": [
                    "@@ -0,0 +1,126 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// IAgentRuntime.cs",
                    "+",
                    "+using StateDict = System.Collections.Generic.IDictionary<string, object>;"
                ],
                "after": [
                    "+    /// <param name=\"agentId\">The ID of the agent.</param>",
                    "+    /// <returns>A task representing the asynchronous operation, returning an <see cref=\"AgentProxy\"/> if successful.</returns>",
                    "+    public ValueTask<AgentProxy> TryGetAgentProxyAsync(AgentId agentId);",
                    "+}",
                    "+"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/IAgentState.cs": {
                "before": [
                    "@@ -1,26 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// IAgentState.cs",
                    "-",
                    "-namespace Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "-    /// <param name=\"eTag\">The ETag for concurrency control.</param>",
                    "-    /// <param name=\"cancellationToken\">A token to cancel the operation.</param>",
                    "-    /// <returns>A task that represents the asynchronous write operation. The task result contains the ETag of the written state.</returns>",
                    "-    ValueTask<string> WriteStateAsync(AgentState state, string eTag, CancellationToken cancellationToken = default);",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/IConnection.cs": {
                "before": [
                    "@@ -1,7 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// IConnection.cs",
                    "-",
                    "-namespace Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "-",
                    "-namespace Microsoft.AutoGen.Contracts;",
                    "-public interface IConnection",
                    "-{",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/IHandle.cs": {
                "before": [
                    "@@ -0,0 +1,28 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// IHandle.cs",
                    "+",
                    "+namespace Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+    /// </summary>",
                    "+    /// <param name=\"item\">The item to be handled.</param>",
                    "+    /// <returns>A task that represents the asynchronous operation.</returns>",
                    "+    ValueTask<OutT> HandleAsync(InT item, MessageContext messageContext);",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/ISaveState.cs": {
                "before": [
                    "@@ -0,0 +1,35 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// ISaveState.cs",
                    "+",
                    "+using StateDict = System.Collections.Generic.IDictionary<string, object>;"
                ],
                "after": [
                    "+    /// </param>",
                    "+    /// <returns>A task representing the asynchronous operation.</returns>",
                    "+    public ValueTask LoadStateAsync(StateDict state);",
                    "+}",
                    "+"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/ISubscriptionDefinition.cs": {
                "before": [
                    "@@ -0,0 +1,53 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// ISubscriptionDefinition.cs",
                    "+",
                    "+using System.Diagnostics.CodeAnalysis;"
                ],
                "after": [
                    "+    /// <param name=\"topic\">The topic to map.</param>",
                    "+    /// <returns>The <see cref=\"AgentId\"/> that should handle the topic.</returns>",
                    "+    public AgentId MapToAgent(TopicId topic);",
                    "+}",
                    "+"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/IUnboundSubscriptionDefinition.cs": {
                "before": [
                    "@@ -0,0 +1,18 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// IUnboundSubscriptionDefinition.cs",
                    "+",
                    "+namespace Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+    /// </summary>",
                    "+    /// <param name=\"agentType\">The agent type to associate with the subscription.</param>",
                    "+    /// <returns>A new <see cref=\"ISubscriptionDefinition\"/> bound to the specified agent type.</returns>",
                    "+    public ISubscriptionDefinition Bind(AgentType agentType);",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/KVStringParseHelper.cs": {
                "before": [
                    "@@ -0,0 +1,53 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// KVStringParseHelper.cs",
                    "+",
                    "+using System.Text.RegularExpressions;"
                ],
                "after": [
                    "+",
                    "+        throw new FormatException($\"Invalid key-value pair format: {kvString}; expecting \\\"{{{keyName}}}/{{{valueName}}}\\\"\");",
                    "+    }",
                    "+}",
                    "+"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/MessageContext.cs": {
                "before": [
                    "@@ -0,0 +1,40 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// MessageContext.cs",
                    "+",
                    "+namespace Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+    /// Gets or sets a value indicating whether this message is part of an RPC (Remote Procedure Call).",
                    "+    /// </summary>",
                    "+    public bool IsRpc { get; set; }",
                    "+}",
                    "+"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/MessageExtensions.cs": {
                "before": [
                    "@@ -1,49 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// MessageExtensions.cs",
                    "-",
                    "-using Google.Protobuf;"
                ],
                "after": [
                    "-            }",
                    "-        }",
                    "-        return state.ProtoData.Unpack<T>();",
                    "-    }",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/Microsoft.AutoGen.Contracts.csproj": {
                "before": [
                    "@@ -7,16 +7,4 @@",
                    "   </PropertyGroup>",
                    " ",
                    "   <Import Project=\"$(RepoRoot)/nuget/nuget-package.props\" />",
                    "-"
                ],
                "after": [
                    "-    <PackageReference Include=\"Grpc.AspNetCore\" />",
                    "-    <PackageReference Include=\"Grpc.Net.ClientFactory\" />",
                    "-    <PackageReference Include=\"Grpc.Tools\" PrivateAssets=\"All\" />",
                    "-  </ItemGroup>",
                    " </Project>"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/TopicId.cs": {
                "before": [
                    "@@ -0,0 +1,122 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// TopicId.cs",
                    "+",
                    "+using System.Diagnostics.CodeAnalysis;"
                ],
                "after": [
                    "+    {",
                    "+        return Type == other.Type;",
                    "+    }",
                    "+}",
                    "+"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Contracts/TopicSubscriptionAttribute.cs": {
                "before": [
                    "@@ -1,10 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// TopicSubscriptionAttribute.cs",
                    "-",
                    "-namespace Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "-[AttributeUsage(AttributeTargets.All)]",
                    "-public class TopicSubscriptionAttribute(string topic) : Attribute",
                    "-{",
                    "-    public string Topic { get; } = topic;",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core.Grpc/App.cs": {
                "before": [
                    "@@ -1,71 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// App.cs",
                    "-using System.Diagnostics;",
                    "-using System.Diagnostics.CodeAnalysis;"
                ],
                "after": [
                    "-            builder.AddAgent(type.Key, type.Value);",
                    "-        }",
                    "-        return builder;",
                    "-    }",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core.Grpc/GrpcAgentWorker.cs": {
                "before": [
                    "@@ -1,412 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// GrpcAgentWorker.cs",
                    "-",
                    "-using System.Collections.Concurrent;"
                ],
                "after": [
                    "-            throw new KeyNotFoundException($\"Failed to read AgentState for {agentId}.\");",
                    "-        }",
                    "-    }",
                    "-}",
                    "-"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core.Grpc/GrpcAgentWorkerHostBuilderExtension.cs": {
                "before": [
                    "@@ -1,132 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// GrpcAgentWorkerHostBuilderExtension.cs",
                    "-using System.Reflection;",
                    "-using Google.Protobuf;"
                ],
                "after": [
                    "-    {",
                    "-        var property = type.GetProperty(\"Descriptor\", BindingFlags.Static | BindingFlags.Public);",
                    "-        return property?.GetValue(null) as MessageDescriptor;",
                    "-    }",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core.Grpc/Microsoft.AutoGen.Core.Grpc.csproj": {
                "before": [
                    "@@ -11,5 +11,17 @@",
                    "     <ProjectReference Include=\"..\\Contracts\\Microsoft.AutoGen.Contracts.csproj\" />",
                    "   </ItemGroup>",
                    " ",
                    "+  <ItemGroup>"
                ],
                "after": [
                    "+    <PackageReference Include=\"Grpc.Tools\" PrivateAssets=\"All\" />",
                    "+  </ItemGroup>",
                    "+",
                    " ",
                    " </Project>"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/Agent.cs": {
                "before": [
                    "@@ -1,370 +0,0 @@",
                    "-",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// Agent.cs",
                    "-"
                ],
                "after": [
                    "-    public async ValueTask PublishEventAsync(string topic, IMessage message, CancellationToken cancellationToken = default)",
                    "-    {",
                    "-        await PublishEventAsync(message.ToCloudEvent(topic), cancellationToken).ConfigureAwait(false);",
                    "-    }",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/AgentExtensions.cs": {
                "before": [
                    "@@ -1,122 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// AgentExtensions.cs",
                    "-",
                    "-using System.Diagnostics;"
                ],
                "after": [
                    "-        {",
                    "-            activity?.Stop();",
                    "-        }",
                    "-    }",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/AgentMessenger.cs": {
                "before": [
                    "@@ -1,123 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// AgentMessenger.cs",
                    "-",
                    "-using System.Diagnostics;"
                ],
                "after": [
                    "-        });",
                    "-",
                    "-        return baggage as IDictionary<string, string> ?? new Dictionary<string, string>();",
                    "-    }",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/AgentMessengerFactory.cs": {
                "before": [
                    "@@ -1,12 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// AgentMessengerFactory.cs",
                    "-",
                    "-using System.Diagnostics;"
                ],
                "after": [
                    "-    public static AgentMessenger Create(IAgentWorker worker, DistributedContextPropagator distributedContextPropagator)",
                    "-    {",
                    "-        return new AgentMessenger(worker, distributedContextPropagator);",
                    "-    }",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/AgentRuntimeExtensions.cs": {
                "before": [
                    "@@ -0,0 +1,88 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// AgentRuntimeExtensions.cs",
                    "+",
                    "+using System.Reflection;"
                ],
                "after": [
                    "+        {",
                    "+            await runtime.AddSubscriptionAsync(subscription);",
                    "+        }",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/AgentTypes.cs": {
                "before": [
                    "@@ -1,20 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// AgentTypes.cs",
                    "-",
                    "-namespace Microsoft.AutoGen.Core"
                ],
                "after": [
                    "-                                .ToDictionary(type => type.Name, type => type);",
                    "-",
                    "-        return new AgentTypes(agents);",
                    "-    }",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/AgentWorker.cs": {
                "before": [
                    "@@ -1,196 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// AgentWorker.cs",
                    "-",
                    "-using System.Collections.Concurrent;"
                ],
                "after": [
                    "-        }",
                    "-",
                    "-        return agent;",
                    "-    }",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/AgentsApp.cs": {
                "before": [
                    "@@ -0,0 +1,140 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// AgentsApp.cs",
                    "+",
                    "+using System.Diagnostics;"
                ],
                "after": [
                    "+    public Task WaitForShutdownAsync()",
                    "+    {",
                    "+        return this.Host.WaitForShutdownAsync();",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/App.cs": {
                "before": [
                    "@@ -1,64 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// App.cs",
                    "-using System.Diagnostics;",
                    "-using System.Diagnostics.CodeAnalysis;"
                ],
                "after": [
                    "-            builder.AddAgent(type.Key, type.Value);",
                    "-        }",
                    "-        return builder;",
                    "-    }",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/BaseAgent.cs": {
                "before": [
                    "@@ -0,0 +1,114 @@",
                    "+",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// BaseAgent.cs",
                    "+"
                ],
                "after": [
                    "+    public ValueTask PublishMessageAsync(object message, TopicId topic, string? messageId = null, CancellationToken cancellationToken = default)",
                    "+    {",
                    "+        return this.Runtime.PublishMessageAsync(message, topic, sender: this.Id, messageId: messageId, cancellationToken: cancellationToken);",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/Client.cs": {
                "before": [
                    "@@ -1,9 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// Client.cs",
                    "-using Microsoft.Extensions.DependencyInjection;",
                    "-"
                ],
                "after": [
                    "-namespace Microsoft.AutoGen.Core;",
                    "-public sealed class Client(IAgentWorker worker, [FromKeyedServices(\"EventTypes\")] EventTypes eventTypes)",
                    "-    : Agent(worker, eventTypes)",
                    "-{",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/EventTypes.cs": {
                "before": [
                    "@@ -1,11 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// EventTypes.cs",
                    "-using Google.Protobuf.Reflection;",
                    "-"
                ],
                "after": [
                    "-{",
                    "-    public TypeRegistry TypeRegistry { get; } = typeRegistry;",
                    "-    public Dictionary<string, Type> Types { get; } = types;",
                    "-    public Dictionary<Type, HashSet<string>> EventsMap { get; } = eventsMap;",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/HandlerInvoker.cs": {
                "before": [
                    "@@ -0,0 +1,77 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// HandlerInvoker.cs",
                    "+",
                    "+using System.Diagnostics;"
                ],
                "after": [
                    "+    public ValueTask<object?> InvokeAsync(object? obj, MessageContext messageContext)",
                    "+    {",
                    "+        return this.Invocation(obj, messageContext);",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/HostBuilderExtensions.cs": {
                "before": [
                    "@@ -1,132 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// HostBuilderExtensions.cs",
                    "-",
                    "-using System.Diagnostics;"
                ],
                "after": [
                    "-        builder.Services.AddKeyedSingleton(\"AgentTypes\", (sp, key) => Tuple.Create(typeName, agentType));",
                    "-        return this;",
                    "-    }",
                    "-}",
                    "-"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/IAgentWorker.cs": {
                "before": [
                    "@@ -1,14 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// IAgentWorker.cs",
                    "-using Microsoft.AutoGen.Contracts;",
                    "-namespace Microsoft.AutoGen.Core;"
                ],
                "after": [
                    "-    ValueTask SendResponseAsync(RpcResponse response, CancellationToken cancellationToken = default);",
                    "-    ValueTask SendMessageAsync(Message message, CancellationToken cancellationToken = default);",
                    "-    ValueTask StoreAsync(AgentState value, CancellationToken cancellationToken = default);",
                    "-    ValueTask<AgentState> ReadAsync(AgentId agentId, CancellationToken cancellationToken = default);",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/IHandle.cs": {
                "before": [
                    "@@ -1,12 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// IHandle.cs",
                    "-namespace Microsoft.AutoGen.Core;",
                    "-public interface IHandle"
                ],
                "after": [
                    "-",
                    "-public interface IHandle<T> : IHandle",
                    "-{",
                    "-    Task Handle(T item);",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/IHandleExtensions.cs": {
                "before": [
                    "@@ -3,6 +3,8 @@",
                    " ",
                    " using System.Reflection;",
                    " ",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+        var handlers = type.GetInterfaces().Where(i => i.IsGenericType && (i.GetGenericTypeDefinition() == typeof(IHandle<>) || i.GetGenericTypeDefinition() == typeof(IHandle<,>)));",
                    "+        return handlers.SelectMany(h => h.GetMethods().Where(m => m.Name == \"HandleAsync\")).ToArray();",
                    "     }",
                    " ",
                    "     /// <summary>"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/InProcessRuntime.cs": {
                "before": [
                    "@@ -0,0 +1,323 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// InProcessRuntime.cs",
                    "+",
                    "+using System.Collections.Concurrent;"
                ],
                "after": [
                    "+",
                    "+    Task IHostedService.StartAsync(CancellationToken cancellationToken) => this.StartAsync(cancellationToken).AsTask();",
                    "+",
                    "+    Task IHostedService.StopAsync(CancellationToken cancellationToken) => this.StopAsync(cancellationToken).AsTask();",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/MessageDelivery.cs": {
                "before": [
                    "@@ -0,0 +1,64 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// MessageDelivery.cs",
                    "+",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+        this.Topic = topic;",
                    "+",
                    "+        return new MessageDelivery(this, servicer);",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/Microsoft.AutoGen.Core.csproj": {
                "before": [
                    "@@ -8,13 +8,13 @@",
                    " ",
                    "   <Import Project=\"$(RepoRoot)/nuget/nuget-package.props\" />",
                    " ",
                    "-"
                ],
                "after": [
                    "+\t\t<PackageReference Include=\"Microsoft.Extensions.Hosting\" />",
                    "+\t\t<PackageReference Include=\"Microsoft.Extensions.Logging\" />",
                    " \t  <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" />",
                    " \t  <PackageReference Include=\"Microsoft.Extensions.DependencyInjection.Abstractions\" />",
                    " \t</ItemGroup>"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/ReflectionHelper.cs": {
                "before": [
                    "@@ -1,10 +1,8 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // ReflectionHelper.cs",
                    "-using System.Reflection;",
                    "-using Google.Protobuf;"
                ],
                "after": [
                    "-        var property = type.GetProperty(\"Descriptor\", BindingFlags.Static | BindingFlags.Public);",
                    "-        return property?.GetValue(null) as MessageDescriptor;",
                    "+        return false;",
                    "     }",
                    " }"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/ResultSink.cs": {
                "before": [
                    "@@ -0,0 +1,54 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// ResultSink.cs",
                    "+",
                    "+using System.Threading.Tasks.Sources;"
                ],
                "after": [
                    "+        this.core.SetResult(result);",
                    "+    }",
                    "+",
                    "+    public ValueTask<TResult> Future => new(this, this.core.Version);",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/TypePrefixSubscription.cs": {
                "before": [
                    "@@ -0,0 +1,102 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// TypePrefixSubscription.cs",
                    "+",
                    "+using System.Diagnostics.CodeAnalysis;"
                ],
                "after": [
                    "+    public override int GetHashCode()",
                    "+    {",
                    "+        return HashCode.Combine(Id, AgentType, TopicTypePrefix);",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/TypePrefixSubscriptionAttribute.cs": {
                "before": [
                    "@@ -0,0 +1,17 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// TypePrefixSubscriptionAttribute.cs",
                    "+",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+    public ISubscriptionDefinition Bind(AgentType agentType)",
                    "+    {",
                    "+        return new TypePrefixSubscription(Topic, agentType);",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/TypeSubscription.cs": {
                "before": [
                    "@@ -0,0 +1,101 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// TypeSubscription.cs",
                    "+",
                    "+using System.Diagnostics.CodeAnalysis;"
                ],
                "after": [
                    "+    public override int GetHashCode()",
                    "+    {",
                    "+        return HashCode.Combine(Id, AgentType, TopicType);",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Core/TypeSubscriptionAttribute.cs": {
                "before": [
                    "@@ -0,0 +1,17 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// TypeSubscriptionAttribute.cs",
                    "+",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+    public ISubscriptionDefinition Bind(AgentType agentType)",
                    "+    {",
                    "+        return new TypeSubscription(Topic, agentType);",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Extensions/SemanticKernel/Microsoft.AutoGen.Extensions.SemanticKernel.csproj": {
                "before": [
                    "@@ -9,6 +9,7 @@",
                    " ",
                    "   <ItemGroup>",
                    " \t  <PackageReference Include=\"Azure.AI.OpenAI\" />",
                    "+    <PackageReference Include=\"Microsoft.Extensions.Options.DataAnnotations\" />"
                ],
                "after": [
                    " \t  <PackageReference Include=\"Azure.AI.OpenAI\" />",
                    "+    <PackageReference Include=\"Microsoft.Extensions.Options.DataAnnotations\" />",
                    " \t  <PackageReference Include=\"Microsoft.SemanticKernel\" />",
                    "     <PackageReference Include=\"Microsoft.SemanticKernel.Connectors.Qdrant\" />",
                    "     <PackageReference Include=\"Microsoft.SemanticKernel.Plugins.Memory\" />"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Abstractions/IAgentGrain.cs": {
                "before": [
                    "@@ -0,0 +1,10 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// IAgentGrain.cs",
                    "+",
                    "+namespace Microsoft.AutoGen.Runtime.Grpc.Abstractions;"
                ],
                "after": [
                    "+internal interface IAgentGrain : IGrainWithStringKey",
                    "+{",
                    "+    ValueTask<Contracts.AgentState> ReadStateAsync();",
                    "+    ValueTask<string> WriteStateAsync(Contracts.AgentState state, string eTag);",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Abstractions/IGateway.cs": {
                "before": [
                    "@@ -0,0 +1,18 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// IGateway.cs",
                    "+using Microsoft.AutoGen.Contracts;",
                    "+"
                ],
                "after": [
                    "+    ValueTask<AddSubscriptionResponse> SubscribeAsync(AddSubscriptionRequest request);",
                    "+    ValueTask<RemoveSubscriptionResponse> UnsubscribeAsync(RemoveSubscriptionRequest request);",
                    "+    ValueTask<List<Subscription>> GetSubscriptionsAsync(GetSubscriptionsRequest request);",
                    "+    Task SendMessageAsync(IConnection connection, CloudEvent cloudEvent);",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Abstractions/IGatewayRegistry.cs": {
                "before": [
                    "@@ -0,0 +1,48 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// IGatewayRegistry.cs",
                    "+",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+    /// </summary>",
                    "+    /// <param name=\"type\">The type of the agent.</param>",
                    "+    /// <returns>A task representing the asynchronous operation, with the compatible worker as the result.</returns>",
                    "+    ValueTask<IGateway?> GetCompatibleWorkerAsync(string type);",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Abstractions/IRegistryGrain.cs": {
                "before": [
                    "@@ -0,0 +1,11 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// IRegistryGrain.cs",
                    "+",
                    "+namespace Microsoft.AutoGen.Runtime.Grpc.Abstractions;"
                ],
                "after": [
                    "+/// Orleans specific interface, needed to mark the key",
                    "+/// </summary>",
                    "+[Alias(\"Microsoft.AutoGen.Runtime.Grpc.Abstractions.IRegistryGrain\")]",
                    "+public interface IRegistryGrain : IGatewayRegistry, IGrainWithIntegerKey",
                    "+{ }"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Microsoft.AutoGen.Runtime.Grpc.csproj": {
                "before": [
                    "@@ -6,6 +6,7 @@",
                    "   </PropertyGroup>",
                    "   <ItemGroup>",
                    "     <ProjectReference Include=\"..\\Contracts\\Microsoft.AutoGen.Contracts.csproj\" />",
                    "+    <ProjectReference Include=\"..\\Core\\Microsoft.AutoGen.Core.csproj\" />"
                ],
                "after": [
                    "     <ProjectReference Include=\"..\\Contracts\\Microsoft.AutoGen.Contracts.csproj\" />",
                    "+    <ProjectReference Include=\"..\\Core\\Microsoft.AutoGen.Core.csproj\" />",
                    "   </ItemGroup>",
                    "   <ItemGroup>",
                    "     <PackageReference Include=\"Microsoft.Orleans.Reminders\" />"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/AgentWorkerHostingExtensions.cs": {
                "before": [
                    "@@ -3,6 +3,7 @@",
                    " ",
                    " using System.Diagnostics;",
                    " using Microsoft.AspNetCore.Builder;",
                    "+using Microsoft.AutoGen.Core;"
                ],
                "after": [
                    "+            return ReflectionHelper.GetAgentsMetadata(AppDomain.CurrentDomain.GetAssemblies());",
                    "+        });",
                    "         builder.Services.AddSingleton<GrpcGateway>();",
                    "         builder.Services.AddSingleton<IHostedService>(sp => (IHostedService)sp.GetRequiredService<GrpcGateway>());",
                    " "
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Grpc/GrpcGateway.cs": {
                "before": [
                    "@@ -4,6 +4,7 @@",
                    " using System.Collections.Concurrent;",
                    " using Grpc.Core;",
                    " using Microsoft.AutoGen.Contracts;",
                    "+using Microsoft.AutoGen.Runtime.Grpc.Abstractions;"
                ],
                "after": [
                    "     {",
                    "-        return this.SendMessageAsync(connection, cloudEvent);",
                    "+        return GetSubscriptionsAsync(request);",
                    "     }",
                    " }"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Grpc/GrpcGatewayService.cs": {
                "before": [
                    "@@ -7,13 +7,10 @@",
                    " namespace Microsoft.AutoGen.Runtime.Grpc;",
                    " ",
                    " // gRPC service which handles communication between the agent worker and the cluster.",
                    "-internal sealed class GrpcGatewayService : AgentRpc.AgentRpcBase"
                ],
                "after": [
                    "+    {",
                    "+        request.RequestId = context.Peer;",
                    "+        return await Gateway.RegisterAgentTypeAsync(request).ConfigureAwait(true);",
                    "+    }",
                    " }"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Grpc/GrpcWorkerConnection.cs": {
                "before": [
                    "@@ -3,29 +3,30 @@",
                    " ",
                    " using System.Threading.Channels;",
                    " using Grpc.Core;",
                    "-using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "-                _gateway.OnReceivedMessageAsync(this, message).Ignore();",
                    "+                _gateway.OnReceivedMessageAsync(this, message, _shutdownCancellationToken.Token).Ignore();",
                    "             }",
                    "         }",
                    "         catch (OperationCanceledException)"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/IGateway.cs": {
                "before": [
                    "@@ -1,14 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// IGateway.cs",
                    "-using Microsoft.AutoGen.Contracts;",
                    "-"
                ],
                "after": [
                    "-    ValueTask BroadcastEvent(CloudEvent evt);",
                    "-    ValueTask StoreAsync(AgentState value);",
                    "-    ValueTask<AgentState> ReadAsync(AgentId agentId);",
                    "-    Task SendMessageAsync(IConnection connection, CloudEvent cloudEvent);",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/AgentStateGrain.cs": {
                "before": [
                    "@@ -1,11 +1,11 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // AgentStateGrain.cs",
                    " ",
                    "-using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+    ValueTask<string> IAgentGrain.WriteStateAsync(AgentState state, string eTag)",
                    "+    {",
                    "+        return WriteStateAsync(state, eTag);",
                    "+    }",
                    " }"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/IRegistryGrain.cs": {
                "before": [
                    "@@ -1,15 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// IRegistryGrain.cs",
                    "-using Microsoft.AutoGen.Contracts;",
                    "-"
                ],
                "after": [
                    "-    ValueTask RegisterAgentType(string type, IGateway worker);",
                    "-    ValueTask AddWorker(IGateway worker);",
                    "-    ValueTask UnregisterAgentType(string type, IGateway worker);",
                    "-    ValueTask<IGateway?> GetCompatibleWorker(string type);",
                    "-}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/OrleansRuntimeHostingExtenions.cs": {
                "before": [
                    "@@ -16,7 +16,6 @@ public static class OrleansRuntimeHostingExtenions",
                    "     public static WebApplicationBuilder AddOrleans(this WebApplicationBuilder builder)",
                    "     {",
                    "         builder.Services.AddSerializer(serializer => serializer.AddProtobufSerializer());",
                    "-        builder.Services.AddSingleton<IRegistryGrain, RegistryGrain>();"
                ],
                "after": [
                    "-                });",
                    "+",
                    "                 siloBuilder.Configure<SiloMessagingOptions>(options =>",
                    "                 {",
                    "                     options.ResponseTimeout = TimeSpan.FromMinutes(3);"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/RegistryGrain.cs": {
                "before": [
                    "@@ -1,13 +1,11 @@",
                    " // Copyright (c) Microsoft Corporation. All rights reserved.",
                    " // RegistryGrain.cs",
                    "-",
                    " using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "         public HashSet<string> SupportedTypes { get; set; } = [];",
                    "         public DateTimeOffset LastSeen { get; set; }",
                    "     }",
                    " }",
                    "+"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/Surrogates/AddSubscriptionRequestSurrogate.cs": {
                "before": [
                    "@@ -0,0 +1,37 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// AddSubscriptionRequestSurrogate.cs",
                    "+",
                    "+namespace Microsoft.AutoGen.Runtime.Grpc.Orleans.Surrogates;"
                ],
                "after": [
                    "+        {",
                    "+            RequestId = value.RequestId,",
                    "+            Subscription = value.Subscription",
                    "+        };",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/Surrogates/AddSubscriptionResponseSurrogate.cs": {
                "before": [
                    "@@ -0,0 +1,39 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// AddSubscriptionResponseSurrogate.cs",
                    "+",
                    "+namespace Microsoft.AutoGen.Runtime.Grpc.Orleans.Surrogates;"
                ],
                "after": [
                    "+            Success = value.Success,",
                    "+            Error = value.Error",
                    "+        };",
                    "+}",
                    "+"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/Surrogates/AgentIdSurrogate.cs": {
                "before": [
                    "@@ -0,0 +1,38 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// AgentIdSurrogate.cs",
                    "+",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved."
                ],
                "after": [
                    "+        {",
                    "+            Key = value.Key,",
                    "+            Type = value.Type",
                    "+        };",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/Surrogates/AgentStateSurrogate.cs": {
                "before": [
                    "@@ -0,0 +1,55 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// AgentStateSurrogate.cs",
                    "+",
                    "+using Google.Protobuf;"
                ],
                "after": [
                    "+            Etag = value.ETag,",
                    "+            //ProtoData = value.ProtoData.Value",
                    "+        };",
                    "+}",
                    "+"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/Surrogates/CloudEventSurrogate.cs": {
                "before": [
                    "@@ -0,0 +1,45 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// CloudEventSurrogate.cs",
                    "+",
                    "+using Google.Protobuf;"
                ],
                "after": [
                    "+            BinaryData = value.BinaryData,",
                    "+            Id = value.Id,",
                    "+            ProtoData = value.ProtoData",
                    "+        };",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/Surrogates/GetSubscriptionsRequest.cs": {
                "before": [
                    "@@ -0,0 +1,33 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// GetSubscriptionsRequest.cs",
                    "+",
                    "+namespace Microsoft.AutoGen.Runtime.Grpc.Orleans.Surrogates;"
                ],
                "after": [
                    "+        in GetSubscriptionsRequest value) =>",
                    "+        new GetSubscriptionsRequestSurrogate",
                    "+        {",
                    "+        };",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/Surrogates/RegisterAgentTypeRequestSurrogate.cs": {
                "before": [
                    "@@ -0,0 +1,49 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// RegisterAgentTypeRequestSurrogate.cs",
                    "+",
                    "+using Google.Protobuf.Collections;"
                ],
                "after": [
                    "+            /* future",
                    "+            Events = value.Events,",
                    "+            Topics = value.Topics */",
                    "+        };",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/Surrogates/RegisterAgentTypeResponseSurrogate.cs": {
                "before": [
                    "@@ -0,0 +1,39 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// RegisterAgentTypeResponseSurrogate.cs",
                    "+",
                    "+namespace Microsoft.AutoGen.Runtime.Grpc.Orleans.Surrogates;"
                ],
                "after": [
                    "+            Success = value.Success,",
                    "+            Error = value.Error",
                    "+        };",
                    "+}",
                    "+"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/Surrogates/RemoveSubscriptionRequest.cs": {
                "before": [
                    "@@ -0,0 +1,33 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// RemoveSubscriptionRequest.cs",
                    "+",
                    "+namespace Microsoft.AutoGen.Runtime.Grpc.Orleans.Surrogates;"
                ],
                "after": [
                    "+        new RemoveSubscriptionRequestSurrogate",
                    "+        {",
                    "+            Id = value.Id",
                    "+        };",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/Surrogates/RemoveSubscriptionResponse.cs": {
                "before": [
                    "@@ -0,0 +1,37 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// RemoveSubscriptionResponse.cs",
                    "+",
                    "+namespace Microsoft.AutoGen.Runtime.Grpc.Orleans.Surrogates;"
                ],
                "after": [
                    "+            Success = value.Success,",
                    "+            Error = value.Error",
                    "+        };",
                    "+}",
                    "+"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/Surrogates/RpcRequestSurrogate.cs": {
                "before": [
                    "@@ -0,0 +1,54 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// RpcRequestSurrogate.cs",
                    "+",
                    "+using Google.Protobuf.Collections;"
                ],
                "after": [
                    "+            Payload = value.Payload,",
                    "+            Metadata = value.Metadata",
                    "+        };",
                    "+}",
                    "+"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/Surrogates/RpcResponseSurrogate.cs": {
                "before": [
                    "@@ -0,0 +1,45 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// RpcResponseSurrogate.cs",
                    "+",
                    "+using Google.Protobuf.Collections;"
                ],
                "after": [
                    "+            Error = value.Error,",
                    "+            Metadata = value.Metadata",
                    "+        };",
                    "+}",
                    "+"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/Surrogates/SubscriptionSurrogate.cs": {
                "before": [
                    "@@ -0,0 +1,54 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// SubscriptionSurrogate.cs",
                    "+",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+            TypeSubscription = value.TypeSubscription,",
                    "+            TypePrefixSubscription = value.TypePrefixSubscription",
                    "+        };",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/Surrogates/TypePrefixSubscriptionSurrogate.cs": {
                "before": [
                    "@@ -0,0 +1,36 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// TypePrefixSubscriptionSurrogate.cs",
                    "+",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+        {",
                    "+            TopicTypePrefix = value.TopicTypePrefix,",
                    "+            AgentType = value.AgentType",
                    "+        };",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/Runtime.Grpc/Services/Orleans/Surrogates/TypeSubscriptionSurrogate.cs": {
                "before": [
                    "@@ -0,0 +1,36 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// TypeSubscriptionSurrogate.cs",
                    "+",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+        {",
                    "+            TopicType = value.TopicType,",
                    "+            AgentType = value.AgentType",
                    "+        };",
                    "+}"
                ]
            },
            "dotnet/src/Microsoft.AutoGen/readme.md": {
                "before": [
                    "@@ -0,0 +1,3 @@",
                    "+# Microsoft.AutoGen",
                    "+",
                    "+- [Getting started sample](../../samples/getting-started/)"
                ],
                "after": [
                    "@@ -0,0 +1,3 @@",
                    "+# Microsoft.AutoGen",
                    "+",
                    "+- [Getting started sample](../../samples/getting-started/)"
                ]
            },
            "dotnet/test/AutoGen.Gemini.Tests/AutoGen.Gemini.Tests.csproj": {
                "before": [
                    "@@ -11,7 +11,7 @@",
                    "   </PropertyGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\samples\\AutoGen.Gemini.Sample\\AutoGen.Gemini.Sample.csproj\" />"
                ],
                "after": [
                    "-    <ProjectReference Include=\"..\\..\\samples\\AutoGen.Gemini.Sample\\AutoGen.Gemini.Sample.csproj\" />",
                    "+    <ProjectReference Include=\"..\\..\\samples\\AgentChat\\AutoGen.Gemini.Sample\\AutoGen.Gemini.Sample.csproj\" />",
                    "     <ProjectReference Include=\"..\\..\\src\\AutoGen.Gemini\\AutoGen.Gemini.csproj\" />",
                    "     <ProjectReference Include=\"..\\AutoGen.Tests\\AutoGen.Tests.csproj\" />",
                    "     <ProjectReference Include=\"..\\..\\src\\AutoGen.SourceGenerator\\AutoGen.SourceGenerator.csproj\" OutputItemType=\"Analyzer\" ReferenceOutputAssembly=\"false\" />"
                ]
            },
            "dotnet/test/AutoGen.OpenAI.Tests/AutoGen.OpenAI.Tests.csproj": {
                "before": [
                    "@@ -13,7 +13,7 @@",
                    "   </ItemGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\samples\\AutoGen.OpenAI.Sample\\AutoGen.OpenAI.Sample.csproj\" />"
                ],
                "after": [
                    "-    <ProjectReference Include=\"..\\..\\samples\\AutoGen.OpenAI.Sample\\AutoGen.OpenAI.Sample.csproj\" />",
                    "+    <ProjectReference Include=\"..\\..\\samples\\AgentChat\\AutoGen.OpenAI.Sample\\AutoGen.OpenAI.Sample.csproj\" />",
                    "     <ProjectReference Include=\"..\\..\\src\\AutoGen.OpenAI\\AutoGen.OpenAI.csproj\" />",
                    "     <ProjectReference Include=\"..\\..\\src\\AutoGen.SourceGenerator\\AutoGen.SourceGenerator.csproj\" OutputItemType=\"Analyzer\" ReferenceOutputAssembly=\"false\" />",
                    "     <ProjectReference Include=\"..\\AutoGen.Test.Share\\AutoGen.Tests.Share.csproj\" />"
                ]
            },
            "dotnet/test/AutoGen.Tests/AutoGen.Tests.csproj": {
                "before": [
                    "@@ -8,7 +8,7 @@",
                    "   </PropertyGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\samples\\AutoGen.BasicSamples\\AutoGen.BasicSample.csproj\" />"
                ],
                "after": [
                    "-    <ProjectReference Include=\"..\\..\\samples\\AutoGen.BasicSamples\\AutoGen.BasicSample.csproj\" />",
                    "+    <ProjectReference Include=\"..\\..\\samples\\AgentChat\\AutoGen.Basic.Sample\\AutoGen.Basic.Sample.csproj\" />",
                    "     <ProjectReference Include=\"..\\..\\src\\AutoGen.Anthropic\\AutoGen.Anthropic.csproj\" />",
                    "     <ProjectReference Include=\"..\\..\\src\\AutoGen.SourceGenerator\\AutoGen.SourceGenerator.csproj\" OutputItemType=\"Analyzer\" ReferenceOutputAssembly=\"false\" />",
                    "     <ProjectReference Include=\"..\\..\\src\\AutoGen\\AutoGen.csproj\" />"
                ]
            },
            "dotnet/test/AutoGen.Tests/BasicSampleTest.cs": {
                "before": [
                    "@@ -4,7 +4,7 @@",
                    " using System;",
                    " using System.IO;",
                    " using System.Threading.Tasks;",
                    "-using AutoGen.BasicSample;"
                ],
                "after": [
                    "-using AutoGen.BasicSample;",
                    "+using AutoGen.Basic.Sample;",
                    " using Xunit.Abstractions;",
                    " ",
                    " namespace AutoGen.Tests;"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Agents.Tests/AgentTests.cs": {
                "before": [
                    "@@ -1,126 +0,0 @@",
                    "-// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "-// AgentTests.cs",
                    "-",
                    "-using System.Collections.Concurrent;"
                ],
                "after": [
                    "-[CollectionDefinition(Name)]",
                    "-public sealed class ClusterFixtureCollection : ICollectionFixture<InMemoryAgentRuntimeFixture>",
                    "-{",
                    "-    public const string Name = nameof(ClusterFixtureCollection);",
                    "-}"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Core.Grpc.Tests/AgentGrpcTests.cs": {
                "before": [
                    "@@ -0,0 +1,262 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// AgentGrpcTests.cs",
                    "+",
                    "+using System.Collections.Concurrent;"
                ],
                "after": [
                    "+    public void Dispose()",
                    "+    {",
                    "+        Stop();",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Core.Grpc.Tests/Microsoft.AutoGen.Core.Grpc.Tests.csproj": {
                "before": [
                    "@@ -0,0 +1,17 @@",
                    "+<Project Sdk=\"Microsoft.NET.Sdk\">",
                    "+",
                    "+  <PropertyGroup>",
                    "+    <TargetFrameworks>$(TestTargetFrameworks)</TargetFrameworks>"
                ],
                "after": [
                    "+    <ProjectReference Include=\"..\\..\\src\\Microsoft.AutoGen\\AgentHost\\Microsoft.AutoGen.AgentHost.csproj\" />",
                    "+    <PackageReference Include=\"Microsoft.Extensions.Hosting\" />",
                    "+  </ItemGroup>",
                    "+",
                    "+</Project>"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Core.Grpc.Tests/Properties/launchSettings.json": {
                "before": [
                    "@@ -1,12 +1,13 @@",
                    " {",
                    "   \"profiles\": {",
                    "-    \"DevTeam.AgentHost\": {",
                    "+    \"AgentHost\": {"
                ],
                "after": [
                    "     }",
                    "   }",
                    "-}",
                    "\\ No newline at end of file",
                    "+}"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Core.Grpc.Tests/appsettings.json": {
                "before": [
                    "@@ -0,0 +1,17 @@",
                    "+{",
                    "+  \"Logging\": {",
                    "+    \"LogLevel\": {",
                    "+      \"Default\": \"Warning\","
                ],
                "after": [
                    "+    \"EndpointDefaults\": {",
                    "+      \"Protocols\": \"Http2\"",
                    "+    }",
                    "+  }",
                    "+}"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Core.Tests/AgentIdTests.cs": {
                "before": [
                    "@@ -0,0 +1,109 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// AgentIdTests.cs",
                    "+using FluentAssertions;",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+",
                    "+        Action validCase = () => new AgentId(\"Valid_Type\", \"Valid_Key_123\");",
                    "+        validCase.Should().NotThrow(\"This is a correctly formatted AgentId.\");",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Core.Tests/AgentMetaDataTests.cs": {
                "before": [
                    "@@ -0,0 +1,20 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// AgentMetaDataTests.cs",
                    "+using FluentAssertions;",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+        metadata.Type.Should().Be(\"TestType\");",
                    "+        metadata.Key.Should().Be(\"TestKey\");",
                    "+        metadata.Description.Should().Be(\"TestDescription\");",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Core.Tests/AgentTests.cs": {
                "before": [
                    "@@ -0,0 +1,169 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// AgentTests.cs",
                    "+using FluentAssertions;",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+        // Add a sample value and verify it updates correctly",
                    "+        state[\"testKey\"] = \"testValue\";",
                    "+        state.Should().ContainKey(\"testKey\").WhoseValue.Should().Be(\"testValue\");",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Core.Tests/HandlerInvokerTest.cs": {
                "before": [
                    "@@ -0,0 +1,57 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// HandlerInvokerTest.cs",
                    "+",
                    "+using FluentAssertions;"
                ],
                "after": [
                    "+        this.SendlikeInvocations.Should().HaveCount(1);",
                    "+        this.SendlikeInvocations[0].Item1.Should().Be(\"Hello, world!\");",
                    "+        result.Should().Be(1);",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Core.Tests/TestAgent.cs": {
                "before": [
                    "@@ -0,0 +1,74 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// TestAgent.cs",
                    "+",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+        IAgentRuntime runtime,",
                    "+        Logger<BaseAgent>? logger = null) : base(id, runtime, logger)",
                    "+    {",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Integration.Tests.AppHosts/HelloAgent.AppHost/HelloAgent.AppHost.csproj": {
                "before": [
                    "@@ -16,6 +16,6 @@",
                    "   </ItemGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\..\\samples\\Hello\\HelloAgent\\HelloAgent.csproj\" />"
                ],
                "after": [
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\..\\samples\\Hello\\HelloAgent\\HelloAgent.csproj\" />",
                    "+    <ProjectReference Include=\"..\\..\\..\\samples\\AgentChat\\Hello\\HelloAgent\\HelloAgent.csproj\" />",
                    "   </ItemGroup>",
                    " </Project>"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Integration.Tests/Microsoft.AutoGen.Integration.Tests.csproj": {
                "before": [
                    "@@ -28,8 +28,8 @@",
                    "   </ItemGroup>",
                    " ",
                    "   <ItemGroup>",
                    "-    <ProjectReference Include=\"..\\..\\samples\\Hello\\Hello.AppHost\\Hello.AppHost.csproj\" />"
                ],
                "after": [
                    "+    <ProjectReference Include=\"..\\..\\samples\\AgentChat\\Hello\\Hello.AppHost\\Hello.AppHost.csproj\" />",
                    "+    <ProjectReference Include=\"..\\..\\samples\\AgentChat\\Hello\\HelloAgent\\HelloAgent.csproj\" />",
                    "     <ProjectReference Include=\"..\\Microsoft.AutoGen.Integration.Tests.AppHosts\\HelloAgent.AppHost\\HelloAgent.AppHost.csproj\" />",
                    "   </ItemGroup>",
                    " "
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Runtime.Grpc.Tests/GrpcGatewayServiceTests.cs": {
                "before": [
                    "@@ -0,0 +1,186 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// GrpcGatewayServiceTests.cs",
                    "+",
                    "+using FluentAssertions;"
                ],
                "after": [
                    "+    private string GetFullName(Type type)",
                    "+    {",
                    "+        return ReflectionHelper.GetMessageDescriptor(type)!.FullName;",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Runtime.Grpc.Tests/Helpers/Grpc/TestAsyncStreamReader.cs": {
                "before": [
                    "@@ -0,0 +1,69 @@",
                    "+#pragma warning disable IDE0073",
                    "+// Copyright 2019 The gRPC Authors",
                    "+//",
                    "+// Licensed under the Apache License, Version 2.0 (the \"License\");"
                ],
                "after": [
                    "+    public void Dispose()",
                    "+    {",
                    "+        Complete();",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Runtime.Grpc.Tests/Helpers/Grpc/TestGrpcClient.cs": {
                "before": [
                    "@@ -0,0 +1,38 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// TestGrpcClient.cs",
                    "+",
                    "+using Microsoft.AutoGen.Contracts;"
                ],
                "after": [
                    "+        CallContextCancellation.Cancel();",
                    "+        RequestStream.Dispose();",
                    "+        ResponseStream.Dispose();",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Runtime.Grpc.Tests/Helpers/Grpc/TestServerCallContext.cs": {
                "before": [
                    "@@ -0,0 +1,73 @@",
                    "+#pragma warning disable IDE0073",
                    "+// Copyright 2019 The gRPC Authors",
                    "+//",
                    "+// Licensed under the Apache License, Version 2.0 (the \"License\");"
                ],
                "after": [
                    "+    public static TestServerCallContext Create(Metadata? requestHeaders = null, CancellationToken cancellationToken = default)",
                    "+    {",
                    "+        return new TestServerCallContext(requestHeaders ?? new Metadata(), cancellationToken);",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Runtime.Grpc.Tests/Helpers/Grpc/TestServerStreamWriter.cs": {
                "before": [
                    "@@ -0,0 +1,86 @@",
                    "+#pragma warning disable IDE0073",
                    "+// Copyright 2019 The gRPC Authors",
                    "+//",
                    "+// Licensed under the Apache License, Version 2.0 (the \"License\");"
                ],
                "after": [
                    "+    public void Dispose()",
                    "+    {",
                    "+        Complete();",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Runtime.Grpc.Tests/Helpers/Orleans/ClusterCollection.cs": {
                "before": [
                    "@@ -0,0 +1,10 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// ClusterCollection.cs",
                    "+",
                    "+namespace Microsoft.AutoGen.Runtime.Grpc.Tests.Helpers.Orleans;"
                ],
                "after": [
                    "+[CollectionDefinition(Name)]",
                    "+public sealed class ClusterCollection : ICollectionFixture<ClusterFixture>",
                    "+{",
                    "+    public const string Name = nameof(ClusterCollection);",
                    "+}"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Runtime.Grpc.Tests/Helpers/Orleans/ClusterFixture.cs": {
                "before": [
                    "@@ -0,0 +1,21 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// ClusterFixture.cs",
                    "+",
                    "+using Orleans.TestingHost;"
                ],
                "after": [
                    "+    }",
                    "+    public TestCluster Cluster { get; }",
                    "+",
                    "+    void IDisposable.Dispose() => Cluster.StopAllSilos();",
                    "+}"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Runtime.Grpc.Tests/Helpers/Orleans/SiloBuilderConfigurator.cs": {
                "before": [
                    "@@ -0,0 +1,22 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// SiloBuilderConfigurator.cs",
                    "+",
                    "+using Orleans.Serialization;"
                ],
                "after": [
                    "+            .AddMemoryGrainStorage(\"PubSubStore\")",
                    "+            .AddMemoryGrainStorage(\"AgentRegistryStore\")",
                    "+            .AddMemoryGrainStorage(\"AgentStateStore\");",
                    "+    }",
                    "+}"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Runtime.Grpc.Tests/Microsoft.AutoGen.Runtime.Grpc.Tests.csproj": {
                "before": [
                    "@@ -0,0 +1,26 @@",
                    "+\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">",
                    "+",
                    "+  <PropertyGroup>",
                    "+    <TargetFramework>net8.0</TargetFramework>"
                ],
                "after": [
                    "+    <Using Include=\"Xunit\" />",
                    "+    <Using Include=\"Tests.Events\" />",
                    "+  </ItemGroup>",
                    "+",
                    "+</Project>"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Runtime.Grpc.Tests/TestAgent.cs": {
                "before": [
                    "@@ -0,0 +1,46 @@",
                    "+// Copyright (c) Microsoft Corporation. All rights reserved.",
                    "+// TestAgent.cs",
                    "+",
                    "+using System.Collections.Concurrent;"
                ],
                "after": [
                    "+        await PublishMessageAsync(new GoodBye { Message = \"\" });",
                    "+    }",
                    "+",
                    "+    public static ConcurrentDictionary<string, object> ReceivedMessages { get; private set; } = new();",
                    "+}"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Tests.Shared/Microsoft.AutoGen.Tests.Shared.csproj": {
                "before": [
                    "@@ -0,0 +1,26 @@",
                    "+\ufeff<Project Sdk=\"Microsoft.NET.Sdk\">",
                    "+",
                    "+  <PropertyGroup>",
                    "+    <TargetFramework>net8.0</TargetFramework>"
                ],
                "after": [
                    "+  <ItemGroup>",
                    "+    <Using Include=\"Xunit\" />",
                    "+  </ItemGroup>",
                    "+",
                    "+</Project>"
                ]
            },
            "dotnet/test/Microsoft.AutoGen.Tests.Shared/Protos/messages.proto": {
                "before": [
                    "@@ -0,0 +1,43 @@",
                    "+syntax = \"proto3\";",
                    "+",
                    "+package tests;",
                    "+"
                ],
                "after": [
                    "+  string user_message = 2;",
                    "+}",
                    "+message Shutdown {",
                    "+      string message = 1;",
                    "+}"
                ]
            },
            "dotnet/website/articles/Agent-overview.md": {
                "before": [
                    "@@ -16,16 +16,16 @@ To chat with an agent, typically you can invoke @AutoGen.Core.IAgent.GenerateRep",
                    " > AutoGen provides a list of built-in message types like @AutoGen.Core.TextMessage, @AutoGen.Core.ImageMessage, @AutoGen.Core.MultiModalMessage, @AutoGen.Core.ToolCallMessage, @AutoGen.Core.ToolCallResultMessage, etc. You can use these message types to chat with an agent. For further details, see [built-in messages](./Built-in-messages.md).",
                    " ",
                    " - Send a @AutoGen.Core.TextMessage to an agent via @AutoGen.Core.IAgent.GenerateReplyAsync*:",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/AgentCodeSnippet.cs?name=ChatWithAnAgent_GenerateReplyAsync)]"
                ],
                "after": [
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/AgentCodeSnippet.cs?name=ChatWithAnAgent_GenerateStreamingReplyAsync)]",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/CodeSnippet/AgentCodeSnippet.cs?name=ChatWithAnAgent_GenerateStreamingReplyAsync)]",
                    " ",
                    " ## Register middleware to an agent",
                    " @AutoGen.Core.IMiddleware and @AutoGen.Core.IStreamingMiddleware are used to extend the behavior of @AutoGen.Core.IAgent.GenerateReplyAsync* and @AutoGen.Core.IStreamingAgent.GenerateStreamingReplyAsync*. You can register middleware to an agent to customize the behavior of the agent on things like function call support, converting message of different types, print message, gather user input, etc."
                ]
            },
            "dotnet/website/articles/AutoGen-Mistral-Overview.md": {
                "before": [
                    "@@ -17,10 +17,10 @@ dotnet add package AutoGen.Mistral",
                    " ### Example",
                    " ",
                    " Import the required namespace",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/MistralAICodeSnippet.cs?name=using_statement)]"
                ],
                "after": [
                    " Use @AutoGen.Core.IStreamingAgent.GenerateStreamingReplyAsync* to stream the chat completion.",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/MistralAICodeSnippet.cs?name=streaming_chat)]",
                    "\\ No newline at end of file",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/CodeSnippet/MistralAICodeSnippet.cs?name=streaming_chat)]",
                    "\\ No newline at end of file"
                ]
            },
            "dotnet/website/articles/AutoGen.SemanticKernel/SemanticKernelAgent-simple-chat.md": {
                "before": [
                    "@@ -2,8 +2,8 @@ You can chat with @AutoGen.SemanticKernel.SemanticKernelAgent using both streami",
                    " ",
                    " The following example shows how to create an @AutoGen.SemanticKernel.SemanticKernelAgent and chat with it using non-streaming method:",
                    " ",
                    "-[!code-csharp[](../../../samples/AutoGen.BasicSamples/CodeSnippet/SemanticKernelCodeSnippet.cs?name=create_semantic_kernel_agent)]"
                ],
                "after": [
                    " ",
                    " @AutoGen.SemanticKernel.SemanticKernelAgent also supports streaming chat via @AutoGen.Core.IStreamingAgent.GenerateStreamingReplyAsync*.",
                    " ",
                    "-[!code-csharp[](../../../samples/AutoGen.BasicSamples/CodeSnippet/SemanticKernelCodeSnippet.cs?name=create_semantic_kernel_agent_streaming)]",
                    "+[!code-csharp[](../../../samples/AgentChat/Autogen.Basic.Sample/CodeSnippet/SemanticKernelCodeSnippet.cs?name=create_semantic_kernel_agent_streaming)]"
                ]
            },
            "dotnet/website/articles/AutoGen.SemanticKernel/SemanticKernelAgent-support-more-messages.md": {
                "before": [
                    "@@ -7,4 +7,4 @@",
                    " >",
                    " > Function call message type like @AutoGen.Core.ToolCallMessage and @AutoGen.Core.ToolCallResultMessage are not supported yet.",
                    " ",
                    "-[!code-csharp[](../../../samples/AutoGen.BasicSamples/CodeSnippet/SemanticKernelCodeSnippet.cs?name=register_semantic_kernel_chat_message_content_connector)]"
                ],
                "after": [
                    " ",
                    "-[!code-csharp[](../../../samples/AutoGen.BasicSamples/CodeSnippet/SemanticKernelCodeSnippet.cs?name=register_semantic_kernel_chat_message_content_connector)]",
                    "\\ No newline at end of file",
                    "+[!code-csharp[](../../../samples/AgentChat/Autogen.Basic.Sample/CodeSnippet/SemanticKernelCodeSnippet.cs?name=register_semantic_kernel_chat_message_content_connector)]",
                    "\\ No newline at end of file"
                ]
            },
            "dotnet/website/articles/Built-in-messages.md": {
                "before": [
                    "@@ -30,8 +30,8 @@ AutoGen also introduces @AutoGen.Core.IStreamingMessage and @AutoGen.Core.IStrea",
                    " #### Usage",
                    " ",
                    " The below code snippet shows how to print a streaming update to console and update the final result on the caller side.",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/BuildInMessageCodeSnippet.cs?name=StreamingCallCodeSnippet)]"
                ],
                "after": [
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/BuildInMessageCodeSnippet.cs?name=StreamingCallWithFinalMessage)]",
                    "\\ No newline at end of file",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/CodeSnippet/BuildInMessageCodeSnippet.cs?name=StreamingCallWithFinalMessage)]",
                    "\\ No newline at end of file"
                ]
            },
            "dotnet/website/articles/Consume-LLM-server-from-LM-Studio.md": {
                "before": [
                    "@@ -16,5 +16,5 @@ You can use @AutoGen.LMStudio.LMStudioAgent from `AutoGen.LMStudio` package to c",
                    " ### Usage",
                    " The following code shows how to use `LMStudioAgent` to write a piece of C# code to calculate 100th of fibonacci. Before running the code, make sure you have local server from LM Studio running on `localhost:1234`.",
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/Example08_LMStudio.cs?name=lmstudio_using_statements)]"
                ],
                "after": [
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/Example08_LMStudio.cs?name=lmstudio_using_statements)]",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/Example08_LMStudio.cs?name=lmstudio_example_1)]",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/Example08_LMStudio.cs?name=lmstudio_using_statements)]",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/Example08_LMStudio.cs?name=lmstudio_example_1)]"
                ]
            },
            "dotnet/website/articles/Create-a-user-proxy-agent.md": {
                "before": [
                    "@@ -10,7 +10,7 @@",
                    " ",
                    " ### Create a `UserProxyAgent` with `HumanInputMode` set to `ALWAYS`",
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/UserProxyAgentCodeSnippet.cs?name=code_snippet_1)]"
                ],
                "after": [
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/CodeSnippet/UserProxyAgentCodeSnippet.cs?name=code_snippet_1)]",
                    " ",
                    " When running the code, the user proxy agent will ask user for input and use the input as response.",
                    " ![code output](../images/articles/CreateUserProxyAgent/image-1.png)",
                    "\\ No newline at end of file"
                ]
            },
            "dotnet/website/articles/Create-an-agent.md": {
                "before": [
                    "@@ -4,8 +4,8 @@",
                    " ",
                    " ## Create an `AssistantAgent` using OpenAI model.",
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/CreateAnAgent.cs?name=code_snippet_1)]"
                ],
                "after": [
                    " ",
                    " ## Create an `AssistantAgent` using Azure OpenAI model.",
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/CreateAnAgent.cs?name=code_snippet_2)]",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/CodeSnippet/CreateAnAgent.cs?name=code_snippet_2)]"
                ]
            },
            "dotnet/website/articles/Create-type-safe-function-call.md": {
                "before": [
                    "@@ -25,11 +25,11 @@ Then, create a `public partial` class to host the methods you want to use in Aut",
                    " ",
                    " Firstly, import the required namespaces:",
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/TypeSafeFunctionCallCodeSnippet.cs?name=weather_report_using_statement)]"
                ],
                "after": [
                    " ",
                    " The following code shows how to generate openai function definition from the @AutoGen.Core.FunctionContract and call the function using the function call wrapper.",
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/TypeSafeFunctionCallCodeSnippet.cs?name=weather_report_consume)]",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/CodeSnippet/TypeSafeFunctionCallCodeSnippet.cs?name=weather_report_consume)]"
                ]
            },
            "dotnet/website/articles/Group-chat.md": {
                "before": [
                    "@@ -33,7 +33,7 @@ flowchart LR",
                    " ",
                    " The code below shows how to create a dynamic group chat with @AutoGen.Core.GroupChat. In this example, we will create a dynamic group chat with 4 agents: `admin`, `coder`, `reviewer` and `runner`. In this case we don't pass a workflow to the group chat, so the group chat will use driven by the admin agent.",
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/Example07_Dynamic_GroupChat_Calculate_Fibonacci.cs?name=create_group_chat)]"
                ],
                "after": [
                    " > [!TIP]",
                    " > `AutoGen` provides a built-in support for running code snippet. For more information, please check out [Execute code snippet](./Run-dotnet-code.md).",
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/Example07_Dynamic_GroupChat_Calculate_Fibonacci.cs?name=create_runner)]",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/Example07_Dynamic_GroupChat_Calculate_Fibonacci.cs?name=create_runner)]"
                ]
            },
            "dotnet/website/articles/Middleware-overview.md": {
                "before": [
                    "@@ -8,20 +8,20 @@ Here are a few examples of how middleware is used in AutoGen.Net:",
                    " To use middleware in an existing agent, you can either create a @AutoGen.Core.MiddlewareAgent on top of the original agent or register middleware functions to the original agent.",
                    " ",
                    " ### Create @AutoGen.Core.MiddlewareAgent on top of the original agent",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/MiddlewareAgentCodeSnippet.cs?name=create_middleware_agent_with_original_agent)]"
                ],
                "after": [
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/MiddlewareAgentCodeSnippet.cs?name=register_streaming_middleware)]",
                    "\\ No newline at end of file",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/CodeSnippet/MiddlewareAgentCodeSnippet.cs?name=register_streaming_middleware)]",
                    "\\ No newline at end of file"
                ]
            },
            "dotnet/website/articles/MistralChatAgent-count-token-usage.md": {
                "before": [
                    "@@ -4,22 +4,22 @@ The following example shows how to create a `MistralAITokenCounterMiddleware` @A",
                    " To collect the token usage for the entire chat session, one easy solution is simply collect all the responses from agent and sum up the token usage for each response. To collect all the agent responses, we can create a middleware which simply saves all responses to a list and register it with the agent. To get the token usage information for each response, because in the example we are using @AutoGen.Mistral.MistralClientAgent, we can simply get the token usage from the response object.",
                    " ",
                    " > [!NOTE]",
                    "-> You can find the complete example in the [Example13_OpenAIAgent_JsonMode](https://github.com/microsoft/autogen/tree/main/dotnet/samples/AutoGen.BasicSamples/Example14_MistralClientAgent_TokenCount.cs)."
                ],
                "after": [
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/Example14_MistralClientAgent_TokenCount.cs?name=chat_with_agent)]",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/Example14_MistralClientAgent_TokenCount.cs?name=chat_with_agent)]",
                    " ",
                    " ### Output",
                    " When running the example, the completion token count will be printed to the console."
                ]
            },
            "dotnet/website/articles/MistralChatAgent-use-function-call.md": {
                "before": [
                    "@@ -18,24 +18,24 @@ dotnet add package AutoGen.SourceGenerator",
                    " > If you are using VSCode as your editor, you may need to restart the editor to see the generated code.",
                    " ",
                    " Import the required namespace",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/MistralAICodeSnippet.cs?name=using_statement)]"
                ],
                "after": [
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/MistralAICodeSnippet.cs?name=send_message_with_function_call)]",
                    "\\ No newline at end of file",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/CodeSnippet/MistralAICodeSnippet.cs?name=send_message_with_function_call)]",
                    "\\ No newline at end of file"
                ]
            },
            "dotnet/website/articles/OpenAIChatAgent-simple-chat.md": {
                "before": [
                    "@@ -1,11 +1,11 @@",
                    " The following example shows how to create an @AutoGen.OpenAI.OpenAIChatAgent and chat with it.",
                    " ",
                    " Firsly, import the required namespaces:",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/OpenAICodeSnippet.cs?name=using_statement)]"
                ],
                "after": [
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/OpenAICodeSnippet.cs?name=create_openai_chat_agent_streaming)]",
                    "\\ No newline at end of file",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/CodeSnippet/OpenAICodeSnippet.cs?name=create_openai_chat_agent_streaming)]",
                    "\\ No newline at end of file"
                ]
            },
            "dotnet/website/articles/OpenAIChatAgent-support-more-messages.md": {
                "before": [
                    "@@ -1,6 +1,6 @@",
                    " By default, @AutoGen.OpenAI.OpenAIChatAgent only supports the @AutoGen.Core.IMessage<T> type where `T` is original request or response message from `Azure.AI.OpenAI`. To support more AutoGen built-in message types like @AutoGen.Core.TextMessage, @AutoGen.Core.ImageMessage, @AutoGen.Core.MultiModalMessage and so on, you can register the agent with @AutoGen.OpenAI.OpenAIChatRequestMessageConnector. The @AutoGen.OpenAI.OpenAIChatRequestMessageConnector will convert the message from AutoGen built-in message types to `Azure.AI.OpenAI.ChatRequestMessage` and vice versa.",
                    " ",
                    " import the required namespaces:",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/OpenAICodeSnippet.cs?name=using_statement)]"
                ],
                "after": [
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/OpenAICodeSnippet.cs?name=register_openai_chat_message_connector)]",
                    "\\ No newline at end of file",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/CodeSnippet/OpenAICodeSnippet.cs?name=register_openai_chat_message_connector)]",
                    "\\ No newline at end of file"
                ]
            },
            "dotnet/website/articles/OpenAIChatAgent-use-function-call.md": {
                "before": [
                    "@@ -15,19 +15,19 @@ Firstly, you need to install the following packages:",
                    " > If you are using VSCode as your editor, you may need to restart the editor to see the generated code.",
                    " ",
                    " Firstly, import the required namespaces:",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/OpenAICodeSnippet.cs?name=using_statement)]"
                ],
                "after": [
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/OpenAICodeSnippet.cs?name=chat_agent_send_function_call)]",
                    "\\ No newline at end of file",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/CodeSnippet/OpenAICodeSnippet.cs?name=chat_agent_send_function_call)]",
                    "\\ No newline at end of file"
                ]
            },
            "dotnet/website/articles/Print-message-middleware.md": {
                "before": [
                    "@@ -13,7 +13,7 @@",
                    " ## Use @AutoGen.Core.PrintMessageMiddleware in an agent",
                    " You can use @AutoGen.Core.PrintMessageMiddlewareExtension.RegisterPrintMessage* to register the @AutoGen.Core.PrintMessageMiddleware to an agent.",
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/PrintMessageMiddlewareCodeSnippet.cs?name=PrintMessageMiddleware)]"
                ],
                "after": [
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/PrintMessageMiddlewareCodeSnippet.cs?name=print_message_streaming)]",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/CodeSnippet/PrintMessageMiddlewareCodeSnippet.cs?name=print_message_streaming)]",
                    " ",
                    " ![image](../images/articles/PrintMessageMiddleware/streamingoutput.gif)"
                ]
            },
            "dotnet/website/articles/Roundrobin-chat.md": {
                "before": [
                    "@@ -10,23 +10,23 @@ flowchart LR",
                    " ```",
                    " ",
                    " > [!NOTE]",
                    "-> Complete code can be found in [Example11_Sequential_GroupChat_Example](https://github.com/microsoft/autogen/blob/dotnet/dotnet/samples/AutoGen.BasicSamples/Example11_Sequential_GroupChat_Example.cs);"
                ],
                "after": [
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/Example11_Sequential_GroupChat_Example.cs?name=Sequential_GroupChat_Example)]",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/Example11_Sequential_GroupChat_Example.cs?name=Sequential_GroupChat_Example)]",
                    " ",
                    " Output:",
                    " "
                ]
            },
            "dotnet/website/articles/Run-dotnet-code.md": {
                "before": [
                    "@@ -6,7 +6,7 @@ More languages will be supported in the future.",
                    " ## What is a code snippet?",
                    " A code snippet in agent response is a code block with a language identifier. For example:",
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/RunCodeSnippetCodeSnippet.cs?name=code_snippet_1_3)]"
                ],
                "after": [
                    " You can refer to the following examples for running code snippet in agentic workflow:",
                    "-- Dynamic_GroupChat_Coding_Task:  [![](https://img.shields.io/badge/Open%20on%20Github-grey?logo=github)](https://github.com/microsoft/autogen/blob/main/dotnet/samples/AutoGen.BasicSample/Example04_Dynamic_GroupChat_Coding_Task.cs)",
                    "-- Dynamic_GroupChat_Calculate_Fibonacci: [![](https://img.shields.io/badge/Open%20on%20Github-grey?logo=github)](https://github.com/microsoft/autogen/blob/main/dotnet/samples/AutoGen.BasicSample/Example07_Dynamic_GroupChat_Calculate_Fibonacci.cs)",
                    "+- Dynamic_GroupChat_Coding_Task:  [![](https://img.shields.io/badge/Open%20on%20Github-grey?logo=github)](https://github.com/microsoft/autogen/blob/main/dotnet/samples/AutoGen.Basic.Sample/Example04_Dynamic_GroupChat_Coding_Task.cs)",
                    "+- Dynamic_GroupChat_Calculate_Fibonacci: [![](https://img.shields.io/badge/Open%20on%20Github-grey?logo=github)](https://github.com/microsoft/autogen/blob/main/dotnet/samples/AutoGen.Basic.Sample/Example07_Dynamic_GroupChat_Calculate_Fibonacci.cs)"
                ]
            },
            "dotnet/website/articles/Two-agent-chat.md": {
                "before": [
                    "@@ -16,4 +16,4 @@ The following example shows how to start a conversation between the teacher agen",
                    " > [!NOTE]",
                    " > The teacher agent uses @AutoGen.Core.MiddlewareExtension.RegisterPostProcess* to register a post process function which returns a hard-coded termination message when a certain condition is met. Comparing with putting the @AutoGen.Core.GroupChatExtension.TERMINATE keyword in the prompt, this approach is more robust especially when a weaker LLM model is used.",
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/Example02_TwoAgent_MathChat.cs?name=code_snippet_1)]"
                ],
                "after": [
                    " > [!NOTE]",
                    " > The teacher agent uses @AutoGen.Core.MiddlewareExtension.RegisterPostProcess* to register a post process function which returns a hard-coded termination message when a certain condition is met. Comparing with putting the @AutoGen.Core.GroupChatExtension.TERMINATE keyword in the prompt, this approach is more robust especially when a weaker LLM model is used.",
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/Example02_TwoAgent_MathChat.cs?name=code_snippet_1)]",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/Example02_TwoAgent_MathChat.cs?name=code_snippet_1)]"
                ]
            },
            "dotnet/website/articles/Use-function-call.md": {
                "before": [
                    "@@ -12,32 +12,32 @@ Typically, there are three ways to pass a function definition to an agent to ena",
                    " In some agents like @AutoGen.AssistantAgent or @AutoGen.OpenAI.GPTAgent, you can pass function definitions when creating the agent",
                    " ",
                    " Suppose the `TypeSafeFunctionCall` is defined in the following code snippet:",
                    "-[!code-csharp[TypeSafeFunctionCall](../../samples/AutoGen.BasicSamples/CodeSnippet/TypeSafeFunctionCallCodeSnippet.cs?name=weather_report)]"
                ],
                "after": [
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/FunctionCallCodeSnippet.cs?name=two_agent_weather_chat)]",
                    "\\ No newline at end of file",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/CodeSnippet/FunctionCallCodeSnippet.cs?name=two_agent_weather_chat)]",
                    "\\ No newline at end of file"
                ]
            },
            "dotnet/website/articles/Use-graph-in-group-chat.md": {
                "before": [
                    "@@ -18,8 +18,8 @@ The following code shows how to create a graph that represents the diagram above",
                    " > [!TIP]",
                    " > @AutoGen.Core.Graph supports conditional transitions. To create a conditional transition, you can pass a lambda function to `canTransitionAsync` when creating a @AutoGen.Core.Transition. The lambda function should return a boolean value indicating if the transition can be taken.",
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/Example07_Dynamic_GroupChat_Calculate_Fibonacci.cs?name=create_workflow)]"
                ],
                "after": [
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/Example07_Dynamic_GroupChat_Calculate_Fibonacci.cs?name=create_group_chat_with_workflow)]",
                    "\\ No newline at end of file",
                    "+[!code-csharp[](../../samples/AgentChat/Autogen.Basic.Sample/Example07_Dynamic_GroupChat_Calculate_Fibonacci.cs?name=create_group_chat_with_workflow)]",
                    "\\ No newline at end of file"
                ]
            },
            "dotnet/website/articles/getting-start.md": {
                "before": [
                    "@@ -13,13 +13,13 @@ dotnet add package AutoGen",
                    " ",
                    " Then you can start with the following code snippet to create a conversable agent and chat with it.",
                    " ",
                    "-[!code-csharp[](../../samples/AutoGen.BasicSamples/CodeSnippet/GetStartCodeSnippet.cs?name=snippet_GetStartCodeSnippet)]"
                ],
                "after": [
                    "-You can find more examples under the [sample project](https://github.com/microsoft/autogen/tree/dotnet/dotnet/samples/AutoGen.BasicSamples).",
                    "+You can find more examples under the [sample project](https://github.com/microsoft/autogen/tree/dotnet/dotnet/samples/AgentChat/Autogen.Basic.Sample).",
                    " ",
                    " ### Report a bug or request a feature",
                    " You can report a bug or request a feature by creating a new issue in the [github issue](https://github.com/microsoft/autogen/issues) and specifying label the label \"donet\" "
                ]
            },
            "dotnet/website/release_note/0.0.16.md": {
                "before": [
                    "@@ -18,7 +18,7 @@ We are excited to announce the release of **AutoGen.Net 0.0.16**. This release i",
                    " 3. **AutoGen.SourceGenerator doesn\u2019t encode `\"` in structural comments** ([#2872](https://github.com/microsoft/autogen/issues/2872)) - Fixed an issue where structural comments containing `\"` were not properly encoded, leading to compilation errors.",
                    " ",
                    " ## \ud83d\ude80 Improvements",
                    "-1. **Sample update - Add getting-start samples for BasicSample project** ([#2859](https://github.com/microsoft/autogen/issues/2859)) - Re-organized the `AutoGen.BasicSample` project to include only essential getting-started examples, simplifying complex examples."
                ],
                "after": [
                    "-1. **Sample update - Add getting-start samples for BasicSample project** ([#2859](https://github.com/microsoft/autogen/issues/2859)) - Re-organized the `AutoGen.BasicSample` project to include only essential getting-started examples, simplifying complex examples.",
                    "+1. **Sample update - Add getting-start samples for Basic.Sample project** ([#2859](https://github.com/microsoft/autogen/issues/2859)) - Re-organized the `AutoGen.Basic.Sample` project to include only essential getting-started examples, simplifying complex examples.",
                    " 2. **Graph constructor should consider null transitions** ([#2708](https://github.com/microsoft/autogen/issues/2708)) - Updated the Graph constructor to handle cases where transitions\u2019 values are null.",
                    " ",
                    " ## \u26a0\ufe0f API-Breakchange"
                ]
            },
            "dotnet/website/tutorial/Chat-with-an-agent.md": {
                "before": [
                    "@@ -11,7 +11,7 @@ This tutorial shows how to generate response using an @AutoGen.Core.IAgent by ta",
                    " > - @AutoGen.Gemini.GeminiChatAgent",
                    " ",
                    " > [!NOTE]",
                    "-> The complete code example can be found in [Chat_With_Agent.cs](https://github.com/microsoft/autogen/blob/main/dotnet/samples/AutoGen.BasicSamples/GettingStart/Chat_With_Agent.cs)"
                ],
                "after": [
                    "-[!code-csharp[Generate Streaming Response](../../samples/AutoGen.BasicSamples/GettingStart/Chat_With_Agent.cs?name=Streaming_Chat)]",
                    "+[!code-csharp[Generate Streaming Response](../../samples/AgentChat/Autogen.Basic.Sample/GettingStart/Chat_With_Agent.cs?name=Streaming_Chat)]",
                    " ",
                    " ## Further Reading",
                    " - [Chat with google gemini](../articles/AutoGen.Gemini/Chat-with-google-gemini.md)"
                ]
            },
            "dotnet/website/tutorial/Create-agent-with-tools.md": {
                "before": [
                    "@@ -14,7 +14,7 @@ Tools are pre-defined functions in user's project that agent can invoke. Agent c",
                    " > This tutorial uses the latest `GPT-3.5-turbo` as example.",
                    " ",
                    " > [!NOTE]",
                    "-> The complete code example can be found in [Use_Tools_With_Agent.cs](https://github.com/microsoft/autogen/blob/main/dotnet/samples/AutoGen.BasicSamples/GettingStart/Use_Tools_With_Agent.cs)"
                ],
                "after": [
                    "-[!code-csharp[Generate Response](../../samples/AutoGen.BasicSamples/GettingStart/Use_Tools_With_Agent.cs?name=parallel_tool_call)]",
                    "+[!code-csharp[Generate Response](../../samples/AgentChat/Autogen.Basic.Sample/GettingStart/Use_Tools_With_Agent.cs?name=parallel_tool_call)]",
                    " ",
                    " ## Further Reading",
                    " - [Function call with openai](../articles/OpenAIChatAgent-use-function-call.md)"
                ]
            },
            "dotnet/website/tutorial/Image-chat-with-agent.md": {
                "before": [
                    "@@ -11,7 +11,7 @@ This tutorial shows how to perform image chat with an agent using the @AutoGen.O",
                    " > In this example, we are using the gpt-4o model as the backend model for the agent.",
                    " ",
                    " > [!NOTE]",
                    "-> The complete code example can be found in [Image_Chat_With_Agent.cs](https://github.com/microsoft/autogen/blob/main/dotnet/samples/AutoGen.BasicSamples/GettingStart/Image_Chat_With_Agent.cs)"
                ],
                "after": [
                    "-[!code-csharp[Generate Response](../../samples/AutoGen.BasicSamples/GettingStart/Image_Chat_With_Agent.cs?name=Chat_With_Agent)]",
                    "+[!code-csharp[Generate Response](../../samples/AgentChat/Autogen.Basic.Sample/GettingStart/Image_Chat_With_Agent.cs?name=Chat_With_Agent)]",
                    " ",
                    " ## Further Reading",
                    " - [Image chat with gemini](../articles/AutoGen.Gemini/Image-chat-with-gemini.md)"
                ]
            },
            "protos/agent_worker.proto": {
                "before": [
                    "@@ -2,15 +2,11 @@ syntax = \"proto3\";",
                    " ",
                    " package agents;",
                    " ",
                    "-option csharp_namespace = \"Microsoft.AutoGen.Contracts\";"
                ],
                "after": [
                    "+    rpc RegisterAgent(RegisterAgentTypeRequest) returns (RegisterAgentTypeResponse);",
                    "+    rpc AddSubscription(AddSubscriptionRequest) returns (AddSubscriptionResponse);",
                    "+    rpc RemoveSubscription(RemoveSubscriptionRequest) returns (RemoveSubscriptionResponse);",
                    "+    rpc GetSubscriptions(GetSubscriptionsRequest) returns (GetSubscriptionsResponse);",
                    "+}"
                ]
            },
            "python/fixup_generated_files.py": {
                "before": [
                    "@@ -0,0 +1,35 @@",
                    "+from pathlib import Path",
                    "+from typing import Dict",
                    "+",
                    "+this_file_dir = Path(__file__).parent"
                ],
                "after": [
                    "+        for old, new in substitutions.items():",
                    "+            content = content.replace(old, new)",
                    "+",
                    "+        with open(file, \"w\") as f:",
                    "+            f.write(content)"
                ]
            },
            "python/packages/autogen-agentchat/pyproject.toml": {
                "before": [
                    "@@ -4,7 +4,7 @@ build-backend = \"hatchling.build\"",
                    " ",
                    " [project]",
                    " name = \"autogen-agentchat\"",
                    "-version = \"0.4.3\""
                ],
                "after": [
                    "-    \"autogen-core==0.4.3\",",
                    "+    \"autogen-core==0.4.5\",",
                    " ]",
                    " ",
                    " [tool.ruff]"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/agents/_assistant_agent.py": {
                "before": [
                    "@@ -22,13 +22,14 @@",
                    " from autogen_core.models import (",
                    "     AssistantMessage,",
                    "     ChatCompletionClient,",
                    "+    CreateResult,"
                ],
                "after": [
                    "             system_message=config.system_message,",
                    "+            model_client_stream=config.model_client_stream,",
                    "             reflect_on_tool_use=config.reflect_on_tool_use,",
                    "             tool_call_summary_format=config.tool_call_summary_format,",
                    "         )"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/agents/_base_chat_agent.py": {
                "before": [
                    "@@ -9,6 +9,7 @@",
                    "     AgentEvent,",
                    "     BaseChatMessage,",
                    "     ChatMessage,",
                    "+    ModelClientStreamingChunkEvent,"
                ],
                "after": [
                    "+                    continue",
                    "+                output_messages.append(message)",
                    " ",
                    "     @abstractmethod",
                    "     async def on_reset(self, cancellation_token: CancellationToken) -> None:"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/agents/_code_executor_agent.py": {
                "before": [
                    "@@ -9,22 +9,18 @@",
                    " from ._base_chat_agent import BaseChatAgent",
                    " ",
                    " ",
                    "-def _extract_markdown_code_blocks(markdown_text: str) -> List[CodeBlock]:"
                ],
                "after": [
                    "+        for match in matches:",
                    "+            language = match[0].strip() if match[0] else \"\"",
                    "+            code_content = match[1]",
                    "+            code_blocks.append(CodeBlock(code=code_content, language=language))",
                    "+        return code_blocks"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/agents/_society_of_mind_agent.py": {
                "before": [
                    "@@ -13,6 +13,7 @@",
                    "     AgentEvent,",
                    "     BaseChatMessage,",
                    "     ChatMessage,",
                    "+    ModelClientStreamingChunkEvent,"
                ],
                "after": [
                    "+                    # Skip the model client streaming chunk events.",
                    "+                    continue",
                    "                 inner_messages.append(inner_msg)",
                    "         assert result is not None",
                    " "
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/base/_handoff.py": {
                "before": [
                    "@@ -1,7 +1,7 @@",
                    " import logging",
                    " from typing import Any, Dict",
                    " ",
                    "-from autogen_core.tools import FunctionTool, Tool"
                ],
                "after": [
                    "-    def handoff_tool(self) -> Tool:",
                    "+    def handoff_tool(self) -> BaseTool[BaseModel, BaseModel]:",
                    "         \"\"\"Create a handoff tool from this handoff configuration.\"\"\"",
                    " ",
                    "         def _handoff_tool() -> str:"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/messages.py": {
                "before": [
                    "@@ -128,14 +128,27 @@ class MemoryQueryEvent(BaseAgentEvent):",
                    "     type: Literal[\"MemoryQueryEvent\"] = \"MemoryQueryEvent\"",
                    " ",
                    " ",
                    "+class ModelClientStreamingChunkEvent(BaseAgentEvent):"
                ],
                "after": [
                    "     \"ToolCallSummaryMessage\",",
                    "     \"MemoryQueryEvent\",",
                    "     \"UserInputRequestedEvent\",",
                    "+    \"ModelClientStreamingChunkEvent\",",
                    " ]"
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/teams/_group_chat/_base_group_chat.py": {
                "before": [
                    "@@ -21,7 +21,7 @@",
                    " ",
                    " from ... import EVENT_LOGGER_NAME",
                    " from ...base import ChatAgent, TaskResult, Team, TerminationCondition",
                    "-from ...messages import AgentEvent, BaseChatMessage, ChatMessage, TextMessage"
                ],
                "after": [
                    "+                    # Skip the model client streaming chunk events.",
                    "+                    continue",
                    "                 output_messages.append(message)",
                    " ",
                    "             # Yield the final result."
                ]
            },
            "python/packages/autogen-agentchat/src/autogen_agentchat/ui/_console.py": {
                "before": [
                    "@@ -10,7 +10,13 @@",
                    " ",
                    " from autogen_agentchat.agents import UserProxyAgent",
                    " from autogen_agentchat.base import Response, TaskResult",
                    "-from autogen_agentchat.messages import AgentEvent, ChatMessage, MultiModalMessage, UserInputRequestedEvent"
                ],
                "after": [
                    "+                    total_usage.completion_tokens += message.models_usage.completion_tokens",
                    "+                    total_usage.prompt_tokens += message.models_usage.prompt_tokens",
                    " ",
                    "     if last_processed is None:",
                    "         raise ValueError(\"No TaskResult or Response was processed.\")"
                ]
            },
            "python/packages/autogen-agentchat/tests/test_assistant_agent.py": {
                "before": [
                    "@@ -11,6 +11,7 @@",
                    "     ChatMessage,",
                    "     HandoffMessage,",
                    "     MemoryQueryEvent,",
                    "+    ModelClientStreamingChunkEvent,"
                ],
                "after": [
                    "+                FunctionExecutionResult(call_id=\"3\", content=\"task\"),",
                    "+            ]",
                    "+        elif isinstance(message, ModelClientStreamingChunkEvent):",
                    "+            chunks.append(message.content)",
                    "+    assert \"\".join(chunks) == \"Example response 2 to task\""
                ]
            },
            "python/packages/autogen-core/docs/src/conf.py": {
                "before": [
                    "@@ -175,6 +175,9 @@",
                    " rediraffe_redirects = {",
                    "     \"user-guide/agentchat-user-guide/tutorial/selector-group-chat.ipynb\": \"user-guide/agentchat-user-guide/selector-group-chat.ipynb\",",
                    "     \"user-guide/agentchat-user-guide/tutorial/swarm.ipynb\": \"user-guide/agentchat-user-guide/swarm.ipynb\",",
                    "+    \"user-guide/core-user-guide/framework/command-line-code-executors.ipynb\": \"user-guide/core-user-guide/components/command-line-code-executors.ipynb\","
                ],
                "after": [
                    "+    \"user-guide/core-user-guide/framework/model-clients.ipynb\": \"user-guide/core-user-guide/components/model-clients.ipynb\",",
                    "+    \"user-guide/core-user-guide/framework/tools.ipynb\": \"user-guide/core-user-guide/components/tools.ipynb\",",
                    " }",
                    " ",
                    " "
                ]
            },
            "python/packages/autogen-core/docs/src/reference/index.md": {
                "before": [
                    "@@ -51,6 +51,7 @@ python/autogen_ext.teams.magentic_one",
                    " python/autogen_ext.models.cache",
                    " python/autogen_ext.models.openai",
                    " python/autogen_ext.models.replay",
                    "+python/autogen_ext.models.azure"
                ],
                "after": [
                    " python/autogen_ext.models.replay",
                    "+python/autogen_ext.models.azure",
                    " python/autogen_ext.models.semantic_kernel",
                    " python/autogen_ext.tools.langchain",
                    " python/autogen_ext.tools.graphrag"
                ]
            },
            "python/packages/autogen-core/docs/src/reference/python/autogen_ext.models.azure.rst": {
                "before": [
                    "@@ -0,0 +1,8 @@",
                    "+autogen\\_ext.models.azure",
                    "+==========================",
                    "+",
                    "+"
                ],
                "after": [
                    "+",
                    "+.. automodule:: autogen_ext.models.azure",
                    "+   :members:",
                    "+   :undoc-members:",
                    "+   :show-inheritance:"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/agentchat-user-guide/examples/literature-review.ipynb": {
                "before": [
                    "@@ -10,7 +10,7 @@",
                    "                 \"\\n\",",
                    "                 \"- **Arxiv Search Agent**: Use the Arxiv API to search for papers related to a given topic and return results.\\n\",",
                    "                 \"- **Google Search Agent**: Use the Google Search api to find papers related to a given topic and return results.\\n\",",
                    "-                \"- **Report Agent**: Generate a report based on the information collected by the search and stock analysis agents.\\n\","
                ],
                "after": [
                    "-                \"- **Report Agent**: Generate a report based on the information collected by the search and stock analysis agents.\\n\",",
                    "+                \"- **Report Agent**: Generate a report based on the information collected by the arxviv search and Google search agents.\\n\",",
                    "                 \"\\n\",",
                    "                 \"\\n\",",
                    "                 \"First, let us import the necessary modules. \""
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/agentchat-user-guide/migration-guide.md": {
                "before": [
                    "@@ -35,6 +35,7 @@ See each feature below for detailed information on how to migrate.",
                    " ",
                    " - [Model Client](#model-client)",
                    " - [Model Client for OpenAI-Compatible APIs](#model-client-for-openai-compatible-apis)",
                    "+- [Model Client Cache](#model-client-cache)"
                ],
                "after": [
                    "-See [Command Line Code Executors Tutorial](../core-user-guide/framework/command-line-code-executors.ipynb)",
                    "+See [Command Line Code Executors Tutorial](../core-user-guide/components/command-line-code-executors.ipynb)",
                    " in the Core API documentation.",
                    " ",
                    " We also added `AzureContainerCodeExecutor` that can use Azure Container Apps (ACA)"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/agentchat-user-guide/tutorial/agents.ipynb": {
                "before": [
                    "@@ -35,9 +35,15 @@",
                    "     \"from autogen_agentchat.messages import TextMessage\\n\",",
                    "     \"from autogen_agentchat.ui import Console\\n\",",
                    "     \"from autogen_core import CancellationToken\\n\",",
                    "-    \"from autogen_ext.models.openai import OpenAIChatCompletionClient\\n\","
                ],
                "after": [
                    "+   ]",
                    "+  },",
                    "   {",
                    "    \"cell_type\": \"markdown\",",
                    "    \"metadata\": {},"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/agentchat-user-guide/tutorial/human-in-the-loop.ipynb": {
                "before": [
                    "@@ -289,7 +289,7 @@",
                    "   },",
                    "   {",
                    "    \"cell_type\": \"code\",",
                    "-   \"execution_count\": 4,"
                ],
                "after": [
                    "-   \"version\": \"3.11.5\"",
                    "+   \"version\": \"3.12.7\"",
                    "   }",
                    "  },",
                    "  \"nbformat\": 4,"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/agentchat-user-guide/tutorial/models.ipynb": {
                "before": [
                    "@@ -1,191 +1,448 @@",
                    " {",
                    "-    \"cells\": [",
                    "-        {",
                    "-            \"cell_type\": \"markdown\","
                ],
                "after": [
                    "+  }",
                    "+ },",
                    "+ \"nbformat\": 4,",
                    "+ \"nbformat_minor\": 2",
                    " }"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/autogenstudio-user-guide/usage.md": {
                "before": [
                    "@@ -14,43 +14,89 @@ After defining a team, users can test it in the Playground view to accomplish va",
                    " ",
                    " ## Declarative Specification of Componenents",
                    " ",
                    "-AutoGen Studio uses a declarative specification system to build its GUI components. At runtime, the AGS API loads these specifications into AutoGen AgentChat objects to address tasks."
                ],
                "after": [
                    "-```",
                    "+This example shows a team with a single agent, using the `RoundRobinGroupChat` type and a `TextMentionTermination` condition.",
                    " ",
                    " ## Building an Agent Team",
                    " "
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/core-user-guide/components/model-clients.ipynb": {
                "before": [
                    "@@ -6,23 +6,47 @@",
                    "    \"source\": [",
                    "     \"# Model Clients\\n\",",
                    "     \"\\n\",",
                    "-    \"AutoGen provides the {py:mod}`autogen_core.models` module with a suite of built-in\\n\","
                ],
                "after": [
                    "-   \"version\": \"3.12.1\"",
                    "+   \"version\": \"3.12.7\"",
                    "   }",
                    "  },",
                    "  \"nbformat\": 4,"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/core-user-guide/components/model-context.ipynb": {
                "before": [
                    "@@ -0,0 +1,190 @@",
                    "+{",
                    "+ \"cells\": [",
                    "+  {",
                    "+   \"cell_type\": \"markdown\","
                ],
                "after": [
                    "+  }",
                    "+ },",
                    "+ \"nbformat\": 4,",
                    "+ \"nbformat_minor\": 2",
                    "+}"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/core-user-guide/design-patterns/intro.md": {
                "before": [
                    "@@ -9,7 +9,7 @@ like software development.",
                    " ",
                    " A multi-agent design pattern is a structure that emerges from message protocols:",
                    " it describes how agents interact with each other to solve problems.",
                    "-For example, the [tool-equipped agent](../framework/tools.ipynb#tool-equipped-agent) in"
                ],
                "after": [
                    "-For example, the [tool-equipped agent](../framework/tools.ipynb#tool-equipped-agent) in",
                    "+For example, the [tool-equipped agent](../components/tools.ipynb#tool-equipped-agent) in",
                    " the previous section employs a design pattern called ReAct,",
                    " which involves an agent interacting with tools.",
                    " "
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/core-user-guide/framework/agent-and-agent-runtime.ipynb": {
                "before": [
                    "@@ -1,345 +1,345 @@",
                    " {",
                    "- \"cells\": [",
                    "-  {",
                    "-   \"cell_type\": \"markdown\","
                ],
                "after": [
                    "+        }",
                    "+    },",
                    "+    \"nbformat\": 4,",
                    "+    \"nbformat_minor\": 2",
                    " }"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/core-user-guide/framework/telemetry.md": {
                "before": [
                    "@@ -53,7 +53,7 @@ worker_runtime = GrpcWorkerAgentRuntime(tracer_provider=tracer_provider)",
                    " ",
                    " And that's it! Your application is now instrumented with open telemetry. You can now view your telemetry data in your telemetry backend.",
                    " ",
                    "-### Exisiting instrumentation"
                ],
                "after": [
                    "-### Exisiting instrumentation",
                    "+### Existing instrumentation",
                    " ",
                    " If you have open telemetry already set up in your application, you can pass the tracer provider to the runtime when creating it:",
                    " ```python"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/core-user-guide/index.md": {
                "before": [
                    "@@ -34,15 +34,23 @@ core-concepts/topic-and-subscription",
                    " ",
                    " framework/agent-and-agent-runtime",
                    " framework/message-and-communication",
                    "-framework/model-clients"
                ],
                "after": [
                    "+```",
                    "+",
                    " ```{toctree}",
                    " :maxdepth: 1",
                    " :hidden:"
                ]
            },
            "python/packages/autogen-core/docs/src/user-guide/core-user-guide/installation.md": {
                "before": [
                    "@@ -81,5 +81,5 @@ pip install \"autogen-ext[azure]\"",
                    " We recommend using Docker to use {py:class}`~autogen_ext.code_executors.docker.DockerCommandLineCodeExecutor` for execution of model-generated code.",
                    " To install Docker, follow the instructions for your operating system on the [Docker website](https://docs.docker.com/get-docker/).",
                    " ",
                    "-To learn more code execution, see [Command Line Code Executors](./framework/command-line-code-executors.ipynb)"
                ],
                "after": [
                    " To install Docker, follow the instructions for your operating system on the [Docker website](https://docs.docker.com/get-docker/).",
                    " ",
                    "-To learn more code execution, see [Command Line Code Executors](./framework/command-line-code-executors.ipynb)",
                    "+To learn more code execution, see [Command Line Code Executors](./components/command-line-code-executors.ipynb)",
                    " and [Code Execution](./design-patterns/code-execution-groupchat.ipynb)."
                ]
            },
            "python/packages/autogen-core/pyproject.toml": {
                "before": [
                    "@@ -4,7 +4,7 @@ build-backend = \"hatchling.build\"",
                    " ",
                    " [project]",
                    " name = \"autogen-core\"",
                    "-version = \"0.4.3\""
                ],
                "after": [
                    "-    \"autogen_ext==0.4.3\",",
                    "+    \"autogen_ext==0.4.5\",",
                    " ",
                    "     # Documentation tooling",
                    "     \"diskcache\","
                ]
            },
            "python/packages/autogen-core/src/autogen_core/_component_config.py": {
                "before": [
                    "@@ -33,6 +33,9 @@ class ComponentModel(BaseModel):",
                    "     description: str | None = None",
                    "     \"\"\"Description of the component.\"\"\"",
                    " ",
                    "+    label: str | None = None"
                ],
                "after": [
                    "+            description=description,",
                    "+            label=self.component_label or self.__class__.__name__,",
                    "             config=obj_config,",
                    "         )",
                    "         return model"
                ]
            },
            "python/packages/autogen-core/src/autogen_core/_function_utils.py": {
                "before": [
                    "@@ -3,6 +3,7 @@",
                    " ",
                    " import inspect",
                    " import typing",
                    "+from functools import partial"
                ],
                "after": [
                    "+    func_call = call.func if isinstance(call, partial) else call",
                    "+    type_hints = typing.get_type_hints(func_call, globalns, include_extras=True)",
                    "     typed_params = [",
                    "         inspect.Parameter(",
                    "             name=param.name,"
                ]
            },
            "python/packages/autogen-core/src/autogen_core/_single_threaded_agent_runtime.py": {
                "before": [
                    "@@ -27,7 +27,6 @@",
                    " else:",
                    "     from ._queue import Queue, QueueShutDown  # type: ignore",
                    " ",
                    "-from typing_extensions import deprecated"
                ],
                "after": [
                    "     async def process_next(self) -> None:",
                    "+        \"\"\"Process the next message in the queue.\"\"\"",
                    "         await self._process_next()",
                    " ",
                    "     async def _process_next(self) -> None:"
                ]
            },
            "python/packages/autogen-core/src/autogen_core/models/_model_client.py": {
                "before": [
                    "@@ -22,9 +22,10 @@ class ModelFamily:",
                    "     O1 = \"o1\"",
                    "     GPT_4 = \"gpt-4\"",
                    "     GPT_35 = \"gpt-35\"",
                    "+    R1 = \"r1\""
                ],
                "after": [
                    "-    ANY: TypeAlias = Literal[\"gpt-4o\", \"o1\", \"gpt-4\", \"gpt-35\", \"unknown\"]",
                    "+    ANY: TypeAlias = Literal[\"gpt-4o\", \"o1\", \"gpt-4\", \"gpt-35\", \"r1\", \"unknown\"]",
                    " ",
                    "     def __new__(cls, *args: Any, **kwargs: Any) -> ModelFamily:",
                    "         raise TypeError(f\"{cls.__name__} is a namespace class and cannot be instantiated.\")"
                ]
            },
            "python/packages/autogen-core/src/autogen_core/models/_types.py": {
                "before": [
                    "@@ -8,11 +8,25 @@",
                    " ",
                    " ",
                    " class SystemMessage(BaseModel):",
                    "+    \"\"\"System message contains instructions for the model coming from the developer."
                ],
                "after": [
                    "+    \"\"\"The logprobs of the tokens in the completion.\"\"\"",
                    "+",
                    "+    thought: Optional[str] = None",
                    "+    \"\"\"The reasoning text for the completion if available. Used for reasoning models",
                    "+    and additional text content besides function calls.\"\"\""
                ]
            },
            "python/packages/autogen-core/src/autogen_core/tools/_function_tool.py": {
                "before": [
                    "@@ -1,8 +1,8 @@",
                    " import asyncio",
                    " import functools",
                    "+import warnings",
                    " from textwrap import dedent"
                ],
                "after": [
                    "-        func_name = name or func.__name__",
                    "+        func_name = name or func.func.__name__ if isinstance(func, functools.partial) else name or func.__name__",
                    "         args_model = args_base_model_from_signature(func_name + \"args\", signature)",
                    "         return_type = signature.return_annotation",
                    "         self._has_cancellation_support = \"cancellation_token\" in signature.parameters"
                ]
            },
            "python/packages/autogen-core/tests/protos/serialization_test_pb2.py": {
                "before": [
                    "@@ -1,12 +1,22 @@",
                    " # -*- coding: utf-8 -*-",
                    " # Generated by the protocol buffer compiler.  DO NOT EDIT!",
                    "+# NO CHECKED-IN PROTOBUF GENCODE",
                    " # source: serialization_test.proto"
                ],
                "after": [
                    "+if not _descriptor._USE_C_DESCRIPTORS:",
                    "+  DESCRIPTOR._loaded_options = None",
                    "   _globals['_PROTOMESSAGE']._serialized_start=36",
                    "   _globals['_PROTOMESSAGE']._serialized_end=67",
                    "   _globals['_NESTINGPROTOMESSAGE']._serialized_start=69"
                ]
            },
            "python/packages/autogen-core/tests/protos/serialization_test_pb2_grpc.py": {
                "before": [
                    "@@ -1,4 +1,24 @@",
                    " # Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!",
                    " \"\"\"Client and server classes corresponding to protobuf-defined services.\"\"\"",
                    " import grpc",
                    "+import warnings"
                ],
                "after": [
                    "+        + f' but the generated code in serialization_test_pb2_grpc.py depends on'",
                    "+        + f' grpcio>={GRPC_GENERATED_VERSION}.'",
                    "+        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'",
                    "+        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'",
                    "+    )"
                ]
            },
            "python/packages/autogen-core/tests/test_component_config.py": {
                "before": [
                    "@@ -33,6 +33,15 @@ def _from_config(cls, config: MyConfig) -> MyComponent:",
                    "         return cls(info=config.info)",
                    " ",
                    " ",
                    "+class ComponentWithDescription(MyComponent):"
                ],
                "after": [
                    "+    \"\"\"Test different ways of setting component descriptions.\"\"\"",
                    "+    assert MyComponent(\"test\").dump_component().description is None",
                    "+    assert ComponentWithDocstring(\"test\").dump_component().description == \"A component using just docstring.\"",
                    "+    assert ComponentWithDescription(\"test\").dump_component().description == \"Explicit description\"",
                    "+    assert ComponentWithDescription(\"test\").dump_component().label == \"Custom Component\""
                ]
            },
            "python/packages/autogen-core/tests/test_tools.py": {
                "before": [
                    "@@ -1,4 +1,5 @@",
                    " import inspect",
                    "+from functools import partial",
                    " from typing import Annotated, List",
                    " "
                ],
                "after": [
                    "+",
                    "+",
                    " @pytest.mark.asyncio",
                    " async def test_tool_run() -> None:",
                    "     tool = MyTool()"
                ]
            },
            "python/packages/autogen-ext/pyproject.toml": {
                "before": [
                    "@@ -4,7 +4,7 @@ build-backend = \"hatchling.build\"",
                    " ",
                    " [project]",
                    " name = \"autogen-ext\"",
                    "-version = \"0.4.3\""
                ],
                "after": [
                    "     \"pandas-stubs>=2.2.3.241126\",",
                    "+    \"httpx>=0.28.1\",",
                    " ]",
                    " ",
                    " [tool.ruff]"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/agents/magentic_one/_magentic_one_coder_agent.py": {
                "before": [
                    "@@ -12,10 +12,9 @@",
                    "     2. When you need to perform some task with code, use the code to perform the task and output the result. Finish the task smartly.",
                    " Solve the task step by step if you need to. If a plan is not provided, explain your plan first. Be clear which step uses code, and which step uses your language skill.",
                    " When using code, you must indicate the script type in the code block. The user cannot provide any other feedback or perform any other action beyond executing the code you suggest. The user can't modify your code. So do not suggest incomplete code which requires users to modify. Don't use a code block if it's not intended to be executed by the user.",
                    "-If you want the user to save the code in a file before executing it, put # filename: <filename> inside the code block as the first line. Don't include multiple code blocks in one response. Do not ask users to copy and paste the result. Instead, use 'print' function for the output when relevant. Check the execution result returned by the user."
                ],
                "after": [
                    "-Reply \"TERMINATE\" in the end when everything is done.\"\"\"",
                    "+When you find an answer, verify the answer carefully. Include verifiable evidence in your response if possible.\"\"\"",
                    " ",
                    " ",
                    " class MagenticOneCoderAgent(AssistantAgent):"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/agents/video_surfer/_video_surfer.py": {
                "before": [
                    "@@ -2,7 +2,8 @@",
                    " ",
                    " from autogen_agentchat.agents import AssistantAgent",
                    " from autogen_core.models import ChatCompletionClient",
                    "-from autogen_core.tools import Tool"
                ],
                "after": [
                    "-        tools: List[Tool | Callable[..., Any] | Callable[..., Awaitable[Any]]] | None = None,",
                    "+        tools: List[BaseTool[BaseModel, BaseModel] | Callable[..., Any] | Callable[..., Awaitable[Any]]] | None = None,",
                    "         description: Optional[str] = None,",
                    "         system_message: Optional[str] = None,",
                    "     ):"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/models/_utils/parse_r1_content.py": {
                "before": [
                    "@@ -0,0 +1,33 @@",
                    "+import warnings",
                    "+from typing import Tuple",
                    "+",
                    "+"
                ],
                "after": [
                    "+",
                    "+    # Extract the rest of the content, skipping the think field.",
                    "+    content = content[think_end + len(\"</think>\") :].strip()",
                    "+",
                    "+    return thought, content"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/models/azure/__init__.py": {
                "before": [
                    "@@ -0,0 +1,4 @@",
                    "+from ._azure_ai_client import AzureAIChatCompletionClient",
                    "+from .config import AzureAIChatCompletionClientConfig",
                    "+",
                    "+__all__ = [\"AzureAIChatCompletionClient\", \"AzureAIChatCompletionClientConfig\"]"
                ],
                "after": [
                    "@@ -0,0 +1,4 @@",
                    "+from ._azure_ai_client import AzureAIChatCompletionClient",
                    "+from .config import AzureAIChatCompletionClientConfig",
                    "+",
                    "+__all__ = [\"AzureAIChatCompletionClient\", \"AzureAIChatCompletionClientConfig\"]"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/models/azure/_azure_ai_client.py": {
                "before": [
                    "@@ -0,0 +1,518 @@",
                    "+import asyncio",
                    "+import re",
                    "+from asyncio import Task",
                    "+from inspect import getfullargspec"
                ],
                "after": [
                    "+        # TODO: This is a hack to close the open client",
                    "+        try:",
                    "+            asyncio.get_running_loop().create_task(self._client.close())",
                    "+        except RuntimeError:",
                    "+            asyncio.run(self._client.close())"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/models/azure/config/__init__.py": {
                "before": [
                    "@@ -0,0 +1,46 @@",
                    "+from typing import Any, Dict, List, Literal, Optional, TypedDict, Union",
                    "+",
                    "+from autogen_core.models import ModelInfo",
                    "+from azure.ai.inference.models import ("
                ],
                "after": [
                    "+    model_extras: Optional[Dict[str, Any]]",
                    "+",
                    "+",
                    "+class AzureAIChatCompletionClientConfig(AzureAIClientArguments, AzureAICreateArguments):",
                    "+    pass"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/models/cache/_chat_completion_cache.py": {
                "before": [
                    "@@ -3,7 +3,7 @@",
                    " import warnings",
                    " from typing import Any, AsyncGenerator, List, Mapping, Optional, Sequence, Union, cast",
                    " ",
                    "-from autogen_core import CacheStore, CancellationToken"
                ],
                "after": [
                    "-        self.store = store",
                    "+        self.store = store or InMemoryStore[CHAT_CACHE_VALUE_TYPE]()",
                    " ",
                    "     def _check_cache(",
                    "         self,"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/models/openai/_openai_client.py": {
                "before": [
                    "@@ -72,6 +72,7 @@",
                    " from pydantic import BaseModel",
                    " from typing_extensions import Self, Unpack",
                    " ",
                    "+from .._utils.parse_r1_content import parse_r1_content"
                ],
                "after": [
                    "+                \"json_output\": False,",
                    "+                \"family\": ModelFamily.R1,",
                    "             },",
                    "         )",
                    " "
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/models/replay/_replay_chat_completion_client.py": {
                "before": [
                    "@@ -185,6 +185,9 @@ async def create_stream(",
                    "                     yield token + \" \"",
                    "                 else:",
                    "                     yield token",
                    "+            yield CreateResult("
                ],
                "after": [
                    "-                    logger.warning(\"Token count has been done only on string content\", RuntimeWarning)",
                    "+                    logger.warning(\"Token count has been done only on string content\")",
                    "         return all_tokens, total_tokens",
                    " ",
                    "     def _update_total_usage(self) -> None:"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/models/semantic_kernel/_sk_chat_completion_adapter.py": {
                "before": [
                    "@@ -25,6 +25,8 @@",
                    " ",
                    " from autogen_ext.tools.semantic_kernel import KernelFunctionFromTool",
                    " ",
                    "+from .._utils.parse_r1_content import parse_r1_content"
                ],
                "after": [
                    "                 cached=False,",
                    "+                thought=thought,",
                    "             )",
                    " ",
                    "     def actual_usage(self) -> RequestUsage:"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/runtimes/grpc/_utils.py": {
                "before": [
                    "@@ -0,0 +1,45 @@",
                    "+from autogen_core._subscription import Subscription",
                    "+from autogen_core._type_prefix_subscription import TypePrefixSubscription",
                    "+from autogen_core._type_subscription import TypeSubscription",
                    "+"
                ],
                "after": [
                    "+                agent_type=type_prefix_subscription_msg.agent_type,",
                    "+                id=subscription.id,",
                    "+            )",
                    "+        case None:",
                    "+            raise ValueError(\"Invalid subscription message.\")"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/runtimes/grpc/_worker_runtime.py": {
                "before": [
                    "@@ -1,3 +1,5 @@",
                    "+from __future__ import annotations",
                    "+",
                    " import asyncio",
                    " import inspect"
                ],
                "after": [
                    "-            future.set_result(None)",
                    "-",
                    "     async def remove_subscription(self, id: str) -> None:",
                    "         raise NotImplementedError(\"Subscriptions cannot be removed while using distributed runtime currently.\")",
                    " "
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/runtimes/grpc/_worker_runtime_host_servicer.py": {
                "before": [
                    "@@ -1,13 +1,14 @@",
                    " import asyncio",
                    " import logging",
                    "-from _collections_abc import AsyncIterator, Iterator",
                    "+from _collections_abc import AsyncIterator"
                ],
                "after": [
                    "         request: agent_worker_pb2.AgentState,",
                    "         context: grpc.aio.ServicerContext[agent_worker_pb2.AgentId, agent_worker_pb2.SaveStateResponse],",
                    "-    ) -> agent_worker_pb2.SaveStateResponse:  # type: ignore",
                    "+    ) -> agent_worker_pb2.SaveStateResponse:",
                    "         raise NotImplementedError(\"Method not implemented!\")"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/runtimes/grpc/protos/__init__.py": {
                "before": [
                    "@@ -2,7 +2,3 @@",
                    " The :mod:`autogen_ext.runtimes.grpc.protos` module provides Google Protobuf classes for agent-worker communication",
                    " \"\"\"",
                    " ",
                    "-import os"
                ],
                "after": [
                    " ",
                    "-import os",
                    "-import sys",
                    "-",
                    "-sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/runtimes/grpc/protos/agent_worker_pb2.py": {
                "before": [
                    "@@ -1,83 +1,85 @@",
                    " # -*- coding: utf-8 -*-",
                    " # Generated by the protocol buffer compiler.  DO NOT EDIT!",
                    "+# NO CHECKED-IN PROTOBUF GENCODE",
                    " # source: agent_worker.proto"
                ],
                "after": [
                    "+  _globals['_MESSAGE']._serialized_start=1519",
                    "+  _globals['_MESSAGE']._serialized_end=1672",
                    "+  _globals['_AGENTRPC']._serialized_start=1675",
                    "+  _globals['_AGENTRPC']._serialized_end=2203",
                    " # @@protoc_insertion_point(module_scope)"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/runtimes/grpc/protos/agent_worker_pb2.pyi": {
                "before": [
                    "@@ -4,7 +4,7 @@ isort:skip_file",
                    " \"\"\"",
                    " ",
                    " import builtins",
                    "-import cloudevent_pb2"
                ],
                "after": [
                    "+    def HasField(self, field_name: typing.Literal[\"cloudEvent\", b\"cloudEvent\", \"message\", b\"message\", \"request\", b\"request\", \"response\", b\"response\"]) -> builtins.bool: ...",
                    "+    def ClearField(self, field_name: typing.Literal[\"cloudEvent\", b\"cloudEvent\", \"message\", b\"message\", \"request\", b\"request\", \"response\", b\"response\"]) -> None: ...",
                    "+    def WhichOneof(self, oneof_group: typing.Literal[\"message\", b\"message\"]) -> typing.Literal[\"request\", \"response\", \"cloudEvent\"] | None: ...",
                    " ",
                    " global___Message = Message"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/runtimes/grpc/protos/agent_worker_pb2_grpc.py": {
                "before": [
                    "@@ -1,8 +1,28 @@",
                    " # Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!",
                    " \"\"\"Client and server classes corresponding to protobuf-defined services.\"\"\"",
                    " import grpc",
                    "+import warnings"
                ],
                "after": [
                    "+            compression,",
                    "+            wait_for_ready,",
                    "+            timeout,",
                    "+            metadata,",
                    "+            _registered_method=True)"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/runtimes/grpc/protos/agent_worker_pb2_grpc.pyi": {
                "before": [
                    "@@ -4,7 +4,7 @@ isort:skip_file",
                    " \"\"\"",
                    " ",
                    " import abc",
                    "-import agent_worker_pb2"
                ],
                "after": [
                    "-import agent_worker_pb2",
                    "+from . import agent_worker_pb2",
                    " import collections.abc",
                    " import grpc",
                    " import grpc.aio"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/runtimes/grpc/protos/cloudevent_pb2.py": {
                "before": [
                    "@@ -1,12 +1,22 @@",
                    " # -*- coding: utf-8 -*-",
                    " # Generated by the protocol buffer compiler.  DO NOT EDIT!",
                    "+# NO CHECKED-IN PROTOBUF GENCODE",
                    " # source: cloudevent.proto"
                ],
                "after": [
                    "-  _globals['_CLOUDEVENT_ATTRIBUTESENTRY']._options = None",
                    "+  _globals['_CLOUDEVENT_ATTRIBUTESENTRY']._loaded_options = None",
                    "   _globals['_CLOUDEVENT_ATTRIBUTESENTRY']._serialized_options = b'8\\001'",
                    "   _globals['_CLOUDEVENT']._serialized_start=100",
                    "   _globals['_CLOUDEVENT']._serialized_end=660"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/runtimes/grpc/protos/cloudevent_pb2_grpc.py": {
                "before": [
                    "@@ -1,4 +1,24 @@",
                    " # Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!",
                    " \"\"\"Client and server classes corresponding to protobuf-defined services.\"\"\"",
                    " import grpc",
                    "+import warnings"
                ],
                "after": [
                    "+        + f' but the generated code in cloudevent_pb2_grpc.py depends on'",
                    "+        + f' grpcio>={GRPC_GENERATED_VERSION}.'",
                    "+        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'",
                    "+        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'",
                    "+    )"
                ]
            },
            "python/packages/autogen-ext/src/autogen_ext/ui/_rich_console.py": {
                "before": [
                    "@@ -16,6 +16,7 @@",
                    " from autogen_agentchat.messages import (",
                    "     AgentEvent,",
                    "     ChatMessage,",
                    "+    ModelClientStreamingChunkEvent,"
                ],
                "after": [
                    "+            # TODO: Handle model client streaming chunk events.",
                    "+            pass",
                    "         else:",
                    "             # Cast required for mypy to be happy",
                    "             message = cast(AgentEvent | ChatMessage, message)  # type: ignore"
                ]
            },
            "python/packages/autogen-ext/tests/models/test_azure_ai_model_client.py": {
                "before": [
                    "@@ -0,0 +1,376 @@",
                    "+import asyncio",
                    "+import os",
                    "+from datetime import datetime",
                    "+from typing import Any, AsyncGenerator, List"
                ],
                "after": [
                    "+    async for chunk in client.create_stream(messages=[UserMessage(content=\"Hello\", source=\"user\")]):",
                    "+        chunks.append(chunk)",
                    "+    assert isinstance(chunks[-1], CreateResult)",
                    "+    assert chunks[-1].content == \"Hello Another Hello Yet Another Hello\"",
                    "+    assert chunks[-1].thought == \"Thought\""
                ]
            },
            "python/packages/autogen-ext/tests/models/test_chat_completion_cache.py": {
                "before": [
                    "@@ -2,15 +2,14 @@",
                    " from typing import List, Tuple, Union",
                    " ",
                    " import pytest",
                    "-from autogen_core import InMemoryStore"
                ],
                "after": [
                    "-        cached_completion_results.append(completion)",
                    "+        cached_completion_results.append(copy.copy(completion))",
                    "     total_usage1 = copy.copy(cached_client.total_usage())",
                    " ",
                    "     assert total_usage1.prompt_tokens == total_usage0.prompt_tokens"
                ]
            },
            "python/packages/autogen-ext/tests/models/test_openai_model_client.py": {
                "before": [
                    "@@ -4,6 +4,7 @@",
                    " from typing import Annotated, Any, AsyncGenerator, Dict, Generic, List, Literal, Tuple, TypeVar",
                    " from unittest.mock import MagicMock",
                    " ",
                    "+import httpx"
                ],
                "after": [
                    "+    if model_info[\"family\"] == ModelFamily.R1:",
                    "+        assert chunks[-1].thought is not None",
                    " ",
                    " ",
                    " # TODO: add integration tests for Azure OpenAI using AAD token."
                ]
            },
            "python/packages/autogen-ext/tests/models/test_reply_chat_completion_client.py": {
                "before": [
                    "@@ -67,12 +67,16 @@ async def test_replay_chat_completion_client_create_stream() -> None:",
                    "     reply_model_client = ReplayChatCompletionClient(messages)",
                    " ",
                    "     for i in range(num_messages):",
                    "-        result: List[str] = []"
                ],
                "after": [
                    "+        assert result is not None",
                    "+        assert \"\".join(chunks) == messages[i] == result.content",
                    " ",
                    "     with pytest.raises(ValueError, match=\"No more mock responses available\"):",
                    "         await reply_model_client.create([UserMessage(content=\"dummy\", source=\"_\")])"
                ]
            },
            "python/packages/autogen-ext/tests/models/test_sk_chat_completion_adapter.py": {
                "before": [
                    "@@ -377,3 +377,75 @@ async def test_sk_chat_completion_custom_model_info(sk_client: AzureChatCompleti",
                    " ",
                    "     # Verify capabilities returns the same ModelInfo",
                    "     assert adapter.capabilities == adapter.model_info",
                    "+"
                ],
                "after": [
                    "+    assert len(response_chunks) > 0",
                    "+    assert isinstance(response_chunks[-1], CreateResult)",
                    "+    assert response_chunks[-1].finish_reason == \"stop\"",
                    "+    assert response_chunks[-1].content == \"Hello!\"",
                    "+    assert response_chunks[-1].thought == \"Reasoning...\""
                ]
            },
            "python/packages/autogen-ext/tests/models/test_utils.py": {
                "before": [
                    "@@ -0,0 +1,43 @@",
                    "+import pytest",
                    "+from autogen_ext.models._utils.parse_r1_content import parse_r1_content",
                    "+",
                    "+"
                ],
                "after": [
                    "+    ):",
                    "+        content = \"</think>Hello, <think>world\"",
                    "+        thought, content = parse_r1_content(content)",
                    "+        assert thought is None",
                    "+        assert content == \"</think>Hello, <think>world\""
                ]
            },
            "python/packages/autogen-ext/tests/protos/serialization_test_pb2.py": {
                "before": [
                    "@@ -1,29 +1,38 @@",
                    " # -*- coding: utf-8 -*-",
                    " # Generated by the protocol buffer compiler.  DO NOT EDIT!",
                    "+# NO CHECKED-IN PROTOBUF GENCODE",
                    " # source: serialization_test.proto"
                ],
                "after": [
                    "+  _globals['_PROTOMESSAGE']._serialized_start=36",
                    "+  _globals['_PROTOMESSAGE']._serialized_end=67",
                    "+  _globals['_NESTINGPROTOMESSAGE']._serialized_start=69",
                    "+  _globals['_NESTINGPROTOMESSAGE']._serialized_end=145",
                    " # @@protoc_insertion_point(module_scope)"
                ]
            },
            "python/packages/autogen-ext/tests/protos/serialization_test_pb2_grpc.py": {
                "before": [
                    "@@ -1,4 +1,24 @@",
                    " # Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!",
                    " \"\"\"Client and server classes corresponding to protobuf-defined services.\"\"\"",
                    " import grpc",
                    "+import warnings"
                ],
                "after": [
                    "+        + f' but the generated code in serialization_test_pb2_grpc.py depends on'",
                    "+        + f' grpcio>={GRPC_GENERATED_VERSION}.'",
                    "+        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'",
                    "+        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'",
                    "+    )"
                ]
            },
            "python/packages/autogen-ext/tests/protos/serialization_test_pb2_grpc.pyi": {
                "before": [
                    "@@ -1,12 +1,6 @@",
                    " \"\"\"",
                    " @generated by mypy-protobuf.  Do not edit manually!",
                    " isort:skip_file",
                    "-*"
                ],
                "after": [
                    "-- Optional and Extension context attributes are carried in a map structure.",
                    "-- Data may be represented as binary, text, or protobuf messages.",
                    " \"\"\"",
                    " ",
                    " import abc"
                ]
            },
            "python/packages/autogen-ext/tests/test_worker_runtime.py": {
                "before": [
                    "@@ -67,7 +67,7 @@ async def test_agent_types_must_be_unique_multiple_workers() -> None:",
                    " ",
                    "     await worker1.register_factory(type=AgentType(\"name1\"), agent_factory=lambda: NoopAgent(), expected_class=NoopAgent)",
                    " ",
                    "-    with pytest.raises(RuntimeError):"
                ],
                "after": [
                    "-        with pytest.raises(RuntimeError, match=\"Agent type worker1 already registered\"):",
                    "+        with pytest.raises(Exception, match=\"Agent type worker1 already registered\"):",
                    "             await NoopAgent.register(worker1_2, \"worker1\", lambda: NoopAgent())",
                    " ",
                    "         # This is somehow covered in test_disconnected_agent as well as a stop will also disconnect the agent."
                ]
            },
            "python/packages/autogen-ext/tests/tools/conftest.py": {
                "before": [
                    "@@ -100,8 +100,8 @@ def report_df_fixture() -> pd.DataFrame:",
                    "             \"The community centers around Baker Street, the iconic residence of Sherlock Holmes, and its connection to the London Underground. Baker Street serves as a significant landmark associated with the famous detective, while the Underground facilitates access to this notable location.\",",
                    "         ],",
                    "         \"full_content\": [",
                    "-            \"# Peterson and the Missing Billycock\\\\n\\\\nThe community centers around Peterson, a commissionaire involved in a mystery concerning a lost hat and a goose. His actions are pivotal in the investigation led by Sherlock Holmes, connecting various entities such as the row, the billycock hat, and multiple newspapers where advertisements were placed.\\\\n\\\\n## Peterson's central role in the investigation\\\\n\\\\nPeterson is a key figure in the mystery involving the missing blue carbuncle, acting as a commissionaire who aids Sherlock Holmes. His involvement is crucial as he not only discovers the lost billycock hat but also plays a significant role in disseminating information related to the case. This highlights his importance in the narrative and the potential impact of his actions on the investigation's outcome. [Data: Entities (333); Relationships (521, 522)]\\\\n\\\\n## The significance of the row incident\\\\n\\\\nThe row refers to the altercation that prompted Peterson's intervention, leading to the discovery of the hat. This incident is pivotal as it sets the stage for the entire investigation, illustrating how a seemingly minor event can have far-reaching consequences. The altercation not only affects Peterson but also ties into the larger mystery that Holmes is trying to solve. [Data: Entities (339); Relationships (521)]\\\\n\\\\n## The billycock hat as a central object\\\\n\\\\nThe billycock hat is not just an accessory but a crucial piece of evidence in the investigation. Its discovery by Peterson links him directly to the case and raises questions about its owner, Henry Baker. The hat's significance is underscored by its role in the narrative, as it is the object around which the mystery revolves. [Data: Entities (340); Relationships (522)]\\\\n\\\\n## Media involvement through advertisements\\\\n\\\\nPeterson's task of placing advertisements in various evening papers, including the Globe, Star, Pall Mall, and others, indicates the media's role in the investigation. This outreach is essential for gathering information about the hat's owner and demonstrates how public engagement can influence the resolution of the case. The involvement of multiple newspapers suggests a broad interest in the mystery, which could amplify its impact on the community. [Data: Entities (355, 356, 357, 358, 359, 360, 361); Relationships (545, 546, 547, 548, 549, 550, 551)]\","
                ],
                "after": [
                    "@@ -280,4 +280,3 @@ def text_unit_df_fixture() -> pd.DataFrame:",
                    "         ],",
                    "     }",
                    "     return pd.DataFrame(data)",
                    "-    return pd.DataFrame(data)"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/__init__.py": {
                "before": [
                    "@@ -1,18 +1,6 @@",
                    " from .database.db_manager import DatabaseManager",
                    "-from .datamodel import Agent, AgentConfig, Model, ModelConfig, Team, TeamConfig, Tool, ToolConfig",
                    "+from .datamodel import Team",
                    " from .teammanager import TeamManager"
                ],
                "after": [
                    "-    \"AgentConfig\",",
                    "-    \"TeamManager\",",
                    "-    \"__version__\",",
                    "-]",
                    "+__all__ = [\"DatabaseManager\", \"Team\", \"TeamManager\", \"__version__\"]"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/database/__init__.py": {
                "before": [
                    "@@ -1,3 +1,6 @@",
                    "-from .component_factory import Component, ComponentFactory",
                    "-from .config_manager import ConfigurationManager",
                    " from .db_manager import DatabaseManager",
                    "+from .gallery_builder import GalleryBuilder, create_default_gallery"
                ],
                "after": [
                    "+from .gallery_builder import GalleryBuilder, create_default_gallery",
                    "+",
                    "+__all__ = [",
                    "+    \"DatabaseManager\",",
                    "+]"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/database/component_factory.py": {
                "before": [
                    "@@ -1,503 +0,0 @@",
                    "-import json",
                    "-import logging",
                    "-from datetime import datetime",
                    "-from pathlib import Path"
                ],
                "after": [
                    "-",
                    "-        self._model_cache.clear()",
                    "-        self._tool_cache.clear()",
                    "-        self._last_cache_clear = datetime.now()",
                    "-        logger.info(\"Cleared all component caches\")"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/database/config_manager.py": {
                "before": [
                    "@@ -1,268 +0,0 @@",
                    "-import logging",
                    "-from pathlib import Path",
                    "-from typing import Any, Dict, List, Optional, Union",
                    "-"
                ],
                "after": [
                    "-        return component_type.value if component_type else \"unknown\"",
                    "-",
                    "-    async def cleanup(self):",
                    "-        \"\"\"Cleanup resources\"\"\"",
                    "-        await self.component_factory.cleanup()"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/database/db_manager.py": {
                "before": [
                    "@@ -1,17 +1,16 @@",
                    " import threading",
                    " from datetime import datetime",
                    " from pathlib import Path",
                    "-from typing import Optional"
                ],
                "after": [
                    "-    # Add new close method",
                    "+        return None",
                    " ",
                    "     async def close(self):",
                    "         \"\"\"Close database connections and cleanup resources\"\"\""
                ]
            },
            "python/packages/autogen-studio/autogenstudio/database/gallery_builder.py": {
                "before": [
                    "@@ -0,0 +1,243 @@",
                    "+from datetime import datetime",
                    "+from typing import List, Optional",
                    "+",
                    "+from autogen_agentchat.agents import AssistantAgent, UserProxyAgent"
                ],
                "after": [
                    "+#     print(gallery.model_dump_json(indent=2))",
                    "+",
                    "+#     # Save to file",
                    "+#     with open(\"gallery_default.json\", \"w\") as f:",
                    "+#         f.write(gallery.model_dump_json(indent=2))"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/datamodel/__init__.py": {
                "before": [
                    "@@ -1,11 +1,25 @@",
                    "-from .db import Agent, LinkTypes, Message, Model, Run, RunStatus, Session, Team, Tool",
                    "+from .db import Message, Run, RunStatus, Session, Team",
                    " from .types import (",
                    "-    AgentConfig,"
                ],
                "after": [
                    "+    \"MessageMeta\",",
                    "+    \"TeamResult\",",
                    "+    \"Response\",",
                    "+    \"SocketMessage\",",
                    "+]"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/datamodel/db.py": {
                "before": [
                    "@@ -2,141 +2,14 @@",
                    " ",
                    " from datetime import datetime",
                    " from enum import Enum",
                    "-from typing import List, Optional, Tuple, Type, Union"
                ],
                "after": [
                    "-        sa_column=Column(DateTime(timezone=True), onupdate=func.now()),",
                    "-    )",
                    "-    user_id: Optional[str] = None",
                    "-    version: Optional[str] = \"0.0.1\"",
                    "-    config: Union[GalleryConfig, dict] = Field(default_factory=GalleryConfig, sa_column=Column(JSON))"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/datamodel/types.py": {
                "before": [
                    "@@ -1,55 +1,9 @@",
                    " from datetime import datetime",
                    "-from enum import Enum",
                    "-from pathlib import Path",
                    "-from typing import Any, Dict, List, Optional, Union"
                ],
                "after": [
                    "-",
                    "-",
                    "-ComponentConfig = Union[TeamConfig, AgentConfig, ModelConfig, ToolConfig, TerminationConfig]",
                    "-",
                    "-ComponentConfigInput = Union[str, Path, dict, ComponentConfig]"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/teammanager.py": {
                "before": [
                    "@@ -1,73 +0,0 @@",
                    "-import time",
                    "-from typing import AsyncGenerator, Callable, Optional, Union",
                    "-",
                    "-from autogen_agentchat.base import TaskResult"
                ],
                "after": [
                    "-        for agent in team._participants:",
                    "-            if hasattr(agent, \"close\"):",
                    "-                await agent.close()",
                    "-",
                    "-        return self._create_result(result, start_time)"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/teammanager/__init__.py": {
                "before": [
                    "@@ -0,0 +1,3 @@",
                    "+from .teammanager import TeamManager",
                    "+",
                    "+__all__ = [\"TeamManager\"]"
                ],
                "after": [
                    "@@ -0,0 +1,3 @@",
                    "+from .teammanager import TeamManager",
                    "+",
                    "+__all__ = [\"TeamManager\"]"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/teammanager/teammanager.py": {
                "before": [
                    "@@ -0,0 +1,134 @@",
                    "+import json",
                    "+import logging",
                    "+import time",
                    "+from pathlib import Path"
                ],
                "after": [
                    "+            # Ensure cleanup happens",
                    "+            if team and hasattr(team, \"_participants\"):",
                    "+                for agent in team._participants:",
                    "+                    if hasattr(agent, \"close\"):",
                    "+                        await agent.close()"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/web/app.py": {
                "before": [
                    "@@ -13,7 +13,7 @@",
                    " from .config import settings",
                    " from .deps import cleanup_managers, init_managers",
                    " from .initialization import AppInitializer",
                    "-from .routes import agents, models, runs, sessions, teams, tools, ws"
                ],
                "after": [
                    "-    responses={404: {\"description\": \"Not found\"}},",
                    "-)",
                    " ",
                    " api.include_router(",
                    "     ws.router,"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/web/config.py": {
                "before": [
                    "@@ -3,7 +3,7 @@",
                    " ",
                    " ",
                    " class Settings(BaseSettings):",
                    "-    DATABASE_URI: str = \"sqlite:///./autogen.db\""
                ],
                "after": [
                    "-    DATABASE_URI: str = \"sqlite:///./autogen.db\"",
                    "+    DATABASE_URI: str = \"sqlite:///./autogen0404.db\"",
                    "     API_DOCS: bool = False",
                    "     CLEANUP_INTERVAL: int = 300  # 5 minutes",
                    "     SESSION_TIMEOUT: int = 3600  # 1 hour"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/web/deps.py": {
                "before": [
                    "@@ -5,7 +5,7 @@",
                    " ",
                    " from fastapi import Depends, HTTPException, status",
                    " ",
                    "-from ..database import ConfigurationManager, DatabaseManager"
                ],
                "after": [
                    "-        await _team_config_manager.import_directory(config_dir, settings.DEFAULT_USER_ID, check_exists=True)",
                    "+        await _db_manager.import_teams_from_directory(config_dir, settings.DEFAULT_USER_ID, check_exists=True)",
                    " ",
                    "         # Initialize connection manager",
                    "         _websocket_manager = WebSocketManager(db_manager=_db_manager)"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/web/managers/connection.py": {
                "before": [
                    "@@ -1,5 +1,6 @@",
                    " import asyncio",
                    " import logging",
                    "+import traceback",
                    " from datetime import datetime, timezone"
                ],
                "after": [
                    "         \"\"\"Save a message to the database\"\"\"",
                    "+",
                    "         run = await self._get_run(run_id)",
                    "         if run:",
                    "             db_message = Message("
                ]
            },
            "python/packages/autogen-studio/autogenstudio/web/routes/models.py": {
                "before": [
                    "@@ -1,42 +0,0 @@",
                    "-# api/routes/models.py",
                    "-from typing import Dict",
                    "-",
                    "-from fastapi import APIRouter, Depends, HTTPException"
                ],
                "after": [
                    "-@router.delete(\"/{model_id}\")",
                    "-async def delete_model(model_id: int, user_id: str, db=Depends(get_db)) -> Dict:",
                    "-    \"\"\"Delete a model\"\"\"",
                    "-    db.delete(filters={\"id\": model_id, \"user_id\": user_id}, model_class=Model)",
                    "-    return {\"status\": True, \"message\": \"Model deleted successfully\"}"
                ]
            },
            "python/packages/autogen-studio/autogenstudio/web/routes/tools.py": {
                "before": [
                    "@@ -1,41 +0,0 @@",
                    "-# api/routes/tools.py",
                    "-from typing import Dict",
                    "-",
                    "-from fastapi import APIRouter, Depends, HTTPException"
                ],
                "after": [
                    "-@router.delete(\"/{tool_id}\")",
                    "-async def delete_tool(tool_id: int, user_id: str, db=Depends(get_db)) -> Dict:",
                    "-    \"\"\"Delete a tool\"\"\"",
                    "-    db.delete(filters={\"id\": tool_id, \"user_id\": user_id}, model_class=Tool)",
                    "-    return {\"status\": True, \"message\": \"Tool deleted successfully\"}"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/types/datamodel.ts": {
                "before": [
                    "@@ -1,3 +1,22 @@",
                    "+// Base Component System",
                    "+",
                    "+export type ComponentTypes =",
                    "+  | \"team\""
                ],
                "after": [
                    "-  | \"active\" // covers 'streaming'",
                    "+  | \"active\"",
                    "   | \"awaiting_input\"",
                    "   | \"timeout\"",
                    "   | \"complete\""
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/types/guards.ts": {
                "before": [
                    "@@ -0,0 +1,231 @@",
                    "+import type {",
                    "+  Component,",
                    "+  ComponentConfig,",
                    "+  TeamConfig,"
                ],
                "after": [
                    "+    );",
                    "+  }",
                    "+}",
                    "+",
                    "+export { PROVIDERS };"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/atoms.tsx": {
                "before": [
                    "@@ -1,5 +1,6 @@",
                    " import React, { memo, useState } from \"react\";",
                    " import { Loader2, Maximize2, Minimize2, X } from \"lucide-react\";",
                    "+import ReactMarkdown from \"react-markdown\";",
                    " "
                ],
                "after": [
                    "+          {/* {displayContent} */}",
                    "+          <ReactMarkdown>{displayContent}</ReactMarkdown>",
                    "           {shouldTruncate && !isExpanded && (",
                    "             <div className=\"absolute bottom-0 left-0 right-0 h-24 bg-gradient-to-t from-secondary/20 to-transparent\" />",
                    "           )}"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/deploy/guides/guides.tsx": {
                "before": [
                    "@@ -3,14 +3,8 @@ import { Copy } from \"lucide-react\";",
                    " import { Guide } from \"../types\";",
                    " import PythonGuide from \"./python\";",
                    " import DockerGuide from \"./docker\";",
                    "-import { PrismLight as SyntaxHighlighter } from \"react-syntax-highlighter\";"
                ],
                "after": [
                    "-          {code}",
                    "-        </SyntaxHighlighter>",
                    "       </div>",
                    "     )}",
                    "   </section>"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/deploy/guides/python.tsx": {
                "before": [
                    "@@ -29,13 +29,37 @@ const PythonGuide: React.FC = () => {",
                    "         <Download className=\"h-4 w-4 inline-block\" />{\" \"}",
                    "       </div>",
                    " ",
                    "+      {/* Basic Usage */}"
                ],
                "after": [
                    "-          title=\"2. Serve a Team as a REST API\"",
                    "+          title=\"3. Serve a Team as a REST API\"",
                    "           description=<div>",
                    "             AutoGen Studio offers a convenience CLI command to serve a team as a",
                    "             REST API endpoint.{\" \"}"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/gallery/default_gallery.json": {
                "before": [
                    "@@ -0,0 +1,539 @@",
                    "+{",
                    "+  \"id\": \"gallery_default\",",
                    "+  \"name\": \"Default Component Gallery\",",
                    "+  \"url\": null,"
                ],
                "after": [
                    "+        }",
                    "+      ]",
                    "+    }",
                    "+  }",
                    "+}"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/gallery/detail.tsx": {
                "before": [
                    "@@ -19,13 +19,13 @@ import {",
                    " import type { Gallery } from \"./types\";",
                    " import { useGalleryStore } from \"./store\";",
                    " import { MonacoEditor } from \"../monaco\";",
                    "-import { ComponentConfigTypes } from \"../../types/datamodel\";"
                ],
                "after": [
                    "-              </p>",
                    "+              </div>",
                    "             )}",
                    "           </div>",
                    "         ))}"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/gallery/store.tsx": {
                "before": [
                    "@@ -3,6 +3,7 @@ import { persist } from \"zustand/middleware\";",
                    " import { Gallery } from \"./types\";",
                    " import {",
                    "   AgentConfig,",
                    "+  Component,"
                ],
                "after": [
                    "-      name: \"gallery-storage\",",
                    "+      name: \"gallery-storage-v1\",",
                    "     }",
                    "   )",
                    " );"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/gallery/types.ts": {
                "before": [
                    "@@ -1,5 +1,6 @@",
                    " import {",
                    "   AgentConfig,",
                    "+  Component,",
                    "   ModelConfig,"
                ],
                "after": [
                    "+      tools: Component<ToolConfig>[];",
                    "+      terminations: Component<TerminationConfig>[];",
                    "     };",
                    "   };",
                    " }"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/gallery/utils.ts": {
                "before": [
                    "@@ -1,194 +1,15 @@",
                    "-import {",
                    "-  AssistantAgentConfig,",
                    "-  CombinationTerminationConfig,",
                    "-  MaxMessageTerminationConfig,"
                ],
                "after": [
                    "+    throw error;",
                    "+  }",
                    " };",
                    "+",
                    "+export const defaultGallery: Gallery = loadGalleryFromJson();"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/session/chat/agentflow/agentflow.tsx": {
                "before": [
                    "@@ -25,14 +25,15 @@ import {",
                    "   AgentConfig,",
                    "   TeamConfig,",
                    "   Run,",
                    "+  Component,"
                ],
                "after": [
                    "-    [teamConfig.participants, run, settings]",
                    "+    [teamConfig.config.participants, run, settings]",
                    "   );",
                    " ",
                    "   const handleToggleFullscreen = useCallback(() => {"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/session/chat/chat.tsx": {
                "before": [
                    "@@ -11,6 +11,7 @@ import {",
                    "   RunStatus,",
                    "   TeamResult,",
                    "   Session,",
                    "+  Component,"
                ],
                "after": [
                    "-          setTeamConfig(team.config);",
                    "+          setTeamConfig(team.component);",
                    "         })",
                    "         .catch((error) => {",
                    "           console.error(\"Error loading team config:\", error);"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/session/chat/runview.tsx": {
                "before": [
                    "@@ -11,7 +11,7 @@ import {",
                    "   ChevronUp,",
                    "   Bot,",
                    " } from \"lucide-react\";",
                    "-import { Run, Message, TeamConfig } from \"../../../types/datamodel\";"
                ],
                "after": [
                    "   const calculateThreadTokens = (messages: Message[]) => {",
                    "+    // console.log(\"messages\", messages);",
                    "     return messages.reduce((total, msg) => {",
                    "       if (!msg.config.models_usage) return total;",
                    "       return ("
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/session/editor.tsx": {
                "before": [
                    "@@ -132,7 +132,7 @@ export const SessionEditor: React.FC<SessionEditorProps> = ({",
                    "               }",
                    "               options={teams.map((team) => ({",
                    "                 value: team.id,",
                    "-                label: `${team.config.name} (${team.config.team_type})`,"
                ],
                "after": [
                    "-                label: `${team.config.name} (${team.config.team_type})`,",
                    "+                label: `${team.component.label} (${team.component.component_type})`,",
                    "               }))}",
                    "               notFoundContent={loading ? <Spin size=\"small\" /> : null}",
                    "             />"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/builder/builder.tsx": {
                "before": [
                    "@@ -1,4 +1,5 @@",
                    "-import React, { useCallback, useRef, useState } from \"react\";",
                    "+//team/builder/builder.tsx",
                    "+import React, { useCallback, useEffect, useRef, useState } from \"react\";",
                    " import {"
                ],
                "after": [
                    "             }}",
                    "+            onClose={() => setSelectedNode(null)}",
                    "           />",
                    "         </Layout>",
                    "       </DndContext>"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/builder/library.tsx": {
                "before": [
                    "@@ -10,22 +10,16 @@ import {",
                    "   Timer,",
                    "   Maximize2,",
                    "   Minimize2,",
                    "+  GripVertical,"
                ],
                "after": [
                    "-              label={item.label}",
                    "+              label={item.label || \"\"}",
                    "               icon={section.icon}",
                    "             />",
                    "           ))}"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/builder/node-editor.tsx": {
                "before": [
                    "@@ -1,665 +0,0 @@",
                    "-import React, { useEffect, useState } from \"react\";",
                    "-import { Drawer, Button, Space, message, Select, Input } from \"antd\";",
                    "-import { NodeEditorProps } from \"./types\";",
                    "-import { useTeamBuilderStore } from \"./store\";"
                ],
                "after": [
                    "-    // Add other type-specific validations as needed",
                    "-  }",
                    "-}",
                    "-",
                    "-export default NodeEditor;"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/builder/node-editor/detailgroup.tsx": {
                "before": [
                    "@@ -0,0 +1,24 @@",
                    "+import React from \"react\";",
                    "+",
                    "+interface DetailGroupProps {",
                    "+  title: string;"
                ],
                "after": [
                    "+    </div>",
                    "+  );",
                    "+};",
                    "+",
                    "+export default DetailGroup;"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/builder/node-editor/fields.tsx": {
                "before": [
                    "@@ -0,0 +1,524 @@",
                    "+import React from \"react\";",
                    "+import { Input, Select, Switch, InputNumber, Form, Button } from \"antd\";",
                    "+import { Edit } from \"lucide-react\";",
                    "+import {"
                ],
                "after": [
                    "+    </>",
                    "+  );",
                    "+};",
                    "+",
                    "+export default NodeEditorFields;"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/builder/node-editor/node-editor.tsx": {
                "before": [
                    "@@ -0,0 +1,291 @@",
                    "+import React from \"react\";",
                    "+import { Form, Button, Drawer, Breadcrumb } from \"antd\";",
                    "+import { ChevronLeft } from \"lucide-react\";",
                    "+import { Component, ComponentConfig } from \"../../../../types/datamodel\";"
                ],
                "after": [
                    "+    </Drawer>",
                    "+  );",
                    "+};",
                    "+",
                    "+export default NodeEditor;"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/builder/nodes.tsx": {
                "before": [
                    "@@ -1,4 +1,4 @@",
                    "-import React from \"react\";",
                    "+import React, { memo } from \"react\";",
                    " import {",
                    "   Handle,"
                ],
                "after": [
                    "-      {...props}",
                    "+      {...validPathProps}",
                    "     />",
                    "   );",
                    " };"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/builder/store.tsx": {
                "before": [
                    "@@ -1,4 +1,5 @@",
                    " import { create } from \"zustand\";",
                    "+import { isEqual } from \"lodash\";",
                    " import {",
                    "   CustomNode,"
                ],
                "after": [
                    "+      ].slice(-MAX_HISTORY),",
                    "+      currentHistoryIndex: state.currentHistoryIndex + 1,",
                    "+    }));",
                    "+  },",
                    " }));"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/builder/types.ts": {
                "before": [
                    "@@ -1,10 +1,19 @@",
                    "+// builder/types.ts",
                    " import { Node, Edge } from \"@xyflow/react\";",
                    "-import { ComponentConfigTypes, ComponentTypes } from \"../../../types/datamodel\";",
                    "+import {"
                ],
                "after": [
                    "   onUpdate: (updates: Partial<NodeData>) => void;",
                    "+  onClose: () => void;",
                    " }",
                    " ",
                    " export interface LibraryProps {"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/builder/utils.ts": {
                "before": [
                    "@@ -1,66 +1,167 @@",
                    "-import dagre from \"@dagrejs/dagre\";",
                    "-import { CustomNode, CustomEdge } from \"./types\";",
                    " import { nanoid } from \"nanoid\";",
                    " import {"
                ],
                "after": [
                    "+  while (existingNames.includes(`${validBaseName}_${counter}`)) {",
                    "+    counter++;",
                    "+  }",
                    "+  return `${validBaseName}_${counter}`;",
                    " };"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/hooks.tsx": {
                "before": [
                    "@@ -0,0 +1,39 @@",
                    "+import { config } from \"process\";",
                    "+import { Team } from \"../../types/datamodel\";",
                    "+",
                    "+export const useTeam = (team: Team) => {"
                ],
                "after": [
                    "+      team.config.config.name = createTeamName();",
                    "+      return team;",
                    "+    },",
                    "+  };",
                    "+};"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/manager.tsx": {
                "before": [
                    "@@ -37,6 +37,7 @@ export const TeamManager: React.FC = () => {",
                    "       setIsLoading(true);",
                    "       const data = await teamAPI.listTeams(user.email);",
                    "       setTeams(data);",
                    "+      // console.log(\"team data\", data);"
                ],
                "after": [
                    "-                  {currentTeam.config.name}",
                    "+                  {currentTeam.component?.label}",
                    "                   {currentTeam.id ? (",
                    "                     \"\"",
                    "                   ) : ("
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/sidebar.tsx": {
                "before": [
                    "@@ -42,12 +42,12 @@ export const TeamSidebar: React.FC<TeamSidebarProps> = ({",
                    "   isLoading = false,",
                    " }) => {",
                    "   const defaultGallery = useGalleryStore((state) => state.getDefaultGallery());",
                    "-"
                ],
                "after": [
                    "+                        {galleryTeam.config.participants.length}{\" \"}",
                    "+                        {galleryTeam.config.participants.length === 1",
                    "                           ? \"agent\"",
                    "                           : \"agents\"}",
                    "                       </span>"
                ]
            },
            "python/packages/autogen-studio/frontend/src/components/views/team/types.ts": {
                "before": [
                    "@@ -1,4 +1,4 @@",
                    "-import type { Team, TeamConfig } from \"../../types/datamodel\";",
                    "+import type { Component, Team, TeamConfig } from \"../../types/datamodel\";",
                    " ",
                    " export interface TeamEditorProps {"
                ],
                "after": [
                    " ",
                    " export const defaultTeam: Team = {",
                    "-  config: defaultTeamConfig,",
                    "+  component: defaultTeamConfig,",
                    " };"
                ]
            },
            "python/packages/autogen-studio/tests/test_component_factory.py": {
                "before": [
                    "@@ -1,397 +0,0 @@",
                    "-import pytest",
                    "-from typing import List",
                    "-",
                    "-from autogen_agentchat.agents import AssistantAgent"
                ],
                "after": [
                    "-                termination_type=\"InvalidTermination\",  # type: ignore",
                    "-                component_type=ComponentTypes.TERMINATION,",
                    "-                version=\"1.0.0\",",
                    "-            )",
                    "-        )"
                ]
            },
            "python/packages/autogen-studio/tests/test_db_manager.py": {
                "before": [
                    "@@ -5,16 +5,11 @@",
                    " from typing import Generator",
                    " ",
                    " from autogenstudio.database import DatabaseManager",
                    "-from autogenstudio.datamodel.types import ("
                ],
                "after": [
                    "             db.reset_db()",
                    "             if os.path.exists(db_path):",
                    "-                os.remove(db_path)",
                    "+                os.remove(db_path)",
                    "\\ No newline at end of file"
                ]
            },
            "python/packages/magentic-one-cli/pyproject.toml": {
                "before": [
                    "@@ -4,7 +4,7 @@ build-backend = \"hatchling.build\"",
                    " ",
                    " [project]",
                    " name = \"magentic-one-cli\"",
                    "-version = \"0.2.1\""
                ],
                "after": [
                    "+    \"autogen-agentchat>=0.4.4,<0.5\",",
                    "+    \"autogen-ext[openai,magentic-one,rich]>=0.4.4,<0.5\",",
                    " ]",
                    " ",
                    " [project.scripts]"
                ]
            },
            "python/pyproject.toml": {
                "before": [
                    "@@ -13,7 +13,7 @@ dev = [",
                    "     \"pytest_mock\",",
                    "     \"poethepoet\",",
                    "     \"packaging\",",
                    "-    \"grpcio-tools~=1.62.0\","
                ],
                "after": [
                    "+]",
                    "+",
                    " ",
                    " gen-proto-samples = \"python -m grpc_tools.protoc --python_out=./samples/core_xlang_hello_python_agent/protos --grpc_python_out=./samples/core_xlang_hello_python_agent/protos --mypy_out=./samples/core_xlang_hello_python_agent/protos --mypy_grpc_out=./samples/core_xlang_hello_python_agent/protos --proto_path ../protos/ agent_events.proto\"",
                    " "
                ]
            },
            "python/samples/core_distributed-group-chat/README.md": {
                "before": [
                    "@@ -7,7 +7,11 @@ This example runs a gRPC server using [GrpcWorkerAgentRuntimeHost](../../src/aut",
                    " ### Setup Python Environment",
                    " ",
                    " 1. Create a virtual environment and activate it. (e.g. `python3.12 -m venv .venv && source .venv/bin/activate`)",
                    "-2. Run `uv pip install -r requirements.txt` to install compiled set of dependencies."
                ],
                "after": [
                    "+pip install \"autogen-ext[openai,azure,chainlit,rich,pyyaml]\"",
                    "+```",
                    " ",
                    " ### General Configuration",
                    " "
                ]
            },
            "python/samples/core_distributed-group-chat/requirements.in": {
                "before": [
                    "@@ -1,5 +0,0 @@",
                    "-autogen-ext[openai]==0.4.3",
                    "-azure-identity",
                    "-chainlit",
                    "-rich"
                ],
                "after": [
                    "-azure-identity",
                    "-chainlit",
                    "-rich",
                    "-pyyaml",
                    "\\ No newline at end of file"
                ]
            },
            "python/samples/core_distributed-group-chat/requirements.txt": {
                "before": [
                    "@@ -1,1202 +0,0 @@",
                    "-# This file was autogenerated by uv via the following command:",
                    "-#    uv pip compile requirements.in --generate-hashes -o requirements.txt",
                    "-aiofiles==24.1.0 \\",
                    "-    --hash=sha256:22a075c9e5a3810f0c2e48f3008c94d68c65d763b9b03857924c99e57355166c \\"
                ],
                "after": [
                    "-    # via simple-websocket",
                    "-zipp==3.21.0 \\",
                    "-    --hash=sha256:2c9958f6430a2040341a52eb608ed6dd93ef4392e02ffe219417c1b28b5dd1f4 \\",
                    "-    --hash=sha256:ac1bbe05fd2991f160ebce24ffbac5f6d11d83dc90891255885223d42b3cd931",
                    "-    # via importlib-metadata"
                ]
            },
            "python/samples/core_xlang_hello_python_agent/hello_python_agent.py": {
                "before": [
                    "@@ -60,7 +60,7 @@ async def main() -> None:",
                    " ",
                    "     await runtime.publish_message(",
                    "         message=output_message,",
                    "-        topic_id=DefaultTopicId(\"agents.Output\", \"HelloAgents/python\"),"
                ],
                "after": [
                    "-        topic_id=DefaultTopicId(\"agents.Output\", \"HelloAgents/python\"),",
                    "+        topic_id=DefaultTopicId(\"agents.Output\", \"HelloAgents\"),",
                    "         sender=AgentId(\"HelloAgents\", \"python\"),",
                    "     )",
                    "     await runtime.stop_when_signal()"
                ]
            },
            "python/samples/core_xlang_hello_python_agent/protos/agent_events_pb2.py": {
                "before": [
                    "@@ -1,12 +1,22 @@",
                    " # -*- coding: utf-8 -*-",
                    " # Generated by the protocol buffer compiler.  DO NOT EDIT!",
                    "+# NO CHECKED-IN PROTOBUF GENCODE",
                    " # source: agent_events.proto"
                ],
                "after": [
                    "+if not _descriptor._USE_C_DESCRIPTORS:",
                    "+  _globals['DESCRIPTOR']._loaded_options = None",
                    "   _globals['DESCRIPTOR']._serialized_options = b'\\252\\002\\033Microsoft.AutoGen.Contracts'",
                    "   _globals['_TEXTMESSAGE']._serialized_start=30",
                    "   _globals['_TEXTMESSAGE']._serialized_end=80"
                ]
            },
            "python/samples/core_xlang_hello_python_agent/protos/agent_events_pb2_grpc.py": {
                "before": [
                    "@@ -1,4 +1,24 @@",
                    " # Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!",
                    " \"\"\"Client and server classes corresponding to protobuf-defined services.\"\"\"",
                    " import grpc",
                    "+import warnings"
                ],
                "after": [
                    "+        + f' but the generated code in agent_events_pb2_grpc.py depends on'",
                    "+        + f' grpcio>={GRPC_GENERATED_VERSION}.'",
                    "+        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'",
                    "+        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'",
                    "+    )"
                ]
            }
        }
    },
    {
        "instance_id": "crewAI__crewAI-1532",
        "title": "[BUG] OTEL_SDK_DISABLED to true but CrewAI still tries to push logs.",
        "problem_statement": "[BUG] OTEL_SDK_DISABLED to true but CrewAI still tries to push logs. Description\n\nI set the OTEL_SDK_DISABLED to true, as stated in the [documentation](https://docs.crewai.com/telemetry).\r\nwith:\r\n`\r\nimport os\r\nos.environ[\"OTEL_SDK_DISABLED \"]=\"true\"\r\n`\r\n\r\nI'm having:\r\n`\r\nERROR:opentelemetry.sdk.trace.export:Exception while exporting Span batch.",
        "base_commit": "5f46ff883632e4b3396c6dfbae98b9347e807f99",
        "repo": "repo/crewAI-1532",
        "patch": {
            ".github/security.md": {
                "before": [
                    "@@ -0,0 +1,19 @@",
                    "+CrewAI takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organization.",
                    "+If you believe you have found a security vulnerability in any CrewAI product or service, please report it to us as described below.",
                    "+",
                    "+ ## Reporting a Vulnerability"
                ],
                "after": [
                    "+",
                    "+ Once we have received your report, we will respond to you at the email address you provide. If the issue is confirmed, we will release a patch as soon as possible depending on the complexity of the issue.",
                    "+",
                    "+ At this time, we are not offering a bug bounty program. Any rewards will be at our discretion.",
                    "\\ No newline at end of file"
                ]
            }
        }
    },
    {
        "instance_id": "crewAI__crewAI-1463",
        "title": "[BUG] Flow @listen with _and error.",
        "problem_statement": "[BUG] Flow @listen with _and error. Description\n\nFlow with parallel jobs and _and constraints fails to execute the _and constraint with funcs and strings passed.\r\n\r\n\n\n### Steps to Reproduce\n\nStep 1 create script.\r\nStep 2 install crewai version in venv with python 3.12\r\nStep 3 run script.\r\n\r\nI reduced my example to a minimal example to reproduce behavior. Notice how step 4_1 nor 4_2 execute.\r\n\r\n```python\r\nimport asyncio\r\n\r\nfrom crewai.flow.flow import Flow, and_, listen, start\r\n\r\n\r\nclass DummyFlow(Flow):\r\n    @start()\r\n    def step_1_1(self):\r\n        print(\"Starting 'step_1_1' method.\")\r\n    \r\n    @start()\r\n    def step_1_2(self):\r\n        print(\"Starting 'step_1_2' method.\")\r\n    \r\n    @listen(step_1_1)\r\n    def step_2(self):\r\n        print(\"Starting 'step_2' method.\")\r\n        \r\n    @listen(step_2)\r\n    def step_3(self):\r\n        print(\"Starting 'step_3' method.\")\r\n        \r\n    @listen(and_(step_1_1, step_3))\r\n    def step_4_1(self):\r\n        print(\"Starting 'step_4' method.\")\r\n\r\n    @listen(and_(\"step_1_1\", \"step_3\"))\r\n    def step_4_2(self):\r\n        print(\"Starting 'step_4' method.\")\r\n        \r\n\r\nasync def main():\r\n    podcast_flow = DummyFlow()\r\n    await podcast_flow.kickoff()\r\n\r\n\r\nasyncio.run(main())\r\n```\r\n\r\nThe output is \r\n```console\r\n$ python crewai_bug.py\r\nStarting 'step_1_1' method.\r\nStarting 'step_1_2' method.\r\nStarting 'step_2' method.\r\nStarting 'step_3' method.\r\n```\r\n\n\n### Expected behavior\n\nSteps 4_1 and 4_2 to be executed as stated in the documentation. (the super minimal example of the docs did work in my machine)\n\n### Screenshots/Code snippets\n\n```python\r\nimport asyncio\r\n\r\nfrom crewai.flow.flow import Flow, and_, listen, start\r\n\r\n\r\nclass DummyFlow(Flow):\r\n    @start()\r\n    def step_1_1(self):\r\n        print(\"Starting 'step_1_1' method.\")\r\n    \r\n    @start()\r\n    def step_1_2(self):\r\n        print(\"Starting 'step_1_2' method.\")\r\n    \r\n    @listen(step_1_1)\r\n    def step_2(self):\r\n        print(\"Starting 'step_2' method.\")\r\n        \r\n    @listen(step_2)\r\n    def step_3(self):\r\n        print(\"Starting 'step_3' method.\")\r\n        \r\n    @listen(and_(step_1_1, step_3))\r\n    def step_4_1(self):\r\n        print(\"Starting 'step_4' method.\")\r\n\r\n    @listen(and_(\"step_1_1\", \"step_3\"))\r\n    def step_4_2(self):\r\n        print(\"Starting 'step_4' method.\")\r\n        \r\n\r\nasync def main():\r\n    podcast_flow = DummyFlow()\r\n    await podcast_flow.kickoff()\r\n\r\n\r\nasyncio.run(main())\r\n```\r\n\r\nThe output is \r\n```console\r\n$ python crewai_bug.py\r\nStarting 'step_1_1' method.\r\nStarting 'step_1_2' method.\r\nStarting 'step_2' method.\r\nStarting 'step_3' me\n\n### Operating System\n\nWindows 11\n\n### Python Version\n\n3.12\n\n### crewAI Version\n\n0.70.1\n\n### crewAI Tools Version\n\nNone\n\n### Virtual Environment\n\nPoetry\n\n### Evidence\n\nNone\n\n### Possible Solution\n\nNone\n\n### Additional context\n\nNone",
        "base_commit": "b43f3987ecae1c2867a2209a3f6de89fe444cabe",
        "repo": "repo/crewAI-1463",
        "patch": {
            "src/crewai/flow/flow.py": {
                "before": [
                    "@@ -137,11 +137,6 @@ def __new__(mcs, name, bases, dct):",
                    "         setattr(cls, \"_routers\", routers)",
                    "         setattr(cls, \"_router_paths\", router_paths)",
                    " ",
                    "-        print(\"_start_methods\", start_methods)"
                ],
                "after": [
                    "             ):",
                    "-                print(\"Method\", method_name)",
                    "                 self._methods[method_name] = getattr(self, method_name)",
                    " ",
                    "     def _create_initial_state(self) -> T:"
                ]
            }
        }
    },
    {
        "instance_id": "crewAI__crewAI-1370",
        "title": "[BUG] `import crewai` takes >25 seconds",
        "problem_statement": "[BUG] `import crewai` takes >25 seconds. Description\r\n\r\n`import crewai` takes >25 seconds\r\n\r\n### Steps to Reproduce\r\n\r\n1. `import crewai` \r\n2. run the script\r\n3. wait 25 seconds or longer\r\n\r\n### Expected behavior\r\n\r\nThe library should be imported in fraction of second. \r\n\r\n### Screenshots/Code snippets\r\n\r\n```py\r\nimport time\r\nstart = time.time()\r\n\r\nimport crewai\r\n\r\nprint(time.time() - start)\r\n```\r\n\r\n### Operating System\r\n\r\nWindows 10\r\n\r\n### Python Version\r\n\r\n3.12\r\n\r\n### crewAI Version\r\n\r\n0.32.2\r\n\r\n### crewAI Tools Version\r\n\r\n0.3.0\r\n\r\n### Virtual Environment\r\n\r\nVenv\r\n\r\n### Evidence\r\n\r\n![Code_wIKMXiY1iv](https://github.com/user-attachments/assets/0d73a7e8-4dd4-4584-a476-f836e95d0fb9)\r\n\r\n\r\n### Possible Solution\r\n\r\nNone\r\n\r\n### Additional context\r\n\r\nNone",
        "base_commit": "0dfe3bcb0aa605bee4192a3d3f9ea5f289cf40c4",
        "repo": "repo/crewAI-1370",
        "patch": {
            "src/crewai/telemetry/telemetry.py": {
                "before": [
                    "@@ -21,9 +21,7 @@ def suppress_warnings():",
                    " ",
                    " ",
                    " from opentelemetry import trace  # noqa: E402",
                    "-from opentelemetry.exporter.otlp.proto.http.trace_exporter import ("
                ],
                "after": [
                    "-)",
                    "+from opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter  # noqa: E402",
                    " from opentelemetry.sdk.resources import SERVICE_NAME, Resource  # noqa: E402",
                    " from opentelemetry.sdk.trace import TracerProvider  # noqa: E402",
                    " from opentelemetry.sdk.trace.export import BatchSpanProcessor  # noqa: E402"
                ]
            }
        }
    },
    {
        "instance_id": "crewAI__crewAI-1323",
        "title": "[BUG] Crews not running on `o1-preview` or `o1-mini`",
        "problem_statement": "[BUG] Crews not running on `o1-preview` or `o1-mini`. Description\r\n\r\nI defined the model to `o1-preview` or `o1-mini` and temperature to 1, and I get the following error\r\n\r\n```\r\nError code: 400 - {\\'error\\': {\\'message\\': \"Unsupported parameter: \\'stop\\' is not supported with this model.\", \\'type\\': \\'invalid_request_error\\', \\'param\\': \\'stop\\', \\'code\\': \\'unsupported_parameter\\'}}\r\n```\r\n\r\nApparently the `stop` parameter is used, and is not supported. I didn't find a way for the crew to no use this parameter\r\n\r\n### Steps to Reproduce\r\n\r\nDefine LLM for an agent as \r\n\r\n```llm=ChatOpenAI(model_name=\"o1-preview\", temperature=1)```\r\n\r\nrun the crew. \r\n\r\n### Expected behavior\r\n\r\nAgent executes without error\r\n\r\n### Screenshots/Code snippets\r\n\r\n```llm=ChatOpenAI(model_name=\"o1-preview\", temperature=1)```\r\n\r\n### Operating System\r\n\r\nmacOS Sonoma\r\n\r\n### Python Version\r\n\r\n3.12\r\n\r\n### crewAI Version\r\n\r\n0.51.1\r\n\r\n### crewAI Tools Version\r\n\r\n0.51.1\r\n\r\n### Virtual Environment\r\n\r\nVenv\r\n\r\n### Evidence\r\n\r\n```\r\nError code: 400 - {\\'error\\': {\\'message\\': \"Unsupported parameter: \\'stop\\' is not supported with this model.\", \\'type\\': \\'invalid_request_error\\', \\'param\\': \\'stop\\', \\'code\\': \\'unsupported_parameter\\'}}\r\n```\r\n\r\n\r\n\r\n### Possible Solution\r\n\r\nmake stop parameter optional?\r\n\r\n### Additional context\r\n\r\n.",
        "base_commit": "322780a5f36840bf566aac97d872dc64261f4474",
        "repo": "repo/crewAI-1323",
        "patch": {
            "poetry.lock": {
                "before": [
                    "@@ -2826,13 +2826,13 @@ langchain-core = \">=0.2.38,<0.3.0\"",
                    " ",
                    " [[package]]",
                    " name = \"langsmith\"",
                    "-version = \"0.1.120\""
                ],
                "after": [
                    "+    {file = \"setuptools-75.1.0-py3-none-any.whl\", hash = \"sha256:35ab7fd3bcd95e6b7fd704e4a1539513edad446c097797f2985e0e4b960772f2\"},",
                    "+    {file = \"setuptools-75.1.0.tar.gz\", hash = \"sha256:d59a21b17a275fb872a9c3dae73963160ae079f1049ed956880cd7c09b120538\"},",
                    " ]",
                    " ",
                    " [package.extras]"
                ]
            },
            "pyproject.toml": {
                "before": [
                    "@@ -1,6 +1,6 @@",
                    " [tool.poetry]",
                    " name = \"crewai\"",
                    "-version = \"0.56.23\"",
                    "+version = \"0.60.0\""
                ],
                "after": [
                    "-version = \"0.56.23\"",
                    "+version = \"0.60.0\"",
                    " description = \"Cutting-edge framework for orchestrating role-playing, autonomous AI agents. By fostering collaborative intelligence, CrewAI empowers agents to work together seamlessly, tackling complex tasks.\"",
                    " authors = [\"Joao Moura <joao@crewai.com>\"]",
                    " readme = \"README.md\""
                ]
            },
            "src/crewai/__init__.py": {
                "before": [
                    "@@ -7,16 +7,11 @@",
                    " from crewai.task import Task",
                    " ",
                    " ",
                    "-warnings.filterwarnings("
                ],
                "after": [
                    "     module=\"pydantic.main\",",
                    " )",
                    " ",
                    "-",
                    " __all__ = [\"Agent\", \"Crew\", \"Process\", \"Task\", \"Pipeline\", \"Router\"]"
                ]
            },
            "src/crewai/agents/crew_agent_executor.py": {
                "before": [
                    "@@ -83,6 +83,8 @@ def invoke(self, inputs: Dict[str, str]) -> Dict[str, Any]:",
                    "             user_prompt = self._format_prompt(self.prompt.get(\"prompt\", \"\"), inputs)",
                    "             self.messages.append(self._format_msg(user_prompt))",
                    " ",
                    "+        self._show_start_logs()"
                ],
                "after": [
                    "+                        content=f\"\\033[95m## Thought:\\033[00m \\033[92m{thought}\\033[00m\"",
                    "+                    )",
                    "                 self._printer.print(",
                    "                     content=f\"\\033[95m## Using tool:\\033[00m \\033[92m{formatted_answer.tool}\\033[00m\"",
                    "                 )"
                ]
            },
            "src/crewai/project/crew_base.py": {
                "before": [
                    "@@ -89,7 +89,10 @@ def _map_agent_variables(",
                    "             callbacks: Dict[str, Callable],",
                    "         ) -> None:",
                    "             if llm := agent_info.get(\"llm\"):",
                    "-                self.agents_config[agent_name][\"llm\"] = llms[llm]()"
                ],
                "after": [
                    "+                except KeyError:",
                    "+                    self.agents_config[agent_name][\"llm\"] = llm",
                    " ",
                    "             if tools := agent_info.get(\"tools\"):",
                    "                 self.agents_config[agent_name][\"tools\"] = ["
                ]
            },
            "src/crewai/telemetry/telemetry.py": {
                "before": [
                    "@@ -4,15 +4,28 @@",
                    " import json",
                    " import os",
                    " import platform",
                    "+import warnings"
                ],
                "after": [
                    "+                    trace.set_tracer_provider(self.provider)",
                    "+                    self.trace_set = True",
                    "             except Exception:",
                    "                 self.ready = False",
                    "                 self.trace_set = False"
                ]
            },
            "tests/crew_test.py": {
                "before": [
                    "@@ -429,6 +429,10 @@ def test_crew_verbose_output(capsys):",
                    "     crew.kickoff()",
                    "     captured = capsys.readouterr()",
                    "     expected_strings = [",
                    "+        \"\\x1b[1m\\x1b[95m# Agent:\\x1b[00m \\x1b[1m\\x1b[92mResearcher\","
                ],
                "after": [
                    "+        \"\\x1b[1m\\x1b[95m# Agent:\\x1b[00m \\x1b[1m\\x1b[92mSenior Writer\",",
                    "+        \"\\x1b[95m## Task:\\x1b[00m \\x1b[92mWrite about AI in healthcare.\",",
                    "         \"\\n\\n\\x1b[1m\\x1b[95m# Agent:\\x1b[00m \\x1b[1m\\x1b[92mResearcher\",",
                    "         \"\\x1b[00m\\n\\x1b[95m## Final Answer:\",",
                    "         \"\\n\\n\\x1b[1m\\x1b[95m# Agent:\\x1b[00m \\x1b[1m\\x1b[92mSenior Writer\","
                ]
            }
        }
    },
    {
        "instance_id": "crewAI__crewAI-1270",
        "title": "[BUG]UnicodeDecodeError: 'gbk' codec can't decode byte 0xac in position 102: illegal multibyte sequence",
        "problem_statement": "[BUG]UnicodeDecodeError: 'gbk' codec can't decode byte 0xac in position 102: illegal multibyte sequence. Description\r\n\r\nWhen loading a variable from the yaml environment, the crewai library tries to load it in gbk encoding as soon as Chinese is present in it, but my yaml file is utf-8. You want to add a measure to detect file encoding when loading yaml files\r\n\r\n### Steps to Reproduce\r\n\r\n1. edit agent.yaml or task.yaml\r\n2. Write a lot of Chinese into the above two yaml files\r\n3. crewai run\r\n\r\n### Expected behavior\r\n\r\nWhen loading yaml files, it automatically detects whether the file encoding is gbk or utf-8 or something else, and loads the file in this encoding format because it involves the definition of agents and the definition of tasks, and people in many other countries may use different encodings\r\n\r\n### Screenshots/Code snippets\r\n![image](https://github.com/user-attachments/assets/55369f4d-8086-4672-8610-d4b35f1079d5)\r\n\r\n\r\n\r\n### Operating System\r\n\r\nWindows 11\r\n\r\n### Python Version\r\n\r\n3.12\r\n\r\n### crewAI Version\r\n\r\n0.51.0\r\n\r\n### crewAI Tools Version\r\n\r\n0.51.0\r\n\r\n### Virtual Environment\r\n\r\nPoetry\r\n\r\n### Evidence\r\n\r\n`\r\ncrewai run\r\nC:\\Users\\jonty\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\crew-agent-OgCTPeQm-py3.12\\Lib\\site-packages\\pydantic\\_internal\\_config.py:341: UserWarning: Valid config keys have changed in V2:\r\n* 'allow_population_by_field_name' has been renamed to 'populate_by_name'\r\n* 'smart_union' has been removed\r\n  warnings.warn(message, UserWarning)\r\nRunning the crew\r\nC:\\Users\\jonty\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\crew-agent-OgCTPeQm-py3.12\\Lib\\site-packages\\pydantic\\_internal\\_config.py:341: UserWarning: Valid config keys have changed in V2:\r\n* 'allow_population_by_field_name' has been renamed to 'populate_by_name'\r\n* 'smart_union' has been removed\r\n  warnings.warn(message, UserWarning)\r\nTraceback (most recent call last):\r\n  File \"<string>\", line 1, in <module>\r\n  File \"C:\\Users\\jonty\\PycharmProjects\\crew_agent\\src\\crew_agent\\main.py\", line 22, in run\r\n    CrewAgentCrew().crew().kickoff(inputs=inputs)\r\n    ^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\jonty\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\crew-agent-OgCTPeQm-py3.12\\Lib\\site-packages\\crewai\\project\\crew_base.py\", line 38, in __init__\r\n    self.agents_config = self.load_yaml(\r\n                         ^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\jonty\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\crew-agent-OgCTPeQm-py3.12\\Lib\\site-packages\\crewai\\project\\crew_base.py\", line 53, in load_yaml\r\n    return yaml.safe_load(file)\r\n           ^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\jonty\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\crew-agent-OgCTPeQm-py3.12\\Lib\\site-packages\\yaml\\__init__.py\", line 125, in safe_load\r\n    return load(stream, SafeLoader)\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\jonty\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\crew-agent-OgCTPeQm-py3.12\\Lib\\site-packages\\yaml\\__init__.py\", line 79, in load\r\n    loader = Loader(stream)\r\n             ^^^^^^^^^^^^^^\r\n  File \"C:\\Users\\jonty\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\crew-agent-OgCTPeQm-py3.12\\Lib\\site-packages\\yaml\\loader.py\", line 34, in __init__\r\n    Reader.__init__(self, stream)\r\n  File \"C:\\Users\\jonty\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\crew-agent-OgCTPeQm-py3.12\\Lib\\site-packages\\yaml\\reader.py\", line 85, in __init__\r\n    self.determine_encoding()\r\n  File \"C:\\Users\\jonty\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\crew-agent-OgCTPeQm-py3.12\\Lib\\site-packages\\yaml\\reader.py\", line 124, in determine_encoding\r\n    self.update_raw()\r\n  File \"C:\\Users\\jonty\\AppData\\Local\\pypoetry\\Cache\\virtualenvs\\crew-agent-OgCTPeQm-py3.12\\Lib\\site-packages\\yaml\\reader.py\", line 178, in update_raw\r\n    data = self.stream.read(size)\r\n           ^^^^^^^^^^^^^^^^^^^^^^\r\nUnicodeDecodeError: 'gbk' codec can't decode byte 0xac in position 102: illegal multibyte sequence\r\nAn error occurred while running the crew: Command '['poetry', 'run', 'run_crew']' returned non-zero exit status 1.\r\n\r\n`\r\n\r\n### Possible Solution\r\n\r\nWhen loading yaml files, it automatically detects whether the file encoding is gbk or utf-8 or something else, and loads the file in this encoding format because it involves the definition of agents and the definition of tasks, and people in many other countries may use different encodings\r\n\r\n### Additional context\r\n\r\nno",
        "base_commit": "322780a5f36840bf566aac97d872dc64261f4474",
        "repo": "repo/crewAI-1270",
        "patch": {
            "tests/agent_test.py": {
                "before": [
                    "@@ -27,7 +27,7 @@ def test_agent_creation():",
                    " ",
                    " def test_agent_default_values():",
                    "     agent = Agent(role=\"test role\", goal=\"test goal\", backstory=\"test backstory\")",
                    "-    assert agent.llm == \"gpt-4o\""
                ],
                "after": [
                    "-    assert agent.llm == \"gpt-4o\"",
                    "+    assert agent.llm == \"gpt-4o-mini\"",
                    "     assert agent.allow_delegation is False",
                    " ",
                    " "
                ]
            }
        }
    },
    {
        "instance_id": "crewAI__crewAI-1723",
        "title": "[BUG] error resetting short-term memory",
        "problem_statement": "[BUG] error resetting short-term memory. Description\n\nA disk I/O error occurs when resetting short-term memory\n\n### Steps to Reproduce\n\n1. Create new crewai crew\r\n2. Run `crewai reset-memories -s` or `crewai reset-memories -a`\n\n### Expected behavior\n\nNo errors should be raised and a successful memory reset message should be displayed\n\n### Screenshots/Code snippets\n\n```bash\r\n$ crewai reset-memories -a                                                          \r\nAn unexpected error occurred: An error occurred while resetting the short-term memory: An error occurred while resetting the short_term memory: disk I/O error\r\n\r\n$ crewai reset-memories -s\r\nAn unexpected error occurred: An error occurred while resetting the short-term memory: An error occurred while resetting the short_term memory: disk I/O error\r\n```\r\n\r\nLong term memory reset is fine:\r\n\r\n```bash\r\n$ crewai reset-memories -l\r\nLong term memory has been reset.\r\n```\n\n### Operating System\n\nOther (specify in additional context)\n\n### Python Version\n\n3.12\n\n### crewAI Version\n\n0.86.0\n\n### crewAI Tools Version\n\n0.17.0\n\n### Virtual Environment\n\nVenv\n\n### Evidence\n\n<img width=\"1237\" alt=\"pyproject_toml\" src=\"https://github.com/user-attachments/assets/a56eebcf-abb5-42f6-90ac-155ec13182b3\">\r\n\n\n### Possible Solution\n\nInside the `reset` method on `RAGStorage`, call `self.app.reset()` before calling manually removing the folder with `shutil.rmtree(f\"{db_storage_path()}/{self.type}\")`\n\n### Additional context\n\nNone",
        "base_commit": "6930b6848460dc7d9b1ca7d5629286fc559123cd",
        "repo": "repo/crewAI-1723",
        "patch": {
            "docs/concepts/knowledge.mdx": {
                "before": [
                    "@@ -12,9 +12,11 @@ Knowledge in CrewAI is a powerful system that allows AI agents to access and uti",
                    " Think of it as giving your agents a reference library they can consult while working.",
                    " ",
                    " <Info>",
                    "-  Key benefits of using Knowledge: - Enhance agents with domain-specific"
                ],
                "after": [
                    "+    - Adjust chunk sizes based on content complexity ",
                    "+    - Configure appropriate embedding models",
                    "+    - Consider using local embedding providers for faster processing",
                    "   </Accordion>",
                    " </AccordionGroup>"
                ]
            },
            "docs/concepts/tools.mdx": {
                "before": [
                    "@@ -172,6 +172,48 @@ def my_tool(question: str) -> str:",
                    "     return \"Result from your custom tool\"",
                    " ```",
                    " ",
                    "+### Structured Tools"
                ],
                "after": [
                    "+```",
                    "+",
                    " ### Custom Caching Mechanism",
                    " ",
                    " <Tip>"
                ]
            },
            "src/crewai/agents/crew_agent_executor.py": {
                "before": [
                    "@@ -143,6 +143,9 @@ def _invoke_loop(self, formatted_answer=None):",
                    "                         tool_result = self._execute_tool_and_check_finality(",
                    "                             formatted_answer",
                    "                         )",
                    "+                        if self.step_callback:"
                ],
                "after": [
                    "+                          self.step_callback(tool_result)",
                    "+",
                    "                         formatted_answer.text += f\"\\nObservation: {tool_result.result}\"",
                    "                         formatted_answer.result = tool_result.result",
                    "                         if tool_result.result_as_answer:"
                ]
            },
            "src/crewai/project/annotations.py": {
                "before": [
                    "@@ -66,6 +66,8 @@ def cache_handler(func):",
                    " ",
                    " ",
                    " def crew(func) -> Callable[..., Crew]:",
                    "+"
                ],
                "after": [
                    "+",
                    "+    @wraps(func)",
                    "     def wrapper(self, *args, **kwargs) -> Crew:",
                    "         instantiated_tasks = []",
                    "         instantiated_agents = []"
                ]
            },
            "src/crewai/project/crew_base.py": {
                "before": [
                    "@@ -213,4 +213,8 @@ def _map_task_variables(",
                    "                     callback_functions[callback]() for callback in callbacks",
                    "                 ]",
                    " ",
                    "+    # Include base class (qual)name in the wrapper class (qual)name."
                ],
                "after": [
                    "+    # Include base class (qual)name in the wrapper class (qual)name.",
                    "+    WrappedClass.__name__ = CrewBase.__name__ + \"(\" + cls.__name__ + \")\"",
                    "+    WrappedClass.__qualname__ = CrewBase.__qualname__ + \"(\" + cls.__name__ + \")\"",
                    "+  ",
                    "     return cast(T, WrappedClass)"
                ]
            },
            "src/crewai/project/utils.py": {
                "before": [
                    "@@ -1,11 +1,13 @@",
                    "+from functools import wraps",
                    "+",
                    " def memoize(func):",
                    "     cache = {}"
                ],
                "after": [
                    "             cache[key] = func(*args, **kwargs)",
                    "         return cache[key]",
                    " ",
                    "-    memoized_func.__dict__.update(func.__dict__)",
                    "     return memoized_func"
                ]
            }
        }
    },
    {
        "instance_id": "crewAI__crewAI-1753",
        "title": "[BUG] CrewJSONEncoder does not accepts enums",
        "problem_statement": "[BUG] CrewJSONEncoder does not accepts enums. Description\n\nWhen using output_pydantic with sqlite3 memory and the type in the output_pydantic contains a field of type Enum.\r\nIn this case, an exception will be raised inside of the KickoffTaskOutputsSQLiteStorage in the add function which calls to:\r\n\r\njson.dumps(output, cls=CrewJSONEncoder)\r\nClaiming: Object of type <Your Enum Type> is not JSON serializable.\r\n\n\n### Steps to Reproduce\n\n1. Create an Enum class:\r\n\r\n```python\r\nfrom enum import Enum\r\n\r\nclass CrewStatus(Enum):\r\n    TODO = \"To Do\"\r\n    SUCCESSFUL = \"Successful\"\r\n    FAILED = \"Failed\"\r\n```\r\n2. Crate a crew with a small task and `output_pydantic=CrewStatus`, `memory=True`\r\n3. Run the `crew.kickoff()` and get an exception `Object of type CrewStatus is not JSON serializable.`\n\n### Expected behavior\n\nNot getting the exception\n\n### Screenshots/Code snippets\n\n![image](https://github.com/user-attachments/assets/200a7fe0-3d81-4027-82eb-e41b37728df2)\r\n\n\n### Operating System\n\nWindows 11\n\n### Python Version\n\n3.12\n\n### crewAI Version\n\n0.86.0\n\n### crewAI Tools Version\n\n0.86.0\n\n### Virtual Environment\n\nVenv\n\n### Evidence\n\nIn the screenshot\n\n### Possible Solution\n\nAdd fix to the CrewJSONEncoder for Enums\n\n### Additional context\n\nNone",
        "base_commit": "ad916abd7652ad088b8355eedc5dd963752e321e",
        "repo": "repo/crewAI-1753",
        "patch": {
            "src/crewai/utilities/crew_json_encoder.py": {
                "before": [
                    "@@ -1,8 +1,8 @@",
                    " import json",
                    " from datetime import date, datetime",
                    " from decimal import Decimal",
                    "-from uuid import UUID"
                ],
                "after": [
                    " from enum import Enum",
                    "+from uuid import UUID",
                    " ",
                    " from pydantic import BaseModel",
                    " "
                ]
            }
        }
    },
    {
        "instance_id": "crewAI__crewAI-1824",
        "title": "[BUG]Failed to build `tiktoken` while running `pip install crewai`",
        "problem_statement": "[BUG]Failed to build `tiktoken` while running `pip install crewai`. Description\r\n\r\nThe build for `tiktoken==0.7.0` fails while installing `crewai`\r\n\r\n### Steps to Reproduce\r\n\r\nRun `pip install crewai` or `uv pip install crewai`\r\n\r\n### Expected behavior\r\n\r\nThe build for `tiktoken` should not fail\r\n\r\n### Screenshots/Code snippets\r\n\r\n![image](https://github.com/user-attachments/assets/c755b6a4-667e-428f-adaf-3e975b65ba09)\r\n![image](https://github.com/user-attachments/assets/38aa11b2-8a2a-49c5-ae9f-080bc5c54e95)\r\n\r\n\r\n### Operating System\r\n\r\nOther (specify in additional context)\r\n\r\n### Python Version\r\n\r\n3.12\r\n\r\n### crewAI Version\r\n\r\nv0.86.0\r\n\r\n### crewAI Tools Version\r\n\r\nnone\r\n\r\n### Virtual Environment\r\n\r\nVenv\r\n\r\n### Evidence\r\n\r\n![image](https://github.com/user-attachments/assets/c755b6a4-667e-428f-adaf-3e975b65ba09)\r\n\r\n\r\n### Possible Solution\r\n\r\nNone\r\n\r\n### Additional context\r\n\r\nOS : Arch Linux\r\nPython Version : 3.13.1",
        "base_commit": "73f328860b4a477a6d3736e646783d7493841cb4",
        "repo": "repo/crewAI-1824",
        "patch": {
            "README.md": {
                "before": [
                    "@@ -85,20 +85,12 @@ First, install CrewAI:",
                    " ```shell",
                    " pip install crewai",
                    " ```",
                    "+If you want to install the 'crewai' package along with its optional features that include additional tools for agents, you can do so by using the following command:"
                ],
                "after": [
                    "-The command above installs the basic package and also adds extra components which require more dependencies to function.",
                    "-",
                    " ### 2. Setting Up Your Crew with the YAML Configuration",
                    " ",
                    " To create a new CrewAI project, run the following CLI (Command Line Interface) command:"
                ]
            }
        }
    },
    {
        "instance_id": "crewAI__crewAI-1934",
        "title": "[BUG] `kickoff` hangs when LLM call fails",
        "problem_statement": "[BUG] `kickoff` hangs when LLM call fails. Description\n\n`kickoff` hangs when LLM call fails\n\n### Steps to Reproduce\n\nMinmum example to reproduce the issue\n\n```python\nimport os\nfrom crewai import Agent, Crew, Task\n\n\n# Enforce a request to the OpenAI API to fail\nos.environ[\"OPENAI_API_KEY\"] = \"sk-fake\"\n\nsimple_agent_1 = Agent(\n    role=\"City Selection Expert\",\n    goal=\"Select the best city based on weather, season, and prices\",\n    backstory=\"An expert in analyzing travel data to pick ideal destinations\",\n    tools=[],\n    llm=\"gpt-4\",\n)\n\n\ntask_1 = Task(\n    description=(\"Analyze and select the best city for the trip\"),\n    agent=simple_agent_1,\n    expected_output=\"Detailed report on the chosen city\",\n)\n\n\ncrew = Crew(agents=[simple_agent_1], tasks=[task_1])\nprint(crew.kickoff())\n```\n\n### Expected behavior\n\nNo hang\n\n### Screenshots/Code snippets\n\nSee steps to reproduce\n\n### Operating System\n\nUbuntu 20.04\n\n### Python Version\n\n3.10\n\n### crewAI Version\n\n0.98.0\n\n### crewAI Tools Version\n\n???\n\n### Virtual Environment\n\nVenv\n\n### Evidence\n\n```\nLiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.\n\nERROR:root:LiteLLM call failed: litellm.AuthenticationError: AuthenticationError: OpenAIException - Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-fake. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n\n\nLiteLLM.Info: If you need to debug this error, use `litellm.set_verbose=True'.\n\nERROR:root:LiteLLM call failed: litellm.AuthenticationError: AuthenticationError: OpenAIException - Error code: 401 - {'error': {'message': 'Incorrect API key provided: sk-fake. You can find your API key at https://platform.openai.com/account/api-keys.', 'type': 'invalid_request_error', 'param': None, 'code': 'invalid_api_key'}}\n```\n\n### Possible Solution\n\nSee `steps to reproduce`\n\n### Additional context\n\nN/A",
        "base_commit": "a21e310d784beb23202cd5a61286846a1e41f436",
        "repo": "repo/crewAI-1934",
        "patch": {
            "src/crewai/agents/crew_agent_executor.py": {
                "before": [
                    "@@ -83,10 +83,8 @@ def __init__(",
                    "         self.tool_name_to_tool_map: Dict[str, BaseTool] = {",
                    "             tool.name: tool for tool in self.tools",
                    "         }",
                    "-        if self.llm.stop:"
                ],
                "after": [
                    "+        self.stop = stop_words",
                    "+        self.llm.stop = list(set(self.llm.stop + self.stop))",
                    " ",
                    "     def invoke(self, inputs: Dict[str, str]) -> Dict[str, Any]:",
                    "         if \"system\" in self.prompt:"
                ]
            },
            "src/crewai/llm.py": {
                "before": [
                    "@@ -142,7 +142,6 @@ def __init__(",
                    "         self.temperature = temperature",
                    "         self.top_p = top_p",
                    "         self.n = n",
                    "-        self.stop = stop"
                ],
                "after": [
                    "         self.n = n",
                    "-        self.stop = stop",
                    "         self.max_completion_tokens = max_completion_tokens",
                    "         self.max_tokens = max_tokens",
                    "         self.presence_penalty = presence_penalty"
                ]
            }
        }
    },
    {
        "instance_id": "ChatDev__ChatDev-465",
        "title": "TypeError: __init__() got an unexpected keyword argument 'audio'",
        "problem_statement": "ypeError: __init__() got an unexpected keyword argument 'audio'. `Traceback (most recent call last):\r\n  File \"/Users/user/miniconda3/envs/ChatDev_conda_env/lib/python3.9/site-packages/tenacity/__init__.py\", line 382, in __call__\r\n    result = fn(*args, **kwargs)\r\n  File \"/Users/user/Desktop/Trials/ChatDev/camel/utils.py\", line 160, in wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/Users/user/Desktop/Trials/ChatDev/camel/agents/chat_agent.py\", line 243, in step\r\n    output_messages = [\r\n  File \"/Users/user/Desktop/Trials/ChatDev/camel/agents/chat_agent.py\", line 244, in <listcomp>\r\n    ChatMessage(role_name=self.role_name, role_type=self.role_type,\r\nTypeError: __init__() got an unexpected keyword argument 'audio'\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/Users/user/Desktop/Trials/ChatDev/run.py\", line 136, in <module>\r\n    chat_chain.execute_chain()\r\n  File \"/Users/user/Desktop/Trials/ChatDev/chatdev/chat_chain.py\", line 168, in execute_chain\r\n    self.execute_step(phase_item)\r\n  File \"/Users/user/Desktop/Trials/ChatDev/chatdev/chat_chain.py\", line 138, in execute_step\r\n    self.chat_env = self.phases[phase].execute(self.chat_env,\r\n  File \"/Users/user/Desktop/Trials/ChatDev/chatdev/phase.py\", line 295, in execute\r\n    self.chatting(chat_env=chat_env,\r\n  File \"/Users/user/Desktop/Trials/ChatDev/chatdev/utils.py\", line 79, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/Users/user/Desktop/Trials/ChatDev/chatdev/phase.py\", line 133, in chatting\r\n    assistant_response, user_response = role_play_session.step(input_user_msg, chat_turn_limit == 1)\r\n  File \"/Users/user/Desktop/Trials/ChatDev/camel/agents/role_playing.py\", line 247, in step\r\n    assistant_response = self.assistant_agent.step(user_msg_rst)\r\n  File \"/Users/user/miniconda3/envs/ChatDev_conda_env/lib/python3.9/site-packages/tenacity/__init__.py\", line 289, in wrapped_f\r\n    return self(f, *args, **kw)\r\n  File \"/Users/user/miniconda3/envs/ChatDev_conda_env/lib/python3.9/site-packages/tenacity/__init__.py\", line 379, in __call__\r\n    do = self.iter(retry_state=retry_state)\r\n  File \"/Users/user/miniconda3/envs/ChatDev_conda_env/lib/python3.9/site-packages/tenacity/__init__.py\", line 326, in iter\r\n    raise retry_exc from fut.exception()\r\ntenacity.RetryError: RetryError[<Future at 0x112641fa0 state=finished raised TypeError>]`\r\n",
        "base_commit": "52edb89997b4312ad27d8c54584d0a6c59940135",
        "repo": "repo/ChatDev-465",
        "patch": {
            "camel/messages/chat_messages.py": {
                "before": [
                    "@@ -39,13 +39,15 @@ class ChatMessage(BaseMessage):",
                    "         role (str): The role of the message in OpenAI chat system.",
                    "         content (str): The content of the message. (default: :obj:`\"\"`)",
                    "         refusal (str): The refusal to build argument.",
                    "+        audio (object): The audio contains data about the audio response from the model."
                ],
                "after": [
                    "     meta_dict: Optional[Dict[str, str]] = None",
                    "     role: str = \"user\"",
                    "     content: str = \"\"",
                    "     refusal: str = None",
                    "+    audio: object = None"
                ]
            }
        }
    },
    {
        "instance_id": "ChatDev__ChatDev-318",
        "title": "KeyError: 'web_spider'    when trying to run run.py",
        "problem_statement": "KeyError: 'web_spider' when trying to run run.py. I get this when I run run.py\r\n\r\nI've reinstalled all the modules, used conda, nothing is helping.\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Users/djbritt/Downloads/ai/gamedev/update_12.31.23/ChatDev/run.py\", line 102, in <module>\r\n    chat_chain = ChatChain(config_path=config_path,\r\n  File \"/Users/djbritt/Downloads/ai/gamedev/update_12.31.23/ChatDev/chatdev/chat_chain.py\", line 66, in __init__\r\n    self.web_spider = self.config[\"web_spider\"]\r\nKeyError: 'web_spider'\r\n```",
        "base_commit": "ec536d54b77aac7bcef85158833675ed9aa02b3e",
        "repo": "repo/ChatDev-318",
        "patch": {
            "CompanyConfig/Art/ChatChainConfig.json": {
                "before": [
                    "@@ -116,6 +116,7 @@",
                    "   \"gui_design\": \"True\",",
                    "   \"git_management\": \"False\",",
                    "   \"self_improve\": \"False\",",
                    "+  \"web_spider\": \"False\","
                ],
                "after": [
                    "+  \"web_spider\": \"False\",",
                    "   \"incremental_develop\": \"False\",",
                    "   \"background_prompt\": \"ChatDev is a software company powered by multiple intelligent agents, such as chief executive officer, chief human resources officer, chief product officer, chief technology officer, etc, with a multi-agent organizational structure and the mission of 'changing the digital world through programming'.\"",
                    " }",
                    "\\ No newline at end of file"
                ]
            },
            "CompanyConfig/Human/ChatChainConfig.json": {
                "before": [
                    "@@ -110,6 +110,7 @@",
                    "   \"gui_design\": \"True\",",
                    "   \"git_management\": \"False\",",
                    "   \"self_improve\": \"False\",",
                    "+  \"web_spider\": \"False\","
                ],
                "after": [
                    "   \"self_improve\": \"False\",",
                    "+  \"web_spider\": \"False\",",
                    "   \"incremental_develop\": \"False\",",
                    "   \"background_prompt\": \"ChatDev is a software company powered by multiple intelligent agents, such as chief executive officer, chief human resources officer, chief product officer, chief technology officer, etc, with a multi-agent organizational structure and the mission of 'changing the digital world through programming'.\"",
                    " }"
                ]
            },
            "CompanyConfig/Human/PhaseConfig.json": {
                "before": [
                    "@@ -36,6 +36,7 @@",
                    "     \"phase_prompt\": [",
                    "       \"According to the new user's task and our software designs listed below: \",",
                    "       \"Task: \\\"{task}\\\".\",",
                    "+      \"Task description: \\\"{description}\\\".\","
                ],
                "after": [
                    "       \"Task: \\\"{task}\\\".\",",
                    "+      \"Task description: \\\"{description}\\\".\",",
                    "       \"Modality: \\\"{modality}\\\".\",",
                    "       \"Programming Language: \\\"{language}\\\"\",",
                    "       \"Ideas:\\\"{ideas}\\\"\","
                ]
            },
            "CompanyConfig/Incremental/ChatChainConfig.json": {
                "before": [
                    "@@ -91,6 +91,7 @@",
                    "   \"gui_design\": \"True\",",
                    "   \"git_management\": \"False\",",
                    "   \"self_improve\": \"False\",",
                    "+  \"web_spider\": \"False\","
                ],
                "after": [
                    "   \"self_improve\": \"False\",",
                    "+  \"web_spider\": \"False\",",
                    "   \"incremental_develop\": \"True\",",
                    "   \"background_prompt\": \"ChatDev is a software company powered by multiple intelligent agents, such as chief executive officer, chief human resources officer, chief product officer, chief technology officer, etc, with a multi-agent organizational structure and the mission of 'changing the digital world through programming'.\"",
                    " }"
                ]
            }
        }
    },
    {
        "instance_id": "ChatDev__ChatDev-413",
        "title": "unexpected keyword argument \"refusal\"",
        "problem_statement": "unexpected keyword argument \"refusal\". Traceback (most recent call last):\r\n  File \"/root/miniconda3/envs/ChatDev_conda_env/lib/python3.9/site-packages/tenacity/__init__.py\", line 382, in __call__\r\n    result = fn(*args, **kwargs)\r\n  File \"/code/chatdev/ChatDev/camel/utils.py\", line 154, in wrapper\r\n    return func(self, *args, **kwargs)\r\n  File \"/code/chatdev/ChatDev/camel/agents/chat_agent.py\", line 243, in step\r\n    output_messages = [\r\n  File \"/code/chatdev/ChatDev/camel/agents/chat_agent.py\", line 244, in <listcomp>\r\n    ChatMessage(role_name=self.role_name, role_type=self.role_type,\r\nTypeError: __init__() got an unexpected keyword argument 'refusal'\r\n\r\nThe above exception was the direct cause of the following exception:\r\n\r\nTraceback (most recent call last):\r\n  File \"/code/chatdev/ChatDev/run.py\", line 134, in <module>\r\n    chat_chain.execute_chain()\r\n  File \"/code/chatdev/ChatDev/chatdev/chat_chain.py\", line 168, in execute_chain\r\n    self.execute_step(phase_item)\r\n  File \"/code/chatdev/ChatDev/chatdev/chat_chain.py\", line 138, in execute_step\r\n    self.chat_env = self.phases[phase].execute(self.chat_env,\r\n  File \"/code/chatdev/ChatDev/chatdev/phase.py\", line 295, in execute\r\n    self.chatting(chat_env=chat_env,\r\n  File \"/code/chatdev/ChatDev/chatdev/utils.py\", line 79, in wrapper\r\n    return func(*args, **kwargs)\r\n  File \"/code/chatdev/ChatDev/chatdev/phase.py\", line 133, in chatting\r\n    assistant_response, user_response = role_play_session.step(input_user_msg, chat_turn_limit == 1)\r\n  File \"/code/chatdev/ChatDev/camel/agents/role_playing.py\", line 247, in step\r\n    assistant_response = self.assistant_agent.step(user_msg_rst)\r\n  File \"/root/miniconda3/envs/ChatDev_conda_env/lib/python3.9/site-packages/tenacity/__init__.py\", line 289, in wrapped_f\r\n    return self(f, *args, **kw)\r\n  File \"/root/miniconda3/envs/ChatDev_conda_env/lib/python3.9/site-packages/tenacity/__init__.py\", line 379, in __call__\r\n    do = self.iter(retry_state=retry_state)\r\n  File \"/root/miniconda3/envs/ChatDev_conda_env/lib/python3.9/site-packages/tenacity/__init__.py\", line 326, in iter\r\n    raise retry_exc from fut.exception()\r\ntenacity.RetryError: RetryError[<Future at 0x7f0049d10c40 state=finished raised TypeError>]\r\n\r\n![image](https://github.com/user-attachments/assets/1ca07af1-a308-48bc-8054-6569f97646e8)\r\n",
        "base_commit": "a4b1b0de0f70b3fa085103ca9af00e65384474c3",
        "repo": "repo/ChatDev-413",
        "patch": {
            "camel/messages/chat_messages.py": {
                "before": [
                    "@@ -38,12 +38,14 @@ class ChatMessage(BaseMessage):",
                    "             for the message.",
                    "         role (str): The role of the message in OpenAI chat system.",
                    "         content (str): The content of the message. (default: :obj:`\"\"`)",
                    "+        refusal (str): The refusal to build argument."
                ],
                "after": [
                    "     role_type: RoleType = RoleType.USER",
                    "     meta_dict: Optional[Dict[str, str]] = None",
                    "     role: str = \"user\"",
                    "     content: str = \"\"",
                    "+    refusal: str = None"
                ]
            }
        }
    }
]