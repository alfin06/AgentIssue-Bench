From 2100f7f3ecfa85ff1baa279e27fd98d2e33c4b67 Mon Sep 17 00:00:00 2001
From: Sachin Joglekar <srjoglekar246@gmail.com>
Date: Tue, 24 Dec 2024 19:07:25 +0000
Subject: [PATCH] Support custom models with OpenAI client

---
 .../models/openai/_openai_client.py            |  5 ++++-
 .../models/openai/config/__init__.py           |  5 ++++-
 .../tests/models/test_openai_model_client.py   | 18 ++++++++++++++++++
 3 files changed, 26 insertions(+), 2 deletions(-)

diff --git a/python/packages/autogen-ext/src/autogen_ext/models/openai/_openai_client.py b/python/packages/autogen-ext/src/autogen_ext/models/openai/_openai_client.py
index d37f696faae5..a70ee087aa95 100644
--- a/python/packages/autogen-ext/src/autogen_ext/models/openai/_openai_client.py
+++ b/python/packages/autogen-ext/src/autogen_ext/models/openai/_openai_client.py
@@ -360,7 +360,10 @@ def __init__(
     ):
         self._client = client
         if model_capabilities is None:
-            self._model_capabilities = _model_info.get_capabilities(create_args["model"])
+            try:
+                self._model_capabilities = _model_info.get_capabilities(create_args["model"])
+            except KeyError as err:
+                raise ValueError("model_capabilities is required when model name is not a valid OpenAI model") from err
         else:
             self._model_capabilities = model_capabilities
 
diff --git a/python/packages/autogen-ext/src/autogen_ext/models/openai/config/__init__.py b/python/packages/autogen-ext/src/autogen_ext/models/openai/config/__init__.py
index c2938cb7c854..4f83466f531d 100644
--- a/python/packages/autogen-ext/src/autogen_ext/models/openai/config/__init__.py
+++ b/python/packages/autogen-ext/src/autogen_ext/models/openai/config/__init__.py
@@ -2,7 +2,7 @@
 
 from autogen_core import ComponentModel
 from autogen_core.models import ModelCapabilities
-from pydantic import BaseModel
+from pydantic import BaseModel, ConfigDict
 from typing_extensions import Required, TypedDict
 
 from .._azure_token_provider import AzureTokenProvider
@@ -79,6 +79,9 @@ class CreateArgumentsConfigModel(BaseModel):
 
 
 class BaseOpenAIClientConfigurationConfigModel(CreateArgumentsConfigModel):
+    # To allow `model_capabilities` field without triggering pydantic warnings.
+    model_config = ConfigDict(protected_namespaces=())
+
     model: str
     api_key: str | None = None
     timeout: float | None = None
diff --git a/python/packages/autogen-ext/tests/models/test_openai_model_client.py b/python/packages/autogen-ext/tests/models/test_openai_model_client.py
index 9f2144c5dc39..54ae8a6ad6e8 100644
--- a/python/packages/autogen-ext/tests/models/test_openai_model_client.py
+++ b/python/packages/autogen-ext/tests/models/test_openai_model_client.py
@@ -137,6 +137,24 @@ async def test_openai_chat_completion_client() -> None:
     assert client
 
 
+@pytest.mark.asyncio
+async def test_custom_model_with_capabilities() -> None:
+    with pytest.raises(ValueError, match="model_capabilities is required"):
+        client = OpenAIChatCompletionClient(model="dummy_model", base_url="https://api.dummy.com/v0", api_key="api_key")
+
+    client = OpenAIChatCompletionClient(
+        model="dummy_model",
+        base_url="https://api.dummy.com/v0",
+        api_key="api_key",
+        model_capabilities={
+            "vision": False,
+            "function_calling": False,
+            "json_output": False,
+        },
+    )
+    assert client
+
+
 @pytest.mark.asyncio
 async def test_azure_openai_chat_completion_client() -> None:
     client = AzureOpenAIChatCompletionClient(
